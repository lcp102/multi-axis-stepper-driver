
StepperMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000770c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800798c  0800798c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800798c  0800798c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800798c  0800798c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ac  20000180  08007b14  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  08007b14  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017afb  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003127  00000000  00000000  00037ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001020  00000000  00000000  0003add0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  0003bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ebc  00000000  00000000  0003cca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2ac  00000000  00000000  00053b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074b10  00000000  00000000  00061e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c4  00000000  00000000  000d699c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08007804 	.word	0x08007804

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08007804 	.word	0x08007804

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_frsub>:
 8000a1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a20:	e002      	b.n	8000a28 <__addsf3>
 8000a22:	bf00      	nop

08000a24 <__aeabi_fsub>:
 8000a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a28 <__addsf3>:
 8000a28:	0042      	lsls	r2, r0, #1
 8000a2a:	bf1f      	itttt	ne
 8000a2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a30:	ea92 0f03 	teqne	r2, r3
 8000a34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3c:	d06a      	beq.n	8000b14 <__addsf3+0xec>
 8000a3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a46:	bfc1      	itttt	gt
 8000a48:	18d2      	addgt	r2, r2, r3
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	4048      	eorgt	r0, r1
 8000a4e:	4041      	eorgt	r1, r0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	2b19      	cmp	r3, #25
 8000a56:	bf88      	it	hi
 8000a58:	4770      	bxhi	lr
 8000a5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4249      	negne	r1, r1
 8000a7a:	ea92 0f03 	teq	r2, r3
 8000a7e:	d03f      	beq.n	8000b00 <__addsf3+0xd8>
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	fa41 fc03 	asr.w	ip, r1, r3
 8000a88:	eb10 000c 	adds.w	r0, r0, ip
 8000a8c:	f1c3 0320 	rsb	r3, r3, #32
 8000a90:	fa01 f103 	lsl.w	r1, r1, r3
 8000a94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a98:	d502      	bpl.n	8000aa0 <__addsf3+0x78>
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aa0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aa4:	d313      	bcc.n	8000ace <__addsf3+0xa6>
 8000aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aaa:	d306      	bcc.n	8000aba <__addsf3+0x92>
 8000aac:	0840      	lsrs	r0, r0, #1
 8000aae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ab2:	f102 0201 	add.w	r2, r2, #1
 8000ab6:	2afe      	cmp	r2, #254	; 0xfe
 8000ab8:	d251      	bcs.n	8000b5e <__addsf3+0x136>
 8000aba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000abe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ac2:	bf08      	it	eq
 8000ac4:	f020 0001 	biceq.w	r0, r0, #1
 8000ac8:	ea40 0003 	orr.w	r0, r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	eb40 0000 	adc.w	r0, r0, r0
 8000ad4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ad8:	f1a2 0201 	sub.w	r2, r2, #1
 8000adc:	d1ed      	bne.n	8000aba <__addsf3+0x92>
 8000ade:	fab0 fc80 	clz	ip, r0
 8000ae2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aee:	bfaa      	itet	ge
 8000af0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af4:	4252      	neglt	r2, r2
 8000af6:	4318      	orrge	r0, r3
 8000af8:	bfbc      	itt	lt
 8000afa:	40d0      	lsrlt	r0, r2
 8000afc:	4318      	orrlt	r0, r3
 8000afe:	4770      	bx	lr
 8000b00:	f092 0f00 	teq	r2, #0
 8000b04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b08:	bf06      	itte	eq
 8000b0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b0e:	3201      	addeq	r2, #1
 8000b10:	3b01      	subne	r3, #1
 8000b12:	e7b5      	b.n	8000a80 <__addsf3+0x58>
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d021      	beq.n	8000b68 <__addsf3+0x140>
 8000b24:	ea92 0f03 	teq	r2, r3
 8000b28:	d004      	beq.n	8000b34 <__addsf3+0x10c>
 8000b2a:	f092 0f00 	teq	r2, #0
 8000b2e:	bf08      	it	eq
 8000b30:	4608      	moveq	r0, r1
 8000b32:	4770      	bx	lr
 8000b34:	ea90 0f01 	teq	r0, r1
 8000b38:	bf1c      	itt	ne
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	4770      	bxne	lr
 8000b3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b42:	d104      	bne.n	8000b4e <__addsf3+0x126>
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	bf28      	it	cs
 8000b48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	4770      	bx	lr
 8000b4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b52:	bf3c      	itt	cc
 8000b54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bxcc	lr
 8000b5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	4770      	bx	lr
 8000b68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b6c:	bf16      	itet	ne
 8000b6e:	4608      	movne	r0, r1
 8000b70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b74:	4601      	movne	r1, r0
 8000b76:	0242      	lsls	r2, r0, #9
 8000b78:	bf06      	itte	eq
 8000b7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7e:	ea90 0f01 	teqeq	r0, r1
 8000b82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_ui2f>:
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e004      	b.n	8000b98 <__aeabi_i2f+0x8>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_i2f>:
 8000b90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	bf48      	it	mi
 8000b96:	4240      	negmi	r0, r0
 8000b98:	ea5f 0c00 	movs.w	ip, r0
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	e01c      	b.n	8000be6 <__aeabi_l2f+0x2a>

08000bac <__aeabi_ul2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e00a      	b.n	8000bd0 <__aeabi_l2f+0x14>
 8000bba:	bf00      	nop

08000bbc <__aeabi_l2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_l2f+0x14>
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	ea5f 0c01 	movs.w	ip, r1
 8000bd4:	bf02      	ittt	eq
 8000bd6:	4684      	moveq	ip, r0
 8000bd8:	4601      	moveq	r1, r0
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000be0:	bf08      	it	eq
 8000be2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000be6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bea:	fabc f28c 	clz	r2, ip
 8000bee:	3a08      	subs	r2, #8
 8000bf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf4:	db10      	blt.n	8000c18 <__aeabi_l2f+0x5c>
 8000bf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f102 0220 	add.w	r2, r2, #32
 8000c1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c28:	fa21 f202 	lsr.w	r2, r1, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_fmul>:
 8000c38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c40:	bf1e      	ittt	ne
 8000c42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c46:	ea92 0f0c 	teqne	r2, ip
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d06f      	beq.n	8000d30 <__aeabi_fmul+0xf8>
 8000c50:	441a      	add	r2, r3
 8000c52:	ea80 0c01 	eor.w	ip, r0, r1
 8000c56:	0240      	lsls	r0, r0, #9
 8000c58:	bf18      	it	ne
 8000c5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c5e:	d01e      	beq.n	8000c9e <__aeabi_fmul+0x66>
 8000c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c78:	bf3e      	ittt	cc
 8000c7a:	0049      	lslcc	r1, r1, #1
 8000c7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	ea40 0001 	orr.w	r0, r0, r1
 8000c86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c8a:	2afd      	cmp	r2, #253	; 0xfd
 8000c8c:	d81d      	bhi.n	8000cca <__aeabi_fmul+0x92>
 8000c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	f090 0f00 	teq	r0, #0
 8000ca2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca6:	bf08      	it	eq
 8000ca8:	0249      	lsleq	r1, r1, #9
 8000caa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cb2:	3a7f      	subs	r2, #127	; 0x7f
 8000cb4:	bfc2      	ittt	gt
 8000cb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cbe:	4770      	bxgt	lr
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	dc5d      	bgt.n	8000d88 <__aeabi_fmul+0x150>
 8000ccc:	f112 0f19 	cmn.w	r2, #25
 8000cd0:	bfdc      	itt	le
 8000cd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cd6:	4770      	bxle	lr
 8000cd8:	f1c2 0200 	rsb	r2, r2, #0
 8000cdc:	0041      	lsls	r1, r0, #1
 8000cde:	fa21 f102 	lsr.w	r1, r1, r2
 8000ce2:	f1c2 0220 	rsb	r2, r2, #32
 8000ce6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cee:	f140 0000 	adc.w	r0, r0, #0
 8000cf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cf6:	bf08      	it	eq
 8000cf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfc:	4770      	bx	lr
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xce>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xe6>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e78f      	b.n	8000c50 <__aeabi_fmul+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	bf18      	it	ne
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d00a      	beq.n	8000d56 <__aeabi_fmul+0x11e>
 8000d40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d44:	bf18      	it	ne
 8000d46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	d1d8      	bne.n	8000cfe <__aeabi_fmul+0xc6>
 8000d4c:	ea80 0001 	eor.w	r0, r0, r1
 8000d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f090 0f00 	teq	r0, #0
 8000d5a:	bf17      	itett	ne
 8000d5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d60:	4608      	moveq	r0, r1
 8000d62:	f091 0f00 	teqne	r1, #0
 8000d66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d6a:	d014      	beq.n	8000d96 <__aeabi_fmul+0x15e>
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	d101      	bne.n	8000d76 <__aeabi_fmul+0x13e>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d10f      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d76:	ea93 0f0c 	teq	r3, ip
 8000d7a:	d103      	bne.n	8000d84 <__aeabi_fmul+0x14c>
 8000d7c:	024b      	lsls	r3, r1, #9
 8000d7e:	bf18      	it	ne
 8000d80:	4608      	movne	r0, r1
 8000d82:	d108      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bx	lr
 8000d96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_fdiv>:
 8000da0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da8:	bf1e      	ittt	ne
 8000daa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dae:	ea92 0f0c 	teqne	r2, ip
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d069      	beq.n	8000e8c <__aeabi_fdiv+0xec>
 8000db8:	eba2 0203 	sub.w	r2, r2, r3
 8000dbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dc6:	d037      	beq.n	8000e38 <__aeabi_fdiv+0x98>
 8000dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	bf38      	it	cc
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000de2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000de6:	428b      	cmp	r3, r1
 8000de8:	bf24      	itt	cs
 8000dea:	1a5b      	subcs	r3, r3, r1
 8000dec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000df0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000df4:	bf24      	itt	cs
 8000df6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e02:	bf24      	itt	cs
 8000e04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e10:	bf24      	itt	cs
 8000e12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e22:	d1e0      	bne.n	8000de6 <__aeabi_fdiv+0x46>
 8000e24:	2afd      	cmp	r2, #253	; 0xfd
 8000e26:	f63f af50 	bhi.w	8000cca <__aeabi_fmul+0x92>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e30:	bf08      	it	eq
 8000e32:	f020 0001 	biceq.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e40:	327f      	adds	r2, #127	; 0x7f
 8000e42:	bfc2      	ittt	gt
 8000e44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4c:	4770      	bxgt	lr
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	3a01      	subs	r2, #1
 8000e58:	e737      	b.n	8000cca <__aeabi_fmul+0x92>
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xc2>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xda>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e795      	b.n	8000db8 <__aeabi_fdiv+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	d108      	bne.n	8000ea8 <__aeabi_fdiv+0x108>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	f47f af7d 	bne.w	8000d96 <__aeabi_fmul+0x15e>
 8000e9c:	ea93 0f0c 	teq	r3, ip
 8000ea0:	f47f af70 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e776      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fdiv+0x118>
 8000eae:	024b      	lsls	r3, r1, #9
 8000eb0:	f43f af4c 	beq.w	8000d4c <__aeabi_fmul+0x114>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e76e      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000eb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ebc:	bf18      	it	ne
 8000ebe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	d1ca      	bne.n	8000e5a <__aeabi_fdiv+0xba>
 8000ec4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec8:	f47f af5c 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ecc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ed0:	f47f af3c 	bne.w	8000d4c <__aeabi_fmul+0x114>
 8000ed4:	e75f      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ed6:	bf00      	nop

08000ed8 <__gesf2>:
 8000ed8:	f04f 3cff 	mov.w	ip, #4294967295
 8000edc:	e006      	b.n	8000eec <__cmpsf2+0x4>
 8000ede:	bf00      	nop

08000ee0 <__lesf2>:
 8000ee0:	f04f 0c01 	mov.w	ip, #1
 8000ee4:	e002      	b.n	8000eec <__cmpsf2+0x4>
 8000ee6:	bf00      	nop

08000ee8 <__cmpsf2>:
 8000ee8:	f04f 0c01 	mov.w	ip, #1
 8000eec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	bf18      	it	ne
 8000efe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f02:	d011      	beq.n	8000f28 <__cmpsf2+0x40>
 8000f04:	b001      	add	sp, #4
 8000f06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f0a:	bf18      	it	ne
 8000f0c:	ea90 0f01 	teqne	r0, r1
 8000f10:	bf58      	it	pl
 8000f12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f16:	bf88      	it	hi
 8000f18:	17c8      	asrhi	r0, r1, #31
 8000f1a:	bf38      	it	cc
 8000f1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f20:	bf18      	it	ne
 8000f22:	f040 0001 	orrne.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f2c:	d102      	bne.n	8000f34 <__cmpsf2+0x4c>
 8000f2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f32:	d105      	bne.n	8000f40 <__cmpsf2+0x58>
 8000f34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f38:	d1e4      	bne.n	8000f04 <__cmpsf2+0x1c>
 8000f3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f3e:	d0e1      	beq.n	8000f04 <__cmpsf2+0x1c>
 8000f40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__aeabi_cfrcmple>:
 8000f48:	4684      	mov	ip, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4661      	mov	r1, ip
 8000f4e:	e7ff      	b.n	8000f50 <__aeabi_cfcmpeq>

08000f50 <__aeabi_cfcmpeq>:
 8000f50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f52:	f7ff ffc9 	bl	8000ee8 <__cmpsf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	bf48      	it	mi
 8000f5a:	f110 0f00 	cmnmi.w	r0, #0
 8000f5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f60 <__aeabi_fcmpeq>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff fff4 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f68:	bf0c      	ite	eq
 8000f6a:	2001      	moveq	r0, #1
 8000f6c:	2000      	movne	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmplt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffea 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmple>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffe0 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f90:	bf94      	ite	ls
 8000f92:	2001      	movls	r0, #1
 8000f94:	2000      	movhi	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpge>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffd2 	bl	8000f48 <__aeabi_cfrcmple>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpgt>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffc8 	bl	8000f48 <__aeabi_cfrcmple>
 8000fb8:	bf34      	ite	cc
 8000fba:	2001      	movcc	r0, #1
 8000fbc:	2000      	movcs	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_f2iz>:
 8000fc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fcc:	d30f      	bcc.n	8000fee <__aeabi_f2iz+0x2a>
 8000fce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd6:	d90d      	bls.n	8000ff4 <__aeabi_f2iz+0x30>
 8000fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fe4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe8:	bf18      	it	ne
 8000fea:	4240      	negne	r0, r0
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr
 8000ff4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff8:	d101      	bne.n	8000ffe <__aeabi_f2iz+0x3a>
 8000ffa:	0242      	lsls	r2, r0, #9
 8000ffc:	d105      	bne.n	800100a <__aeabi_f2iz+0x46>
 8000ffe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001002:	bf08      	it	eq
 8001004:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <microsecondDelay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void microsecondDelay()
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++)
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	e002      	b.n	8001022 <microsecondDelay+0x12>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3301      	adds	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b01      	cmp	r3, #1
 8001026:	ddf9      	ble.n	800101c <microsecondDelay+0xc>
	{}
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
	...

08001034 <setDirectionS0>:

void setDirectionS0(int direction)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d105      	bne.n	800104e <setDirectionS0+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2102      	movs	r1, #2
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <setDirectionS0+0x2c>)
 8001048:	f001 faee 	bl	8002628 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
	}
}
 800104c:	e004      	b.n	8001058 <setDirectionS0+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2102      	movs	r1, #2
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <setDirectionS0+0x2c>)
 8001054:	f001 fae8 	bl	8002628 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010800 	.word	0x40010800

08001064 <setDirectionS1>:

void setDirectionS1(int direction)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d105      	bne.n	800107e <setDirectionS1+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2108      	movs	r1, #8
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <setDirectionS1+0x2c>)
 8001078:	f001 fad6 	bl	8002628 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
	}
}
 800107c:	e004      	b.n	8001088 <setDirectionS1+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <setDirectionS1+0x2c>)
 8001084:	f001 fad0 	bl	8002628 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40010800 	.word	0x40010800

08001094 <setDirectionS2>:

void setDirectionS2(int direction)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d105      	bne.n	80010ae <setDirectionS2+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2120      	movs	r1, #32
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <setDirectionS2+0x2c>)
 80010a8:	f001 fabe 	bl	8002628 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
	}
}
 80010ac:	e004      	b.n	80010b8 <setDirectionS2+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2120      	movs	r1, #32
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <setDirectionS2+0x2c>)
 80010b4:	f001 fab8 	bl	8002628 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010800 	.word	0x40010800

080010c4 <sendPulseS0>:

void sendPulseS0()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80010c8:	2101      	movs	r1, #1
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <sendPulseS0+0x1c>)
 80010cc:	f001 fac4 	bl	8002658 <HAL_GPIO_TogglePin>
	 microsecondDelay();
 80010d0:	f7ff ff9e 	bl	8001010 <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80010d4:	2101      	movs	r1, #1
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <sendPulseS0+0x1c>)
 80010d8:	f001 fabe 	bl	8002658 <HAL_GPIO_TogglePin>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40010800 	.word	0x40010800

080010e4 <sendPulseS1>:

void sendPulseS1()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80010e8:	2104      	movs	r1, #4
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <sendPulseS1+0x1c>)
 80010ec:	f001 fab4 	bl	8002658 <HAL_GPIO_TogglePin>
	 microsecondDelay();
 80010f0:	f7ff ff8e 	bl	8001010 <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80010f4:	2104      	movs	r1, #4
 80010f6:	4802      	ldr	r0, [pc, #8]	; (8001100 <sendPulseS1+0x1c>)
 80010f8:	f001 faae 	bl	8002658 <HAL_GPIO_TogglePin>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40010800 	.word	0x40010800

08001104 <sendPulseS2>:

void sendPulseS2()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001108:	2110      	movs	r1, #16
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <sendPulseS2+0x1c>)
 800110c:	f001 faa4 	bl	8002658 <HAL_GPIO_TogglePin>
	 microsecondDelay();
 8001110:	f7ff ff7e 	bl	8001010 <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001114:	2110      	movs	r1, #16
 8001116:	4802      	ldr	r0, [pc, #8]	; (8001120 <sendPulseS2+0x1c>)
 8001118:	f001 fa9e 	bl	8002658 <HAL_GPIO_TogglePin>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010800 	.word	0x40010800

08001124 <motionComplete>:


void motionComplete(StepperMotor* motor)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	motor->currentCount = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	821a      	strh	r2, [r3, #16]
	motor->targetCount = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	825a      	strh	r2, [r3, #18]
	motor->rampingUp = 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	751a      	strb	r2, [r3, #20]
	motor->rampingDown = 0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	755a      	strb	r2, [r3, #21]
	motor->rampUpCount = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	759a      	strb	r2, [r3, #22]
	motor->rampDownCount = 0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	75da      	strb	r2, [r3, #23]
	motor->estDurationOfMovement = 0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <programInit>:

void programInit()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	//Timer Initializations
	motor[0].timerHandle = &htim2;
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <programInit+0xe0>)
 800116c:	4a36      	ldr	r2, [pc, #216]	; (8001248 <programInit+0xe4>)
 800116e:	61da      	str	r2, [r3, #28]
	motor[1].timerHandle = &htim3;
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <programInit+0xe0>)
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <programInit+0xe8>)
 8001174:	64da      	str	r2, [r3, #76]	; 0x4c
	motor[2].timerHandle = &htim4;
 8001176:	4b33      	ldr	r3, [pc, #204]	; (8001244 <programInit+0xe0>)
 8001178:	4a35      	ldr	r2, [pc, #212]	; (8001250 <programInit+0xec>)
 800117a:	67da      	str	r2, [r3, #124]	; 0x7c

	//Direction-set function pointers
	motor[0].setDirection = setDirectionS0;
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <programInit+0xe0>)
 800117e:	4a35      	ldr	r2, [pc, #212]	; (8001254 <programInit+0xf0>)
 8001180:	605a      	str	r2, [r3, #4]
	motor[1].setDirection = setDirectionS1;
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <programInit+0xe0>)
 8001184:	4a34      	ldr	r2, [pc, #208]	; (8001258 <programInit+0xf4>)
 8001186:	635a      	str	r2, [r3, #52]	; 0x34
	motor[2].setDirection = setDirectionS2;
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <programInit+0xe0>)
 800118a:	4a34      	ldr	r2, [pc, #208]	; (800125c <programInit+0xf8>)
 800118c:	665a      	str	r2, [r3, #100]	; 0x64

	//Set pulse pointers
	motor[0].sendPulse = sendPulseS0;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <programInit+0xe0>)
 8001190:	4a33      	ldr	r2, [pc, #204]	; (8001260 <programInit+0xfc>)
 8001192:	601a      	str	r2, [r3, #0]
	motor[1].sendPulse = sendPulseS1;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <programInit+0xe0>)
 8001196:	4a33      	ldr	r2, [pc, #204]	; (8001264 <programInit+0x100>)
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
	motor[2].sendPulse = sendPulseS2;
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <programInit+0xe0>)
 800119c:	4a32      	ldr	r2, [pc, #200]	; (8001268 <programInit+0x104>)
 800119e:	661a      	str	r2, [r3, #96]	; 0x60

	newCommandAvailable = 0;
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <programInit+0x108>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
	previousMotionComplete = 1;
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <programInit+0x10c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	e040      	b.n	8001234 <programInit+0xd0>
	{
		motionComplete(&motor[i]);
 80011b2:	79fa      	ldrb	r2, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <programInit+0xe0>)
 80011be:	4413      	add	r3, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffaf 	bl	8001124 <motionComplete>
		motor[i].scaleFactor = 1;
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	491e      	ldr	r1, [pc, #120]	; (8001244 <programInit+0xe0>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	440b      	add	r3, r1
 80011d4:	3320      	adds	r3, #32
 80011d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011da:	601a      	str	r2, [r3, #0]
		motor[i].direction = CLOCKWISE;
 80011dc:	79fa      	ldrb	r2, [r7, #7]
 80011de:	4919      	ldr	r1, [pc, #100]	; (8001244 <programInit+0xe0>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	440b      	add	r3, r1
 80011ea:	3308      	adds	r3, #8
 80011ec:	22ff      	movs	r2, #255	; 0xff
 80011ee:	701a      	strb	r2, [r3, #0]

		motor[i].absolutePosition = 0;
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	4914      	ldr	r1, [pc, #80]	; (8001244 <programInit+0xe0>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	440b      	add	r3, r1
 80011fe:	330c      	adds	r3, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
		motor[i].pulseFlag = 0;
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	490f      	ldr	r1, [pc, #60]	; (8001244 <programInit+0xe0>)
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	440b      	add	r3, r1
 8001212:	3318      	adds	r3, #24
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
		motor[i].estDurationOfMovement = 0;
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	490a      	ldr	r1, [pc, #40]	; (8001244 <programInit+0xe0>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	440b      	add	r3, r1
 8001226:	3324      	adds	r3, #36	; 0x24
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	3301      	adds	r3, #1
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d9bb      	bls.n	80011b2 <programInit+0x4e>
	}
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000484 	.word	0x20000484
 8001248:	20000444 	.word	0x20000444
 800124c:	20000400 	.word	0x20000400
 8001250:	200003c0 	.word	0x200003c0
 8001254:	08001035 	.word	0x08001035
 8001258:	08001065 	.word	0x08001065
 800125c:	08001095 	.word	0x08001095
 8001260:	080010c5 	.word	0x080010c5
 8001264:	080010e5 	.word	0x080010e5
 8001268:	08001105 	.word	0x08001105
 800126c:	20000440 	.word	0x20000440
 8001270:	20000000 	.word	0x20000000

08001274 <setNextInterruptInterval>:


void setNextInterruptInterval(StepperMotor* motor)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	if (abs(motor->targetCount) > 2*NO_OF_RAMP_STEPS)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	8a5b      	ldrh	r3, [r3, #18]
 8001280:	b21b      	sxth	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	bfb8      	it	lt
 8001286:	425b      	neglt	r3, r3
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	dd53      	ble.n	8001334 <setNextInterruptInterval+0xc0>
	{
		//Calculate next delay
		if (motor->currentCount < NO_OF_RAMP_STEPS)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8a1b      	ldrh	r3, [r3, #16]
 8001290:	b21b      	sxth	r3, r3
 8001292:	2b1f      	cmp	r3, #31
 8001294:	dc19      	bgt.n	80012ca <setNextInterruptInterval+0x56>
		{
			motor->rampUpCount = abs(motor->currentCount);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	8a1b      	ldrh	r3, [r3, #16]
 800129a:	b21b      	sxth	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	bfb8      	it	lt
 80012a0:	425b      	neglt	r3, r3
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	759a      	strb	r2, [r3, #22]
			ramp(motor->rampUpCount, motor->timerHandle, motor->scaleFactor);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7d9b      	ldrb	r3, [r3, #22]
 80012ac:	b2d8      	uxtb	r0, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69d9      	ldr	r1, [r3, #28]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f000 f8be 	bl	8001438 <ramp>

			motor->rampingUp = ACTIVATED;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	751a      	strb	r2, [r3, #20]
			motor->rampingDown = DEACTIVATED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	755a      	strb	r2, [r3, #21]
			ramp(motor->rampDownCount, motor->timerHandle, motor->scaleFactor);
			motor->rampingDown = ACTIVATED;
			motor->rampingUp = DEACTIVATED;
		}
	}
}
 80012c8:	e0b0      	b.n	800142c <setNextInterruptInterval+0x1b8>
		else if (motor->targetCount - motor->currentCount < NO_OF_RAMP_STEPS)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	8a5b      	ldrh	r3, [r3, #18]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8a1b      	ldrh	r3, [r3, #16]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b1f      	cmp	r3, #31
 80012dc:	dc1e      	bgt.n	800131c <setNextInterruptInterval+0xa8>
			motor->rampDownCount = abs(motor->targetCount - motor->currentCount);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	8a5b      	ldrh	r3, [r3, #18]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8a1b      	ldrh	r3, [r3, #16]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfb8      	it	lt
 80012f2:	425b      	neglt	r3, r3
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	75da      	strb	r2, [r3, #23]
			ramp(motor->rampDownCount, motor->timerHandle, motor->scaleFactor);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7ddb      	ldrb	r3, [r3, #23]
 80012fe:	b2d8      	uxtb	r0, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69d9      	ldr	r1, [r3, #28]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	461a      	mov	r2, r3
 800130a:	f000 f895 	bl	8001438 <ramp>
			motor->rampingDown = ACTIVATED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	755a      	strb	r2, [r3, #21]
			motor->rampingUp = DEACTIVATED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	751a      	strb	r2, [r3, #20]
}
 800131a:	e087      	b.n	800142c <setNextInterruptInterval+0x1b8>
		else if (motor->targetCount == motor->currentCount)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	8a5b      	ldrh	r3, [r3, #18]
 8001320:	b21a      	sxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	8a1b      	ldrh	r3, [r3, #16]
 8001326:	b21b      	sxth	r3, r3
 8001328:	429a      	cmp	r2, r3
 800132a:	d17f      	bne.n	800142c <setNextInterruptInterval+0x1b8>
			motionComplete(motor);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fef9 	bl	8001124 <motionComplete>
}
 8001332:	e07b      	b.n	800142c <setNextInterruptInterval+0x1b8>
		if (motor->currentCount < (int)(abs(motor->targetCount)/2.0))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	8a1b      	ldrh	r3, [r3, #16]
 8001338:	b21b      	sxth	r3, r3
 800133a:	461c      	mov	r4, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	8a5b      	ldrh	r3, [r3, #18]
 8001340:	b21b      	sxth	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	bfb8      	it	lt
 8001346:	425b      	neglt	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f853 	bl	80003f4 <__aeabi_i2d>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001356:	f7ff f9e1 	bl	800071c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fac3 	bl	80008ec <__aeabi_d2iz>
 8001366:	4603      	mov	r3, r0
 8001368:	429c      	cmp	r4, r3
 800136a:	da19      	bge.n	80013a0 <setNextInterruptInterval+0x12c>
			motor->rampUpCount = abs((motor->currentCount));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	8a1b      	ldrh	r3, [r3, #16]
 8001370:	b21b      	sxth	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	bfb8      	it	lt
 8001376:	425b      	neglt	r3, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	759a      	strb	r2, [r3, #22]
			ramp(motor->rampUpCount, motor->timerHandle, motor->scaleFactor);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7d9b      	ldrb	r3, [r3, #22]
 8001382:	b2d8      	uxtb	r0, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69d9      	ldr	r1, [r3, #28]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	461a      	mov	r2, r3
 800138e:	f000 f853 	bl	8001438 <ramp>
			motor->rampingUp = ACTIVATED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	751a      	strb	r2, [r3, #20]
			motor->rampingDown = DEACTIVATED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	755a      	strb	r2, [r3, #21]
}
 800139e:	e045      	b.n	800142c <setNextInterruptInterval+0x1b8>
		else if (motor->targetCount == motor->currentCount)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	8a5b      	ldrh	r3, [r3, #18]
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	8a1b      	ldrh	r3, [r3, #16]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d103      	bne.n	80013b8 <setNextInterruptInterval+0x144>
			motionComplete(motor);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff feb7 	bl	8001124 <motionComplete>
}
 80013b6:	e039      	b.n	800142c <setNextInterruptInterval+0x1b8>
		else if (motor->currentCount >= (int)(abs(motor->targetCount)/2.0))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	8a1b      	ldrh	r3, [r3, #16]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	461c      	mov	r4, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	8a5b      	ldrh	r3, [r3, #18]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bfb8      	it	lt
 80013ca:	425b      	neglt	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f811 	bl	80003f4 <__aeabi_i2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013da:	f7ff f99f 	bl	800071c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fa81 	bl	80008ec <__aeabi_d2iz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	429c      	cmp	r4, r3
 80013ee:	db1d      	blt.n	800142c <setNextInterruptInterval+0x1b8>
			motor->rampDownCount = abs((motor->targetCount - motor->currentCount));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	8a5b      	ldrh	r3, [r3, #18]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	8a1b      	ldrh	r3, [r3, #16]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	bfb8      	it	lt
 8001404:	425b      	neglt	r3, r3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	75da      	strb	r2, [r3, #23]
			ramp(motor->rampDownCount, motor->timerHandle, motor->scaleFactor);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7ddb      	ldrb	r3, [r3, #23]
 8001410:	b2d8      	uxtb	r0, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69d9      	ldr	r1, [r3, #28]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	461a      	mov	r2, r3
 800141c:	f000 f80c 	bl	8001438 <ramp>
			motor->rampingDown = ACTIVATED;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	755a      	strb	r2, [r3, #21]
			motor->rampingUp = DEACTIVATED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	751a      	strb	r2, [r3, #20]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bd90      	pop	{r4, r7, pc}
 8001434:	0000      	movs	r0, r0
	...

08001438 <ramp>:

void ramp(uint8_t rampCount, TIM_HandleTypeDef* timerHandle, volatile float scaleFactor)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	73fb      	strb	r3, [r7, #15]
	uint16_t nextCompareValue = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[rampCount])*scaleFactor);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <ramp+0x88>)
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ffe2 	bl	8000418 <__aeabi_f2d>
 8001454:	a318      	add	r3, pc, #96	; (adr r3, 80014b8 <ramp+0x80>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f835 	bl	80004c8 <__aeabi_dmul>
 800145e:	4603      	mov	r3, r0
 8001460:	460c      	mov	r4, r1
 8001462:	4618      	mov	r0, r3
 8001464:	4621      	mov	r1, r4
	uint16_t nextCompareValue = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <ramp+0x8c>)
 800146c:	f7fe fe76 	bl	800015c <__adddf3>
 8001470:	4603      	mov	r3, r0
 8001472:	460c      	mov	r4, r1
 8001474:	4625      	mov	r5, r4
 8001476:	461c      	mov	r4, r3
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[rampCount])*scaleFactor);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe ffcc 	bl	8000418 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7ff f81e 	bl	80004c8 <__aeabi_dmul>
 800148c:	4603      	mov	r3, r0
 800148e:	460c      	mov	r4, r1
	uint16_t nextCompareValue = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8001490:	4618      	mov	r0, r3
 8001492:	4621      	mov	r1, r4
 8001494:	f7ff fa52 	bl	800093c <__aeabi_d2uiz>
 8001498:	4603      	mov	r3, r0
 800149a:	82fb      	strh	r3, [r7, #22]

	__HAL_TIM_SET_AUTORELOAD(timerHandle, nextCompareValue);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	8afa      	ldrh	r2, [r7, #22]
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014a4:	8afa      	ldrh	r2, [r7, #22]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	60da      	str	r2, [r3, #12]
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bdb0      	pop	{r4, r5, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	f3af 8000 	nop.w
 80014b8:	00000000 	.word	0x00000000
 80014bc:	40715080 	.word	0x40715080
 80014c0:	080078fc 	.word	0x080078fc
 80014c4:	4010e000 	.word	0x4010e000

080014c8 <max>:

uint8_t max(volatile int* values)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	uint8_t max;
	if (values[0] > values[1])
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3304      	adds	r3, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dd02      	ble.n	80014e4 <max+0x1c>
		max = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e001      	b.n	80014e8 <max+0x20>
	else
		max = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
	if (values[2] > values[max])
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3308      	adds	r3, #8
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	440b      	add	r3, r1
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dd01      	ble.n	8001500 <max+0x38>
		max = 2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	73fb      	strb	r3, [r7, #15]

	return max;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <setScaleFactors>:

void setScaleFactors()
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0

	volatile int values[3] = {motor[0].estDurationOfMovement, motor[1].estDurationOfMovement, motor[2].estDurationOfMovement};
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <setScaleFactors+0xd4>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd54 	bl	8000fc4 <__aeabi_f2iz>
 800151c:	4603      	mov	r3, r0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <setScaleFactors+0xd4>)
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fd4d 	bl	8000fc4 <__aeabi_f2iz>
 800152a:	4603      	mov	r3, r0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <setScaleFactors+0xd4>)
 8001530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fd45 	bl	8000fc4 <__aeabi_f2iz>
 800153a:	4603      	mov	r3, r0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	ca07      	ldmia	r2, {r0, r1, r2}
 8001546:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t maxMotorIndex = max(&values[0]);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffbb 	bl	80014c8 <max>
 8001552:	4603      	mov	r3, r0
 8001554:	77bb      	strb	r3, [r7, #30]

	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	77fb      	strb	r3, [r7, #31]
 800155a:	e033      	b.n	80015c4 <setScaleFactors+0xb8>
	{
		if (motor[i].estDurationOfMovement != 0)
 800155c:	7ffa      	ldrb	r2, [r7, #31]
 800155e:	4920      	ldr	r1, [pc, #128]	; (80015e0 <setScaleFactors+0xd4>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	440b      	add	r3, r1
 800156a:	3324      	adds	r3, #36	; 0x24
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f04f 0100 	mov.w	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fcf4 	bl	8000f60 <__aeabi_fcmpeq>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11f      	bne.n	80015be <setScaleFactors+0xb2>
			motor[i].scaleFactor = (float)motor[maxMotorIndex].estDurationOfMovement/(float)motor[i].estDurationOfMovement;
 800157e:	7fba      	ldrb	r2, [r7, #30]
 8001580:	4917      	ldr	r1, [pc, #92]	; (80015e0 <setScaleFactors+0xd4>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	440b      	add	r3, r1
 800158c:	3324      	adds	r3, #36	; 0x24
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	7ffa      	ldrb	r2, [r7, #31]
 8001592:	4913      	ldr	r1, [pc, #76]	; (80015e0 <setScaleFactors+0xd4>)
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	440b      	add	r3, r1
 800159e:	3324      	adds	r3, #36	; 0x24
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	7ffc      	ldrb	r4, [r7, #31]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fbfb 	bl	8000da0 <__aeabi_fdiv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <setScaleFactors+0xd4>)
 80015b0:	4623      	mov	r3, r4
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4423      	add	r3, r4
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	3320      	adds	r3, #32
 80015bc:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 80015be:	7ffb      	ldrb	r3, [r7, #31]
 80015c0:	3301      	adds	r3, #1
 80015c2:	77fb      	strb	r3, [r7, #31]
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d9c8      	bls.n	800155c <setScaleFactors+0x50>
	}
	MX_TIM2_Init();
 80015ca:	f000 fa31 	bl	8001a30 <MX_TIM2_Init>
	MX_TIM3_Init();
 80015ce:	f000 faaf 	bl	8001b30 <MX_TIM3_Init>
	MX_TIM4_Init();
 80015d2:	f000 fb31 	bl	8001c38 <MX_TIM4_Init>
}
 80015d6:	bf00      	nop
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000484 	.word	0x20000484

080015e4 <getDurationOfUninterruptedMovement>:

float getDurationOfUninterruptedMovement(int numOfSteps)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	float duration = 0;
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
	if (numOfSteps > 64)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b40      	cmp	r3, #64	; 0x40
 80015f6:	dd3f      	ble.n	8001678 <getDurationOfUninterruptedMovement+0x94>
	{
		duration = (2.0 * (float)TIME_CONSTANT[NO_OF_RAMP_STEPS - 1] / 1000.0) + (((float)numOfSteps - (2 *NO_OF_RAMP_STEPS)) * (float)MIN_INTERVAL/1000.0);
 80015f8:	f644 5317 	movw	r3, #19735	; 0x4d17
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fac7 	bl	8000b90 <__aeabi_i2f>
 8001602:	4603      	mov	r3, r0
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff07 	bl	8000418 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	f7fe fda5 	bl	800015c <__adddf3>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	4618      	mov	r0, r3
 8001618:	4621      	mov	r1, r4
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <getDurationOfUninterruptedMovement+0xe0>)
 8001620:	f7ff f87c 	bl	800071c <__aeabi_ddiv>
 8001624:	4603      	mov	r3, r0
 8001626:	460c      	mov	r4, r1
 8001628:	4625      	mov	r5, r4
 800162a:	461c      	mov	r4, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff faaf 	bl	8000b90 <__aeabi_i2f>
 8001632:	4603      	mov	r3, r0
 8001634:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff f9f3 	bl	8000a24 <__aeabi_fsub>
 800163e:	4603      	mov	r3, r0
 8001640:	4921      	ldr	r1, [pc, #132]	; (80016c8 <getDurationOfUninterruptedMovement+0xe4>)
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff faf8 	bl	8000c38 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fee4 	bl	8000418 <__aeabi_f2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <getDurationOfUninterruptedMovement+0xe0>)
 8001656:	f7ff f861 	bl	800071c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe fd7b 	bl	800015c <__adddf3>
 8001666:	4603      	mov	r3, r0
 8001668:	460c      	mov	r4, r1
 800166a:	4618      	mov	r0, r3
 800166c:	4621      	mov	r1, r4
 800166e:	f7ff f985 	bl	800097c <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e01f      	b.n	80016b8 <getDurationOfUninterruptedMovement+0xd4>
	}
	else
	{
		duration = 2.0 * TIME_CONSTANT[(numOfSteps/2) - 1] / 1000;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0fda      	lsrs	r2, r3, #31
 800167c:	4413      	add	r3, r2
 800167e:	105b      	asrs	r3, r3, #1
 8001680:	3b01      	subs	r3, #1
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <getDurationOfUninterruptedMovement+0xe8>)
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe feb3 	bl	80003f4 <__aeabi_i2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	f7fe fd63 	bl	800015c <__adddf3>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	4618      	mov	r0, r3
 800169c:	4621      	mov	r1, r4
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <getDurationOfUninterruptedMovement+0xe0>)
 80016a4:	f7ff f83a 	bl	800071c <__aeabi_ddiv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	460c      	mov	r4, r1
 80016ac:	4618      	mov	r0, r3
 80016ae:	4621      	mov	r1, r4
 80016b0:	f7ff f964 	bl	800097c <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	60fb      	str	r3, [r7, #12]
	}

	return duration;
 80016b8:	68fb      	ldr	r3, [r7, #12]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	408f4000 	.word	0x408f4000
 80016c8:	41700000 	.word	0x41700000
 80016cc:	0800787c 	.word	0x0800787c

080016d0 <runMotor>:

void runMotor(StepperMotor* motor)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	 motor->sendPulse();
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4798      	blx	r3
	 motor->pulseFlag = 0;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	761a      	strb	r2, [r3, #24]
	 motor->currentCount ++;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8a1b      	ldrh	r3, [r3, #16]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3301      	adds	r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	821a      	strh	r2, [r3, #16]
	 motor->absolutePosition += motor->direction;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7a1b      	ldrb	r3, [r3, #8]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	441a      	add	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60da      	str	r2, [r3, #12]

	 if (motor->currentCount == motor->targetCount)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	8a1b      	ldrh	r3, [r3, #16]
 800170a:	b21a      	sxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8a5b      	ldrh	r3, [r3, #18]
 8001710:	b21b      	sxth	r3, r3
 8001712:	429a      	cmp	r2, r3
 8001714:	d103      	bne.n	800171e <runMotor+0x4e>
	 {
		 motionComplete(motor);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fd04 	bl	8001124 <motionComplete>
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
			 abs(motor->targetCount - motor->currentCount) <= NO_OF_RAMP_STEPS)
	 {
		 setNextInterruptInterval(motor);
	 }
}
 800171c:	e014      	b.n	8001748 <runMotor+0x78>
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	8a1b      	ldrh	r3, [r3, #16]
 8001722:	b21b      	sxth	r3, r3
 8001724:	2b20      	cmp	r3, #32
 8001726:	dd0c      	ble.n	8001742 <runMotor+0x72>
			 abs(motor->targetCount - motor->currentCount) <= NO_OF_RAMP_STEPS)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8a5b      	ldrh	r3, [r3, #18]
 800172c:	b21b      	sxth	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	8a1b      	ldrh	r3, [r3, #16]
 8001734:	b21b      	sxth	r3, r3
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	bfb8      	it	lt
 800173c:	425b      	neglt	r3, r3
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
 800173e:	2b20      	cmp	r3, #32
 8001740:	dc02      	bgt.n	8001748 <runMotor+0x78>
		 setNextInterruptInterval(motor);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fd96 	bl	8001274 <setNextInterruptInterval>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <copyNewCommands>:

void copyNewCommands()
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
 800175a:	e016      	b.n	800178a <copyNewCommands+0x3a>
	{
		motor[i].newAbsoluteTarget = motor[i].newAbsoluteTargetUSB;
 800175c:	79f9      	ldrb	r1, [r7, #7]
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	480e      	ldr	r0, [pc, #56]	; (800179c <copyNewCommands+0x4c>)
 8001762:	460b      	mov	r3, r1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	440b      	add	r3, r1
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	4403      	add	r3, r0
 800176c:	332c      	adds	r3, #44	; 0x2c
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b218      	sxth	r0, r3
 8001772:	490a      	ldr	r1, [pc, #40]	; (800179c <copyNewCommands+0x4c>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	440b      	add	r3, r1
 800177e:	332a      	adds	r3, #42	; 0x2a
 8001780:	4602      	mov	r2, r0
 8001782:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	3301      	adds	r3, #1
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d9e5      	bls.n	800175c <copyNewCommands+0xc>
	}
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000484 	.word	0x20000484

080017a0 <configForNewCommand>:

void configForNewCommand(StepperMotor* motor)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
		//Set Direction
		if (motor->absolutePosition > motor->newAbsoluteTarget)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80017b0:	b212      	sxth	r2, r2
 80017b2:	4293      	cmp	r3, r2
 80017b4:	dd0c      	ble.n	80017d0 <configForNewCommand+0x30>
		{
			motor->newDirection = CLOCKWISE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	22ff      	movs	r2, #255	; 0xff
 80017ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			motor->direction = CLOCKWISE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	22ff      	movs	r2, #255	; 0xff
 80017c2:	721a      	strb	r2, [r3, #8]
			motor->setDirection(CLOCKWISE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	4798      	blx	r3
 80017ce:	e011      	b.n	80017f4 <configForNewCommand+0x54>
		}
		else if (motor->absolutePosition < motor->newAbsoluteTarget)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80017d8:	b212      	sxth	r2, r2
 80017da:	4293      	cmp	r3, r2
 80017dc:	da0a      	bge.n	80017f4 <configForNewCommand+0x54>
		{
			motor->newDirection = ANTICLOCKWISE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			motor->direction = ANTICLOCKWISE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	721a      	strb	r2, [r3, #8]
			motor->setDirection(ANTICLOCKWISE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2001      	movs	r0, #1
 80017f2:	4798      	blx	r3
		}

		//Define motion

		int16_t newTarget = abs(motor->absolutePosition - motor->newAbsoluteTarget);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80017fc:	b212      	sxth	r2, r2
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfb8      	it	lt
 8001804:	425b      	neglt	r3, r3
 8001806:	81fb      	strh	r3, [r7, #14]
		motor->estDurationOfMovement = getDurationOfUninterruptedMovement(newTarget);
 8001808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fee9 	bl	80015e4 <getDurationOfUninterruptedMovement>
 8001812:	4602      	mov	r2, r0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
		motor->targetCount = newTarget;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	89fa      	ldrh	r2, [r7, #14]
 800181c:	825a      	strh	r2, [r3, #18]
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	programInit();
 800182e:	f7ff fc99 	bl	8001164 <programInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001832:	f000 fc2f 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001836:	f000 f89f 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183a:	f000 fa7f 	bl	8001d3c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800183e:	f005 fae3 	bl	8006e08 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */


  motor[0].newAbsoluteTargetUSB = 46;
 8001842:	4b46      	ldr	r3, [pc, #280]	; (800195c <main+0x134>)
 8001844:	222e      	movs	r2, #46	; 0x2e
 8001846:	859a      	strh	r2, [r3, #44]	; 0x2c
  motor[1].newAbsoluteTargetUSB= 40;
 8001848:	4b44      	ldr	r3, [pc, #272]	; (800195c <main+0x134>)
 800184a:	2228      	movs	r2, #40	; 0x28
 800184c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  motor[2].newAbsoluteTargetUSB = 57;
 8001850:	4b42      	ldr	r3, [pc, #264]	; (800195c <main+0x134>)
 8001852:	2239      	movs	r2, #57	; 0x39
 8001854:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c


  newCommandAvailable = ACTIVATED;
 8001858:	4b41      	ldr	r3, [pc, #260]	; (8001960 <main+0x138>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (newCommandAvailable == 1 && previousMotionComplete == 1)
 800185e:	4b40      	ldr	r3, [pc, #256]	; (8001960 <main+0x138>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d12a      	bne.n	80018be <main+0x96>
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <main+0x13c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d125      	bne.n	80018be <main+0x96>
	  {
		  	newCommandAvailable = DEACTIVATED;
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <main+0x138>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
		  	previousMotionComplete = DEACTIVATED;
 8001878:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <main+0x13c>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]

		  	copyNewCommands();
 800187e:	f7ff ff67 	bl	8001750 <copyNewCommands>
		  	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	e00c      	b.n	80018a2 <main+0x7a>
		  	{
		  		configForNewCommand(&motor[i]);
 8001888:	79fa      	ldrb	r2, [r7, #7]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4a32      	ldr	r2, [pc, #200]	; (800195c <main+0x134>)
 8001894:	4413      	add	r3, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff82 	bl	80017a0 <configForNewCommand>
		  	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	3301      	adds	r3, #1
 80018a0:	71fb      	strb	r3, [r7, #7]
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d9ef      	bls.n	8001888 <main+0x60>
		  	}

			setScaleFactors();
 80018a8:	f7ff fe30 	bl	800150c <setScaleFactors>
			HAL_TIM_Base_Start_IT(&htim2);
 80018ac:	482e      	ldr	r0, [pc, #184]	; (8001968 <main+0x140>)
 80018ae:	f002 fa98 	bl	8003de2 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 80018b2:	482e      	ldr	r0, [pc, #184]	; (800196c <main+0x144>)
 80018b4:	f002 fa95 	bl	8003de2 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim4);
 80018b8:	482d      	ldr	r0, [pc, #180]	; (8001970 <main+0x148>)
 80018ba:	f002 fa92 	bl	8003de2 <HAL_TIM_Base_Start_IT>

      }

		for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	71bb      	strb	r3, [r7, #6]
 80018c2:	e018      	b.n	80018f6 <main+0xce>
		{
			 if (motor[i].pulseFlag == 1)
 80018c4:	79ba      	ldrb	r2, [r7, #6]
 80018c6:	4925      	ldr	r1, [pc, #148]	; (800195c <main+0x134>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	440b      	add	r3, r1
 80018d2:	3318      	adds	r3, #24
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d109      	bne.n	80018f0 <main+0xc8>
			 {
				 runMotor(&motor[i]);
 80018dc:	79ba      	ldrb	r2, [r7, #6]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	4a1d      	ldr	r2, [pc, #116]	; (800195c <main+0x134>)
 80018e8:	4413      	add	r3, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fef0 	bl	80016d0 <runMotor>
		for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	3301      	adds	r3, #1
 80018f4:	71bb      	strb	r3, [r7, #6]
 80018f6:	79bb      	ldrb	r3, [r7, #6]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d9e3      	bls.n	80018c4 <main+0x9c>
			 }
		}

		if (motor[0].targetCount == 0 && motor[1].targetCount == 0 && motor[2].targetCount == 0)
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <main+0x134>)
 80018fe:	8a5b      	ldrh	r3, [r3, #18]
 8001900:	b21b      	sxth	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10e      	bne.n	8001924 <main+0xfc>
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <main+0x134>)
 8001908:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800190c:	b21b      	sxth	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <main+0xfc>
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <main+0x134>)
 8001914:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8001918:	b21b      	sxth	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <main+0xfc>
			previousMotionComplete = 1;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <main+0x13c>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]

		if (previousMotionComplete == 1 && temp == 0)
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <main+0x13c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d197      	bne.n	800185e <main+0x36>
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <main+0x14c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d193      	bne.n	800185e <main+0x36>
		{
			  motor[0].newAbsoluteTargetUSB = 30;
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <main+0x134>)
 8001938:	221e      	movs	r2, #30
 800193a:	859a      	strh	r2, [r3, #44]	; 0x2c
			  motor[1].newAbsoluteTargetUSB= 30;
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <main+0x134>)
 800193e:	221e      	movs	r2, #30
 8001940:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			  motor[2].newAbsoluteTargetUSB = -10;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <main+0x134>)
 8001946:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800194a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

			 newCommandAvailable = ACTIVATED;
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <main+0x138>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
			 temp = 1;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <main+0x14c>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
	  if (newCommandAvailable == 1 && previousMotionComplete == 1)
 800195a:	e780      	b.n	800185e <main+0x36>
 800195c:	20000484 	.word	0x20000484
 8001960:	20000440 	.word	0x20000440
 8001964:	20000000 	.word	0x20000000
 8001968:	20000444 	.word	0x20000444
 800196c:	20000400 	.word	0x20000400
 8001970:	200003c0 	.word	0x200003c0
 8001974:	2000019c 	.word	0x2000019c

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001982:	2228      	movs	r2, #40	; 0x28
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f005 ff34 	bl	80077f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b6:	2301      	movs	r3, #1
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ba:	2302      	movs	r3, #2
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 fd3c 	bl	800344c <HAL_RCC_OscConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019da:	f000 f9ef 	bl	8001dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019de:	230f      	movs	r3, #15
 80019e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	2102      	movs	r1, #2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 ffa5 	bl	800394c <HAL_RCC_ClockConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a08:	f000 f9d8 	bl	8001dbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 f902 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a22:	f000 f9cb 	bl	8001dbc <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	; 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a44:	463b      	mov	r3, r7
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 256;
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[0].scaleFactor);
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <MX_TIM2_Init+0xf4>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fcd7 	bl	8000418 <__aeabi_f2d>
 8001a6a:	a32b      	add	r3, pc, #172	; (adr r3, 8001b18 <MX_TIM2_Init+0xe8>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fd2a 	bl	80004c8 <__aeabi_dmul>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4621      	mov	r1, r4
  htim2.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <MX_TIM2_Init+0xf8>)
 8001a82:	f7fe fb6b 	bl	800015c <__adddf3>
 8001a86:	4603      	mov	r3, r0
 8001a88:	460c      	mov	r4, r1
 8001a8a:	4625      	mov	r5, r4
 8001a8c:	461c      	mov	r4, r3
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[0].scaleFactor);
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <MX_TIM2_Init+0xfc>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fcc0 	bl	8000418 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f7fe fd12 	bl	80004c8 <__aeabi_dmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
  htim2.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4621      	mov	r1, r4
 8001aac:	f7fe ff46 	bl	800093c <__aeabi_d2uiz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ac6:	4816      	ldr	r0, [pc, #88]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001ac8:	f002 f960 	bl	8003d8c <HAL_TIM_Base_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8001ad2:	f000 f973 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480f      	ldr	r0, [pc, #60]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001ae4:	f002 faa8 	bl	8004038 <HAL_TIM_ConfigClockSource>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001aee:	f000 f965 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001afa:	463b      	mov	r3, r7
 8001afc:	4619      	mov	r1, r3
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <MX_TIM2_Init+0xf0>)
 8001b00:	f002 fc76 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8001b0a:	f000 f957 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bdb0      	pop	{r4, r5, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40715080 	.word	0x40715080
 8001b20:	20000444 	.word	0x20000444
 8001b24:	3f7fa440 	.word	0x3f7fa440
 8001b28:	4010e000 	.word	0x4010e000
 8001b2c:	20000484 	.word	0x20000484

08001b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b4c:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001b4e:	4a35      	ldr	r2, [pc, #212]	; (8001c24 <MX_TIM3_Init+0xf4>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 256;
 8001b52:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[1].scaleFactor);
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <MX_TIM3_Init+0xf8>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fc58 	bl	8000418 <__aeabi_f2d>
 8001b68:	a32b      	add	r3, pc, #172	; (adr r3, 8001c18 <MX_TIM3_Init+0xe8>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe fcab 	bl	80004c8 <__aeabi_dmul>
 8001b72:	4603      	mov	r3, r0
 8001b74:	460c      	mov	r4, r1
 8001b76:	4618      	mov	r0, r3
 8001b78:	4621      	mov	r1, r4
  htim3.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <MX_TIM3_Init+0xfc>)
 8001b80:	f7fe faec 	bl	800015c <__adddf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	460c      	mov	r4, r1
 8001b88:	4625      	mov	r5, r4
 8001b8a:	461c      	mov	r4, r3
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[1].scaleFactor);
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <MX_TIM3_Init+0x100>)
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fc41 	bl	8000418 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f7fe fc93 	bl	80004c8 <__aeabi_dmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460c      	mov	r4, r1
  htim3.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4621      	mov	r1, r4
 8001baa:	f7fe fec7 	bl	800093c <__aeabi_d2uiz>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bc4:	4816      	ldr	r0, [pc, #88]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001bc6:	f002 f8e1 	bl	8003d8c <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001bd0:	f000 f8f4 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4619      	mov	r1, r3
 8001be0:	480f      	ldr	r0, [pc, #60]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001be2:	f002 fa29 	bl	8004038 <HAL_TIM_ConfigClockSource>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001bec:	f000 f8e6 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4808      	ldr	r0, [pc, #32]	; (8001c20 <MX_TIM3_Init+0xf0>)
 8001bfe:	f002 fbf7 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001c08:	f000 f8d8 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	f3af 8000 	nop.w
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	40715080 	.word	0x40715080
 8001c20:	20000400 	.word	0x20000400
 8001c24:	40000400 	.word	0x40000400
 8001c28:	3f7fa440 	.word	0x3f7fa440
 8001c2c:	4010e000 	.word	0x4010e000
 8001c30:	20000484 	.word	0x20000484
 8001c34:	00000000 	.word	0x00000000

08001c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c54:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001c56:	4a35      	ldr	r2, [pc, #212]	; (8001d2c <MX_TIM4_Init+0xf4>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 256;
 8001c5a:	4b33      	ldr	r3, [pc, #204]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[2].scaleFactor);
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <MX_TIM4_Init+0xf8>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fbd4 	bl	8000418 <__aeabi_f2d>
 8001c70:	a32b      	add	r3, pc, #172	; (adr r3, 8001d20 <MX_TIM4_Init+0xe8>)
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	f7fe fc27 	bl	80004c8 <__aeabi_dmul>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	4621      	mov	r1, r4
  htim4.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <MX_TIM4_Init+0xfc>)
 8001c88:	f7fe fa68 	bl	800015c <__adddf3>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460c      	mov	r4, r1
 8001c90:	4625      	mov	r5, r4
 8001c92:	461c      	mov	r4, r3
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[2].scaleFactor);
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <MX_TIM4_Init+0x100>)
 8001c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbbc 	bl	8000418 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f7fe fc0e 	bl	80004c8 <__aeabi_dmul>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
  htim4.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	f7fe fe42 	bl	800093c <__aeabi_d2uiz>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001cc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cce:	4816      	ldr	r0, [pc, #88]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001cd0:	f002 f85c 	bl	8003d8c <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 8001cda:	f000 f86f 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001cec:	f002 f9a4 	bl	8004038 <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8001cf6:	f000 f861 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	4808      	ldr	r0, [pc, #32]	; (8001d28 <MX_TIM4_Init+0xf0>)
 8001d08:	f002 fb72 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001d12:	f000 f853 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40715080 	.word	0x40715080
 8001d28:	200003c0 	.word	0x200003c0
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	3f7fa440 	.word	0x3f7fa440
 8001d34:	4010e000 	.word	0x4010e000
 8001d38:	20000484 	.word	0x20000484

08001d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <MX_GPIO_Init+0x78>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <MX_GPIO_Init+0x78>)
 8001d56:	f043 0320 	orr.w	r3, r3, #32
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <MX_GPIO_Init+0x78>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_GPIO_Init+0x78>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <MX_GPIO_Init+0x78>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_GPIO_Init+0x78>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001d80:	2200      	movs	r2, #0
 8001d82:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <MX_GPIO_Init+0x7c>)
 8001d88:	f000 fc4e 	bl	8002628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001d8c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d90:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	4619      	mov	r1, r3
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_GPIO_Init+0x7c>)
 8001da6:	f000 fae5 	bl	8002374 <HAL_GPIO_Init>

}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010800 	.word	0x40010800

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_MspInit+0x5c>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_MspInit+0x5c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6193      	str	r3, [r2, #24]
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_MspInit+0x5c>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_MspInit+0x5c>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_MspInit+0x5c>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	61d3      	str	r3, [r2, #28]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_MspInit+0x5c>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_MspInit+0x60>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_MspInit+0x60>)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010000 	.word	0x40010000

08001e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3c:	d114      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a25      	ldr	r2, [pc, #148]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	201c      	movs	r0, #28
 8001e5c:	f000 fa53 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e60:	201c      	movs	r0, #28
 8001e62:	f000 fa6c 	bl	800233e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e66:	e032      	b.n	8001ece <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_TIM_Base_MspInit+0xb0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d114      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	201d      	movs	r0, #29
 8001e90:	f000 fa39 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e94:	201d      	movs	r0, #29
 8001e96:	f000 fa52 	bl	800233e <HAL_NVIC_EnableIRQ>
}
 8001e9a:	e018      	b.n	8001ece <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d113      	bne.n	8001ece <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_TIM_Base_MspInit+0xac>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	201e      	movs	r0, #30
 8001ec4:	f000 fa1f 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ec8:	201e      	movs	r0, #30
 8001eca:	f000 fa38 	bl	800233e <HAL_NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40000800 	.word	0x40000800

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <HardFault_Handler+0x4>

08001ef6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <MemManage_Handler+0x4>

08001efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <BusFault_Handler+0x4>

08001f02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <UsageFault_Handler+0x4>

08001f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 f8f6 	bl	8002120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f3e:	f000 fcaa 	bl	8002896 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200011c0 	.word	0x200011c0

08001f4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f50:	4807      	ldr	r0, [pc, #28]	; (8001f70 <TIM2_IRQHandler+0x24>)
 8001f52:	f001 ff69 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //
  if (motor[0].currentCount < motor[0].targetCount)
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <TIM2_IRQHandler+0x28>)
 8001f58:	8a1b      	ldrh	r3, [r3, #16]
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <TIM2_IRQHandler+0x28>)
 8001f5e:	8a5b      	ldrh	r3, [r3, #18]
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	429a      	cmp	r2, r3
 8001f64:	da02      	bge.n	8001f6c <TIM2_IRQHandler+0x20>
  {
	  motor[0].pulseFlag = 1;
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <TIM2_IRQHandler+0x28>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	761a      	strb	r2, [r3, #24]
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000444 	.word	0x20000444
 8001f74:	20000484 	.word	0x20000484

08001f78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f7c:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <TIM3_IRQHandler+0x2c>)
 8001f7e:	f001 ff53 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  if (motor[1].currentCount < motor[1].targetCount)
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <TIM3_IRQHandler+0x30>)
 8001f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <TIM3_IRQHandler+0x30>)
 8001f8c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	429a      	cmp	r2, r3
 8001f94:	da03      	bge.n	8001f9e <TIM3_IRQHandler+0x26>
  {
	  motor[1].pulseFlag = 1;
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <TIM3_IRQHandler+0x30>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000400 	.word	0x20000400
 8001fa8:	20000484 	.word	0x20000484

08001fac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <TIM4_IRQHandler+0x2c>)
 8001fb2:	f001 ff39 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  if (motor[2].currentCount != motor[2].targetCount)
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <TIM4_IRQHandler+0x30>)
 8001fb8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001fbc:	b21a      	sxth	r2, r3
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <TIM4_IRQHandler+0x30>)
 8001fc0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d003      	beq.n	8001fd2 <TIM4_IRQHandler+0x26>
  {
	  motor[2].pulseFlag = 1;
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <TIM4_IRQHandler+0x30>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200003c0 	.word	0x200003c0
 8001fdc:	20000484 	.word	0x20000484

08001fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <SystemInit+0x5c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <SystemInit+0x5c>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <SystemInit+0x5c>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4911      	ldr	r1, [pc, #68]	; (800203c <SystemInit+0x5c>)
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <SystemInit+0x60>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <SystemInit+0x5c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <SystemInit+0x5c>)
 8002002:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <SystemInit+0x5c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <SystemInit+0x5c>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002016:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <SystemInit+0x5c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <SystemInit+0x5c>)
 800201e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002022:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SystemInit+0x5c>)
 8002026:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800202a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SystemInit+0x64>)
 800202e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002032:	609a      	str	r2, [r3, #8]
#endif 
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	f8ff0000 	.word	0xf8ff0000
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002048:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800204a:	e003      	b.n	8002054 <LoopCopyDataInit>

0800204c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800204e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002050:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002052:	3104      	adds	r1, #4

08002054 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002054:	480a      	ldr	r0, [pc, #40]	; (8002080 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002058:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800205a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800205c:	d3f6      	bcc.n	800204c <CopyDataInit>
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002060:	e002      	b.n	8002068 <LoopFillZerobss>

08002062 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002064:	f842 3b04 	str.w	r3, [r2], #4

08002068 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800206a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800206c:	d3f9      	bcc.n	8002062 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800206e:	f7ff ffb7 	bl	8001fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002072:	f005 fb9b 	bl	80077ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002076:	f7ff fbd7 	bl	8001828 <main>
  bx lr
 800207a:	4770      	bx	lr
  ldr r3, =_sidata
 800207c:	08007994 	.word	0x08007994
  ldr r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002084:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8002088:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800208c:	2000142c 	.word	0x2000142c

08002090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC1_2_IRQHandler>
	...

08002094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_Init+0x28>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_Init+0x28>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f000 f923 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 f808 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff fe8a 	bl	8001dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f93b 	bl	800235a <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f000 f903 	bl	8002306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_InitTick+0x5c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000004 	.word	0x20000004
 8002118:	2000000c 	.word	0x2000000c
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_IncTick+0x1c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_IncTick+0x20>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a03      	ldr	r2, [pc, #12]	; (8002140 <HAL_IncTick+0x20>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	2000000c 	.word	0x2000000c
 8002140:	20000514 	.word	0x20000514

08002144 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return uwTick;
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <HAL_GetTick+0x10>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	20000514 	.word	0x20000514

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4906      	ldr	r1, [pc, #24]	; (80021f0 <__NVIC_EnableIRQ+0x34>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f7ff ff90 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff2d 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff42 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff90 	bl	8002248 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5f 	bl	80021f4 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff35 	bl	80021bc <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffa2 	bl	80022ac <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b08b      	sub	sp, #44	; 0x2c
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002386:	e127      	b.n	80025d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002388:	2201      	movs	r2, #1
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 8116 	bne.w	80025d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d034      	beq.n	8002418 <HAL_GPIO_Init+0xa4>
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d80d      	bhi.n	80023ce <HAL_GPIO_Init+0x5a>
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d02b      	beq.n	800240e <HAL_GPIO_Init+0x9a>
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d804      	bhi.n	80023c4 <HAL_GPIO_Init+0x50>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d031      	beq.n	8002422 <HAL_GPIO_Init+0xae>
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d01c      	beq.n	80023fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023c2:	e048      	b.n	8002456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d043      	beq.n	8002450 <HAL_GPIO_Init+0xdc>
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	d01b      	beq.n	8002404 <HAL_GPIO_Init+0x90>
          break;
 80023cc:	e043      	b.n	8002456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023ce:	4a89      	ldr	r2, [pc, #548]	; (80025f4 <HAL_GPIO_Init+0x280>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d026      	beq.n	8002422 <HAL_GPIO_Init+0xae>
 80023d4:	4a87      	ldr	r2, [pc, #540]	; (80025f4 <HAL_GPIO_Init+0x280>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d806      	bhi.n	80023e8 <HAL_GPIO_Init+0x74>
 80023da:	4a87      	ldr	r2, [pc, #540]	; (80025f8 <HAL_GPIO_Init+0x284>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d020      	beq.n	8002422 <HAL_GPIO_Init+0xae>
 80023e0:	4a86      	ldr	r2, [pc, #536]	; (80025fc <HAL_GPIO_Init+0x288>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01d      	beq.n	8002422 <HAL_GPIO_Init+0xae>
          break;
 80023e6:	e036      	b.n	8002456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023e8:	4a85      	ldr	r2, [pc, #532]	; (8002600 <HAL_GPIO_Init+0x28c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0xae>
 80023ee:	4a85      	ldr	r2, [pc, #532]	; (8002604 <HAL_GPIO_Init+0x290>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d016      	beq.n	8002422 <HAL_GPIO_Init+0xae>
 80023f4:	4a84      	ldr	r2, [pc, #528]	; (8002608 <HAL_GPIO_Init+0x294>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0xae>
          break;
 80023fa:	e02c      	b.n	8002456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	623b      	str	r3, [r7, #32]
          break;
 8002402:	e028      	b.n	8002456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	3304      	adds	r3, #4
 800240a:	623b      	str	r3, [r7, #32]
          break;
 800240c:	e023      	b.n	8002456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	3308      	adds	r3, #8
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e01e      	b.n	8002456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	330c      	adds	r3, #12
 800241e:	623b      	str	r3, [r7, #32]
          break;
 8002420:	e019      	b.n	8002456 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800242a:	2304      	movs	r3, #4
 800242c:	623b      	str	r3, [r7, #32]
          break;
 800242e:	e012      	b.n	8002456 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d105      	bne.n	8002444 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002438:	2308      	movs	r3, #8
 800243a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	611a      	str	r2, [r3, #16]
          break;
 8002442:	e008      	b.n	8002456 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002444:	2308      	movs	r3, #8
 8002446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	615a      	str	r2, [r3, #20]
          break;
 800244e:	e002      	b.n	8002456 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]
          break;
 8002454:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2bff      	cmp	r3, #255	; 0xff
 800245a:	d801      	bhi.n	8002460 <HAL_GPIO_Init+0xec>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	e001      	b.n	8002464 <HAL_GPIO_Init+0xf0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2bff      	cmp	r3, #255	; 0xff
 800246a:	d802      	bhi.n	8002472 <HAL_GPIO_Init+0xfe>
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	e002      	b.n	8002478 <HAL_GPIO_Init+0x104>
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	3b08      	subs	r3, #8
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	210f      	movs	r1, #15
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	401a      	ands	r2, r3
 800248a:	6a39      	ldr	r1, [r7, #32]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	431a      	orrs	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8096 	beq.w	80025d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024a6:	4b59      	ldr	r3, [pc, #356]	; (800260c <HAL_GPIO_Init+0x298>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	4a58      	ldr	r2, [pc, #352]	; (800260c <HAL_GPIO_Init+0x298>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6193      	str	r3, [r2, #24]
 80024b2:	4b56      	ldr	r3, [pc, #344]	; (800260c <HAL_GPIO_Init+0x298>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024be:	4a54      	ldr	r2, [pc, #336]	; (8002610 <HAL_GPIO_Init+0x29c>)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4b      	ldr	r2, [pc, #300]	; (8002614 <HAL_GPIO_Init+0x2a0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x19e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4a      	ldr	r2, [pc, #296]	; (8002618 <HAL_GPIO_Init+0x2a4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x19a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a49      	ldr	r2, [pc, #292]	; (800261c <HAL_GPIO_Init+0x2a8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x196>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_GPIO_Init+0x2ac>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x192>
 8002502:	2303      	movs	r3, #3
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x1a0>
 8002506:	2304      	movs	r3, #4
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x1a0>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x1a0>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x1a0>
 8002512:	2300      	movs	r3, #0
 8002514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002524:	493a      	ldr	r1, [pc, #232]	; (8002610 <HAL_GPIO_Init+0x29c>)
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800253e:	4b39      	ldr	r3, [pc, #228]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4938      	ldr	r1, [pc, #224]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
 800254a:	e006      	b.n	800255a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800254c:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	43db      	mvns	r3, r3
 8002554:	4933      	ldr	r1, [pc, #204]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 8002556:	4013      	ands	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	492e      	ldr	r1, [pc, #184]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
 8002572:	e006      	b.n	8002582 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002574:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	43db      	mvns	r3, r3
 800257c:	4929      	ldr	r1, [pc, #164]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 800257e:	4013      	ands	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	4924      	ldr	r1, [pc, #144]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
 800259a:	e006      	b.n	80025aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	491f      	ldr	r1, [pc, #124]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	491a      	ldr	r1, [pc, #104]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
 80025c2:	e006      	b.n	80025d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4915      	ldr	r1, [pc, #84]	; (8002624 <HAL_GPIO_Init+0x2b0>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f47f aed0 	bne.w	8002388 <HAL_GPIO_Init+0x14>
  }
}
 80025e8:	bf00      	nop
 80025ea:	372c      	adds	r7, #44	; 0x2c
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	10210000 	.word	0x10210000
 80025f8:	10110000 	.word	0x10110000
 80025fc:	10120000 	.word	0x10120000
 8002600:	10310000 	.word	0x10310000
 8002604:	10320000 	.word	0x10320000
 8002608:	10220000 	.word	0x10220000
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	40010800 	.word	0x40010800
 8002618:	40010c00 	.word	0x40010c00
 800261c:	40011000 	.word	0x40011000
 8002620:	40011400 	.word	0x40011400
 8002624:	40010400 	.word	0x40010400

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	611a      	str	r2, [r3, #16]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002670:	887a      	ldrh	r2, [r7, #2]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002676:	e002      	b.n	800267e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002678:	887a      	ldrh	r2, [r7, #2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af06      	add	r7, sp, #24
 800268e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0d3      	b.n	8002842 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f004 fdde 	bl	8007270 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 ff12 	bl	80044ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	687e      	ldr	r6, [r7, #4]
 80026ce:	466d      	mov	r5, sp
 80026d0:	f106 0410 	add.w	r4, r6, #16
 80026d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	1d33      	adds	r3, r6, #4
 80026de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e0:	6838      	ldr	r0, [r7, #0]
 80026e2:	f001 fedb 	bl	800449c <USB_CoreInit>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0a4      	b.n	8002842 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f001 ff0f 	bl	8004522 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e035      	b.n	8002776 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	015b      	lsls	r3, r3, #5
 8002710:	4413      	add	r3, r2
 8002712:	3329      	adds	r3, #41	; 0x29
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	015b      	lsls	r3, r3, #5
 800271e:	4413      	add	r3, r2
 8002720:	3328      	adds	r3, #40	; 0x28
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	b291      	uxth	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	015b      	lsls	r3, r3, #5
 8002730:	4413      	add	r3, r2
 8002732:	3336      	adds	r3, #54	; 0x36
 8002734:	460a      	mov	r2, r1
 8002736:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	015b      	lsls	r3, r3, #5
 800273e:	4413      	add	r3, r2
 8002740:	332b      	adds	r3, #43	; 0x2b
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	015b      	lsls	r3, r3, #5
 800274c:	4413      	add	r3, r2
 800274e:	3338      	adds	r3, #56	; 0x38
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	4413      	add	r3, r2
 800275c:	333c      	adds	r3, #60	; 0x3c
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	3302      	adds	r3, #2
 8002768:	015b      	lsls	r3, r3, #5
 800276a:	4413      	add	r3, r2
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	3301      	adds	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	429a      	cmp	r2, r3
 800277e:	d3c4      	bcc.n	800270a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e031      	b.n	80027ea <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	015b      	lsls	r3, r3, #5
 800278c:	4413      	add	r3, r2
 800278e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	4413      	add	r3, r2
 800279e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	015b      	lsls	r3, r3, #5
 80027ac:	4413      	add	r3, r2
 80027ae:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	015b      	lsls	r3, r3, #5
 80027bc:	4413      	add	r3, r2
 80027be:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	015b      	lsls	r3, r3, #5
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	330a      	adds	r3, #10
 80027dc:	015b      	lsls	r3, r3, #5
 80027de:	4413      	add	r3, r2
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	3301      	adds	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3c8      	bcc.n	8002786 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	687e      	ldr	r6, [r7, #4]
 80027fc:	466d      	mov	r5, sp
 80027fe:	f106 0410 	add.w	r4, r6, #16
 8002802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	602b      	str	r3, [r5, #0]
 800280a:	1d33      	adds	r3, r6, #4
 800280c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800280e:	6838      	ldr	r0, [r7, #0]
 8002810:	f001 fe93 	bl	800453a <USB_DevInit>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e00d      	b.n	8002842 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fed1 	bl	80055e2 <USB_DevDisconnect>

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800284a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_PCD_Start+0x16>
 800285c:	2302      	movs	r3, #2
 800285e:	e016      	b.n	800288e <HAL_PCD_Start+0x44>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002868:	2101      	movs	r1, #1
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f004 ff67 	bl	800773e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f002 feaa 	bl	80055ce <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f001 fe1c 	bl	80044bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fea7 	bl	80055f6 <USB_ReadInterrupts>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b2:	d102      	bne.n	80028ba <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 faf3 	bl	8002ea0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fe99 	bl	80055f6 <USB_ReadInterrupts>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ce:	d112      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e2:	b292      	uxth	r2, r2
 80028e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f004 fd36 	bl	800735a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80028ee:	2100      	movs	r1, #0
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f8de 	bl	8002ab2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fe7b 	bl	80055f6 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800290a:	d10b      	bne.n	8002924 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002914:	b29a      	uxth	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800291e:	b292      	uxth	r2, r2
 8002920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fe64 	bl	80055f6 <USB_ReadInterrupts>
 800292e:	4603      	mov	r3, r0
 8002930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d10b      	bne.n	8002952 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800294c:	b292      	uxth	r2, r2
 800294e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fe4d 	bl	80055f6 <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	d126      	bne.n	80029b6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0204 	bic.w	r2, r2, #4
 800297a:	b292      	uxth	r2, r2
 800297c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002988:	b29a      	uxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0208 	bic.w	r2, r2, #8
 8002992:	b292      	uxth	r2, r2
 8002994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f004 fd17 	bl	80073cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029b0:	b292      	uxth	r2, r2
 80029b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f002 fe1b 	bl	80055f6 <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ca:	d13d      	bne.n	8002a48 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0208 	orr.w	r2, r2, #8
 80029de:	b292      	uxth	r2, r2
 80029e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f6:	b292      	uxth	r2, r2
 80029f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0204 	orr.w	r2, r2, #4
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 fdec 	bl	80055f6 <USB_ReadInterrupts>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a28:	d10b      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a3c:	b292      	uxth	r2, r2
 8002a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f004 fca8 	bl	8007398 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 fdd2 	bl	80055f6 <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a5c:	d10e      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a70:	b292      	uxth	r2, r2
 8002a72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f004 fc61 	bl	800733e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fdb8 	bl	80055f6 <USB_ReadInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a90:	d10b      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa4:	b292      	uxth	r2, r2
 8002aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_PCD_SetAddress+0x1a>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e013      	b.n	8002af4 <HAL_PCD_SetAddress+0x42>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 fd5f 	bl	80055a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	803b      	strh	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da0b      	bge.n	8002b3a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	015b      	lsls	r3, r3, #5
 8002b2a:	3328      	adds	r3, #40	; 0x28
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
 8002b38:	e00b      	b.n	8002b52 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	015b      	lsls	r3, r3, #5
 8002b42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b5e:	883a      	ldrh	r2, [r7, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	78ba      	ldrb	r2, [r7, #2]
 8002b68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b7c:	78bb      	ldrb	r3, [r7, #2]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d102      	bne.n	8002b88 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_EP_Open+0x9a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e00e      	b.n	8002bb4 <HAL_PCD_EP_Open+0xb8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fced 	bl	8004584 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	da0b      	bge.n	8002be8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	015b      	lsls	r3, r3, #5
 8002bd8:	3328      	adds	r3, #40	; 0x28
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	705a      	strb	r2, [r3, #1]
 8002be6:	e00b      	b.n	8002c00 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	015b      	lsls	r3, r3, #5
 8002bf0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_PCD_EP_Close+0x5e>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e00e      	b.n	8002c38 <HAL_PCD_EP_Close+0x7c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 ff99 	bl	8004b60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	015b      	lsls	r3, r3, #5
 8002c58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2200      	movs	r2, #0
 8002c78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c7a:	7afb      	ldrb	r3, [r7, #11]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6979      	ldr	r1, [r7, #20]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 f8f8 	bl	8004e8c <USB_EPStartXfer>
 8002c9c:	e005      	b.n	8002caa <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6979      	ldr	r1, [r7, #20]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 f8f1 	bl	8004e8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	330a      	adds	r3, #10
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	4413      	add	r3, r2
 8002cce:	3304      	adds	r3, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cec:	7afb      	ldrb	r3, [r7, #11]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	015b      	lsls	r3, r3, #5
 8002cf4:	3328      	adds	r3, #40	; 0x28
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2201      	movs	r2, #1
 8002d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d20:	7afb      	ldrb	r3, [r7, #11]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6979      	ldr	r1, [r7, #20]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 f8ab 	bl	8004e8c <USB_EPStartXfer>
 8002d36:	e005      	b.n	8002d44 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6979      	ldr	r1, [r7, #20]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f002 f8a4 	bl	8004e8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 0207 	and.w	r2, r3, #7
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d901      	bls.n	8002d6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e046      	b.n	8002dfa <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da0b      	bge.n	8002d8c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	015b      	lsls	r3, r3, #5
 8002d7c:	3328      	adds	r3, #40	; 0x28
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	705a      	strb	r2, [r3, #1]
 8002d8a:	e009      	b.n	8002da0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	015b      	lsls	r3, r3, #5
 8002d90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_PCD_EP_SetStall+0x72>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e01c      	b.n	8002dfa <HAL_PCD_EP_SetStall+0xac>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68f9      	ldr	r1, [r7, #12]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f002 fb14 	bl	80053fc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d108      	bne.n	8002df0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f002 fc12 	bl	8005614 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	f003 020f 	and.w	r2, r3, #15
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d901      	bls.n	8002e20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e03a      	b.n	8002e96 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	da0b      	bge.n	8002e40 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	015b      	lsls	r3, r3, #5
 8002e30:	3328      	adds	r3, #40	; 0x28
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	705a      	strb	r2, [r3, #1]
 8002e3e:	e00b      	b.n	8002e58 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	015b      	lsls	r3, r3, #5
 8002e48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_PCD_EP_ClrStall+0x76>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e00e      	b.n	8002e96 <HAL_PCD_EP_ClrStall+0x94>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fafa 	bl	8005480 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ea8:	e282      	b.n	80033b0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002eb4:	8afb      	ldrh	r3, [r7, #22]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002ebe:	7d7b      	ldrb	r3, [r7, #21]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f040 8142 	bne.w	800314a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ec6:	8afb      	ldrh	r3, [r7, #22]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d151      	bne.n	8002f74 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee0:	b29c      	uxth	r4, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3328      	adds	r3, #40	; 0x28
 8002ef6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	441a      	add	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f32:	2100      	movs	r1, #0
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f004 f9eb 	bl	8007310 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8234 	beq.w	80033b0 <PCD_EP_ISR_Handler+0x510>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f040 822f 	bne.w	80033b0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b292      	uxth	r2, r2
 8002f66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f72:	e21d      	b.n	80033b0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f7a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f84:	8a7b      	ldrh	r3, [r7, #18]
 8002f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d033      	beq.n	8002ff6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3306      	adds	r3, #6
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f002 fb70 	bl	80056b2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29c      	uxth	r4, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002fea:	b292      	uxth	r2, r2
 8002fec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f004 f964 	bl	80072bc <HAL_PCD_SetupStageCallback>
 8002ff4:	e1dc      	b.n	80033b0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ff6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f280 81d8 	bge.w	80033b0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29a      	uxth	r2, r3
 8003008:	f640 738f 	movw	r3, #3983	; 0xf8f
 800300c:	4013      	ands	r3, r2
 800300e:	b29c      	uxth	r4, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003018:	b292      	uxth	r2, r2
 800301a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003024:	b29b      	uxth	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	3306      	adds	r3, #6
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d019      	beq.n	8003084 <PCD_EP_ISR_Handler+0x1e4>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6959      	ldr	r1, [r3, #20]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003068:	b29b      	uxth	r3, r3
 800306a:	f002 fb22 	bl	80056b2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	441a      	add	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800307c:	2100      	movs	r1, #0
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f004 f92e 	bl	80072e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461c      	mov	r4, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003092:	b29b      	uxth	r3, r3
 8003094:	441c      	add	r4, r3
 8003096:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800309a:	461c      	mov	r4, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10e      	bne.n	80030c2 <PCD_EP_ISR_Handler+0x222>
 80030a4:	8823      	ldrh	r3, [r4, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	8023      	strh	r3, [r4, #0]
 80030b0:	8823      	ldrh	r3, [r4, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030bc:	b29b      	uxth	r3, r3
 80030be:	8023      	strh	r3, [r4, #0]
 80030c0:	e02d      	b.n	800311e <PCD_EP_ISR_Handler+0x27e>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b3e      	cmp	r3, #62	; 0x3e
 80030c8:	d812      	bhi.n	80030f0 <PCD_EP_ISR_Handler+0x250>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <PCD_EP_ISR_Handler+0x244>
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	3301      	adds	r3, #1
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	8023      	strh	r3, [r4, #0]
 80030ee:	e016      	b.n	800311e <PCD_EP_ISR_Handler+0x27e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <PCD_EP_ISR_Handler+0x26a>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	3b01      	subs	r3, #1
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	b29b      	uxth	r3, r3
 800310e:	029b      	lsls	r3, r3, #10
 8003110:	b29b      	uxth	r3, r3
 8003112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311a:	b29b      	uxth	r3, r3
 800311c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	b29c      	uxth	r4, r3
 8003130:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003134:	b29c      	uxth	r4, r3
 8003136:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800313a:	b29c      	uxth	r4, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4ba2      	ldr	r3, [pc, #648]	; (80033cc <PCD_EP_ISR_Handler+0x52c>)
 8003142:	4323      	orrs	r3, r4
 8003144:	b29b      	uxth	r3, r3
 8003146:	8013      	strh	r3, [r2, #0]
 8003148:	e132      	b.n	80033b0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	7d7b      	ldrb	r3, [r7, #21]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800315a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f280 80d1 	bge.w	8003306 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	7d7b      	ldrb	r3, [r7, #21]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29a      	uxth	r2, r3
 8003174:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003178:	4013      	ands	r3, r2
 800317a:	b29c      	uxth	r4, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	7d7b      	ldrb	r3, [r7, #21]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800318c:	b292      	uxth	r2, r2
 800318e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003190:	7d7b      	ldrb	r3, [r7, #21]
 8003192:	015b      	lsls	r3, r3, #5
 8003194:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	7b1b      	ldrb	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d121      	bne.n	80031ea <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	3306      	adds	r3, #6
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ce:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80031d0:	8bfb      	ldrh	r3, [r7, #30]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d072      	beq.n	80032bc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6959      	ldr	r1, [r3, #20]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	88da      	ldrh	r2, [r3, #6]
 80031e2:	8bfb      	ldrh	r3, [r7, #30]
 80031e4:	f002 fa65 	bl	80056b2 <USB_ReadPMA>
 80031e8:	e068      	b.n	80032bc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d021      	beq.n	8003248 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	3302      	adds	r3, #2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800322c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800322e:	8bfb      	ldrh	r3, [r7, #30]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02a      	beq.n	800328a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6959      	ldr	r1, [r3, #20]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	891a      	ldrh	r2, [r3, #8]
 8003240:	8bfb      	ldrh	r3, [r7, #30]
 8003242:	f002 fa36 	bl	80056b2 <USB_ReadPMA>
 8003246:	e020      	b.n	800328a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003250:	b29b      	uxth	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	3306      	adds	r3, #6
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003270:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003272:	8bfb      	ldrh	r3, [r7, #30]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6959      	ldr	r1, [r3, #20]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	895a      	ldrh	r2, [r3, #10]
 8003284:	8bfb      	ldrh	r3, [r7, #30]
 8003286:	f002 fa14 	bl	80056b2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a4:	b29c      	uxth	r4, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <PCD_EP_ISR_Handler+0x530>)
 80032b6:	4323      	orrs	r3, r4
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	8bfb      	ldrh	r3, [r7, #30]
 80032c2:	441a      	add	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	8bfb      	ldrh	r3, [r7, #30]
 80032ce:	441a      	add	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <PCD_EP_ISR_Handler+0x446>
 80032dc:	8bfa      	ldrh	r2, [r7, #30]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d206      	bcs.n	80032f4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f003 fff7 	bl	80072e0 <HAL_PCD_DataOutStageCallback>
 80032f2:	e008      	b.n	8003306 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	7819      	ldrb	r1, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fc9d 	bl	8002c40 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003306:	8a7b      	ldrh	r3, [r7, #18]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d04f      	beq.n	80033b0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003310:	7d7b      	ldrb	r3, [r7, #21]
 8003312:	015b      	lsls	r3, r3, #5
 8003314:	3328      	adds	r3, #40	; 0x28
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	7d7b      	ldrb	r3, [r7, #21]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	b29c      	uxth	r4, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	7d7b      	ldrb	r3, [r7, #21]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800334a:	b29b      	uxth	r3, r3
 800334c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	3302      	adds	r3, #2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	441a      	add	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f003 ffba 	bl	8007310 <HAL_PCD_DataInStageCallback>
 800339c:	e008      	b.n	80033b0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	7819      	ldrb	r1, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fc96 	bl	8002cdc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f6ff ad74 	blt.w	8002eaa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3724      	adds	r7, #36	; 0x24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	ffff8080 	.word	0xffff8080
 80033d0:	ffff80c0 	.word	0xffff80c0

080033d4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	817b      	strh	r3, [r7, #10]
 80033e2:	4613      	mov	r3, r2
 80033e4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033e6:	897b      	ldrh	r3, [r7, #10]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f2:	897b      	ldrh	r3, [r7, #10]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	015b      	lsls	r3, r3, #5
 80033fa:	3328      	adds	r3, #40	; 0x28
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e006      	b.n	8003412 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003404:	897b      	ldrh	r3, [r7, #10]
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2200      	movs	r2, #0
 800341c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	b29a      	uxth	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	80da      	strh	r2, [r3, #6]
 8003426:	e00b      	b.n	8003440 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2201      	movs	r2, #1
 800342c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	b29a      	uxth	r2, r3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	b29a      	uxth	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e26c      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8087 	beq.w	800357a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800346c:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b04      	cmp	r3, #4
 8003476:	d00c      	beq.n	8003492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003478:	4b8f      	ldr	r3, [pc, #572]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d112      	bne.n	80034aa <HAL_RCC_OscConfig+0x5e>
 8003484:	4b8c      	ldr	r3, [pc, #560]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d10b      	bne.n	80034aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003492:	4b89      	ldr	r3, [pc, #548]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d06c      	beq.n	8003578 <HAL_RCC_OscConfig+0x12c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d168      	bne.n	8003578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e246      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x76>
 80034b4:	4b80      	ldr	r3, [pc, #512]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a7f      	ldr	r2, [pc, #508]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e02e      	b.n	8003520 <HAL_RCC_OscConfig+0xd4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x98>
 80034ca:	4b7b      	ldr	r3, [pc, #492]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7a      	ldr	r2, [pc, #488]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a77      	ldr	r2, [pc, #476]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e01d      	b.n	8003520 <HAL_RCC_OscConfig+0xd4>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0xbc>
 80034ee:	4b72      	ldr	r3, [pc, #456]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a71      	ldr	r2, [pc, #452]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b6f      	ldr	r3, [pc, #444]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0xd4>
 8003508:	4b6b      	ldr	r3, [pc, #428]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a6a      	ldr	r2, [pc, #424]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b68      	ldr	r3, [pc, #416]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a67      	ldr	r2, [pc, #412]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe fe0c 	bl	8002144 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fe fe08 	bl	8002144 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1fa      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0xe4>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fdf8 	bl	8002144 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe fdf4 	bl	8002144 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e1e6      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x10c>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d063      	beq.n	800364e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003586:	4b4c      	ldr	r3, [pc, #304]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003592:	4b49      	ldr	r3, [pc, #292]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b08      	cmp	r3, #8
 800359c:	d11c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x18c>
 800359e:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d116      	bne.n	80035d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x176>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e1ba      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4939      	ldr	r1, [pc, #228]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	e03a      	b.n	800364e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7fe fdad 	bl	8002144 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe fda9 	bl	8002144 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e19b      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4927      	ldr	r1, [pc, #156]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e015      	b.n	800364e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_RCC_OscConfig+0x270>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe fd8c 	bl	8002144 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003630:	f7fe fd88 	bl	8002144 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e17a      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03a      	beq.n	80036d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d019      	beq.n	8003696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003668:	f7fe fd6c 	bl	8002144 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7fe fd68 	bl	8002144 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e15a      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_RCC_OscConfig+0x26c>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800368e:	2001      	movs	r0, #1
 8003690:	f000 faa8 	bl	8003be4 <RCC_Delay>
 8003694:	e01c      	b.n	80036d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369c:	f7fe fd52 	bl	8002144 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a2:	e00f      	b.n	80036c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fe fd4e 	bl	8002144 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d908      	bls.n	80036c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e140      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	42420000 	.word	0x42420000
 80036c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	4b9e      	ldr	r3, [pc, #632]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e9      	bne.n	80036a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80a6 	beq.w	800382a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e2:	4b97      	ldr	r3, [pc, #604]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	4b94      	ldr	r3, [pc, #592]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4a93      	ldr	r2, [pc, #588]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	61d3      	str	r3, [r2, #28]
 80036fa:	4b91      	ldr	r3, [pc, #580]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	4b8e      	ldr	r3, [pc, #568]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d118      	bne.n	8003748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003716:	4b8b      	ldr	r3, [pc, #556]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a8a      	ldr	r2, [pc, #552]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003722:	f7fe fd0f 	bl	8002144 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372a:	f7fe fd0b 	bl	8002144 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b64      	cmp	r3, #100	; 0x64
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0fd      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b81      	ldr	r3, [pc, #516]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x312>
 8003750:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4a7a      	ldr	r2, [pc, #488]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6213      	str	r3, [r2, #32]
 800375c:	e02d      	b.n	80037ba <HAL_RCC_OscConfig+0x36e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x334>
 8003766:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4a75      	ldr	r2, [pc, #468]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	6213      	str	r3, [r2, #32]
 8003772:	4b73      	ldr	r3, [pc, #460]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4a72      	ldr	r2, [pc, #456]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003778:	f023 0304 	bic.w	r3, r3, #4
 800377c:	6213      	str	r3, [r2, #32]
 800377e:	e01c      	b.n	80037ba <HAL_RCC_OscConfig+0x36e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d10c      	bne.n	80037a2 <HAL_RCC_OscConfig+0x356>
 8003788:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a6c      	ldr	r2, [pc, #432]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	6213      	str	r3, [r2, #32]
 8003794:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a69      	ldr	r2, [pc, #420]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6213      	str	r3, [r2, #32]
 80037a0:	e00b      	b.n	80037ba <HAL_RCC_OscConfig+0x36e>
 80037a2:	4b67      	ldr	r3, [pc, #412]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	4a66      	ldr	r2, [pc, #408]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6213      	str	r3, [r2, #32]
 80037ae:	4b64      	ldr	r3, [pc, #400]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a63      	ldr	r2, [pc, #396]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d015      	beq.n	80037ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c2:	f7fe fcbf 	bl	8002144 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fe fcbb 	bl	8002144 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0ab      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	4b57      	ldr	r3, [pc, #348]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ee      	beq.n	80037ca <HAL_RCC_OscConfig+0x37e>
 80037ec:	e014      	b.n	8003818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ee:	f7fe fca9 	bl	8002144 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fe fca5 	bl	8002144 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e095      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380c:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ee      	bne.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d105      	bne.n	800382a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381e:	4b48      	ldr	r3, [pc, #288]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4a47      	ldr	r2, [pc, #284]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8081 	beq.w	8003936 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003834:	4b42      	ldr	r3, [pc, #264]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d061      	beq.n	8003904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d146      	bne.n	80038d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003848:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <HAL_RCC_OscConfig+0x4fc>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384e:	f7fe fc79 	bl	8002144 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003856:	f7fe fc75 	bl	8002144 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e067      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003868:	4b35      	ldr	r3, [pc, #212]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f0      	bne.n	8003856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d108      	bne.n	8003890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800387e:	4b30      	ldr	r3, [pc, #192]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	492d      	ldr	r1, [pc, #180]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003890:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a19      	ldr	r1, [r3, #32]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	430b      	orrs	r3, r1
 80038a2:	4927      	ldr	r1, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <HAL_RCC_OscConfig+0x4fc>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe fc49 	bl	8002144 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fe fc45 	bl	8002144 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e037      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x46a>
 80038d4:	e02f      	b.n	8003936 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <HAL_RCC_OscConfig+0x4fc>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fe fc32 	bl	8002144 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe fc2e 	bl	8002144 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e020      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x498>
 8003902:	e018      	b.n	8003936 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e013      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_OscConfig+0x4f4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	429a      	cmp	r2, r3
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	42420060 	.word	0x42420060

0800394c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0d0      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003960:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d910      	bls.n	8003990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b67      	ldr	r3, [pc, #412]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 0207 	bic.w	r2, r3, #7
 8003976:	4965      	ldr	r1, [pc, #404]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b63      	ldr	r3, [pc, #396]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0b8      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a8:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a58      	ldr	r2, [pc, #352]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c0:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a52      	ldr	r2, [pc, #328]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039cc:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	494d      	ldr	r1, [pc, #308]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d040      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d115      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e07f      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0a:	4b41      	ldr	r3, [pc, #260]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e073      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1a:	4b3d      	ldr	r3, [pc, #244]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e06b      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2a:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f023 0203 	bic.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4936      	ldr	r1, [pc, #216]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a3c:	f7fe fb82 	bl	8002144 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a44:	f7fe fb7e 	bl	8002144 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e053      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 020c 	and.w	r2, r3, #12
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d1eb      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d210      	bcs.n	8003a9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 0207 	bic.w	r2, r3, #7
 8003a82:	4922      	ldr	r1, [pc, #136]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e032      	b.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4916      	ldr	r1, [pc, #88]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	490e      	ldr	r1, [pc, #56]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ada:	f000 f821 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003ade:	4601      	mov	r1, r0
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003aec:	5cd3      	ldrb	r3, [r2, r3]
 8003aee:	fa21 f303 	lsr.w	r3, r1, r3
 8003af2:	4a09      	ldr	r2, [pc, #36]	; (8003b18 <HAL_RCC_ClockConfig+0x1cc>)
 8003af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1d0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fae0 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40022000 	.word	0x40022000
 8003b10:	40021000 	.word	0x40021000
 8003b14:	0800797c 	.word	0x0800797c
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	20000008 	.word	0x20000008

08003b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b20:	b490      	push	{r4, r7}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b28:	1d3c      	adds	r4, r7, #4
 8003b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b30:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b4a:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d002      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x40>
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x46>
 8003b5e:	e02d      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b60:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b62:	623b      	str	r3, [r7, #32]
      break;
 8003b64:	e02d      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	0c9b      	lsrs	r3, r3, #18
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b72:	4413      	add	r3, r2
 8003b74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0c5b      	lsrs	r3, r3, #17
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b92:	4413      	add	r3, r2
 8003b94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b9e:	fb02 f203 	mul.w	r2, r2, r3
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	e004      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	623b      	str	r3, [r7, #32]
      break;
 8003bba:	e002      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bbe:	623b      	str	r3, [r7, #32]
      break;
 8003bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3728      	adds	r7, #40	; 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc90      	pop	{r4, r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	0800781c 	.word	0x0800781c
 8003bd4:	0800782c 	.word	0x0800782c
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	007a1200 	.word	0x007a1200
 8003be0:	003d0900 	.word	0x003d0900

08003be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <RCC_Delay+0x34>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <RCC_Delay+0x38>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	0a5b      	lsrs	r3, r3, #9
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c00:	bf00      	nop
  }
  while (Delay --);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1e5a      	subs	r2, r3, #1
 8003c06:	60fa      	str	r2, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f9      	bne.n	8003c00 <RCC_Delay+0x1c>
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000004 	.word	0x20000004
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d07d      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c40:	4b4f      	ldr	r3, [pc, #316]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4a4b      	ldr	r2, [pc, #300]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c56:	61d3      	str	r3, [r2, #28]
 8003c58:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c64:	2301      	movs	r3, #1
 8003c66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d118      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c74:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a42      	ldr	r2, [pc, #264]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c80:	f7fe fa60 	bl	8002144 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c86:	e008      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fe fa5c 	bl	8002144 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e06d      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca6:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d02e      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d027      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ccc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cce:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cda:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d014      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7fe fa2b 	bl	8002144 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fe fa27 	bl	8002144 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e036      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ee      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4917      	ldr	r1, [pc, #92]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	490b      	ldr	r1, [pc, #44]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d62:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	4904      	ldr	r1, [pc, #16]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42420440 	.word	0x42420440

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e01d      	b.n	8003dda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe f83a 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 fa18 	bl	8004200 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b06      	cmp	r3, #6
 8003e0a:	d007      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d122      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0202 	mvn.w	r2, #2
 8003e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9ad 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f9a0 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f9af 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0204 	mvn.w	r2, #4
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f983 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f976 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f985 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0208 	mvn.w	r2, #8
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2204      	movs	r2, #4
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f959 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f94c 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f95b 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0210 	mvn.w	r2, #16
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2208      	movs	r2, #8
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f92f 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f922 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f931 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0201 	mvn.w	r2, #1
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8fd 	bl	80041a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b80      	cmp	r3, #128	; 0x80
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa59 	bl	800448a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8f5 	bl	80041ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b20      	cmp	r3, #32
 8004010:	d10e      	bne.n	8004030 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d107      	bne.n	8004030 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0220 	mvn.w	r2, #32
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa24 	bl	8004478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIM_ConfigClockSource+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e0a6      	b.n	800419e <HAL_TIM_ConfigClockSource+0x166>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800406e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004076:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d067      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0x120>
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d80b      	bhi.n	80040a4 <HAL_TIM_ConfigClockSource+0x6c>
 800408c:	2b10      	cmp	r3, #16
 800408e:	d073      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x140>
 8004090:	2b10      	cmp	r3, #16
 8004092:	d802      	bhi.n	800409a <HAL_TIM_ConfigClockSource+0x62>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d06f      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004098:	e078      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800409a:	2b20      	cmp	r3, #32
 800409c:	d06c      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x140>
 800409e:	2b30      	cmp	r3, #48	; 0x30
 80040a0:	d06a      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040a2:	e073      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040a4:	2b70      	cmp	r3, #112	; 0x70
 80040a6:	d00d      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0x8c>
 80040a8:	2b70      	cmp	r3, #112	; 0x70
 80040aa:	d804      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x7e>
 80040ac:	2b50      	cmp	r3, #80	; 0x50
 80040ae:	d033      	beq.n	8004118 <HAL_TIM_ConfigClockSource+0xe0>
 80040b0:	2b60      	cmp	r3, #96	; 0x60
 80040b2:	d041      	beq.n	8004138 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040b4:	e06a      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d066      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x152>
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c0:	d017      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040c2:	e063      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f000 f96d 	bl	80043b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	609a      	str	r2, [r3, #8]
      break;
 80040f0:	e04c      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6899      	ldr	r1, [r3, #8]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f000 f956 	bl	80043b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004114:	609a      	str	r2, [r3, #8]
      break;
 8004116:	e039      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	461a      	mov	r2, r3
 8004126:	f000 f8cd 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2150      	movs	r1, #80	; 0x50
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f924 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8004136:	e029      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	461a      	mov	r2, r3
 8004146:	f000 f8eb 	bl	8004320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2160      	movs	r1, #96	; 0x60
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f914 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8004156:	e019      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6859      	ldr	r1, [r3, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	461a      	mov	r2, r3
 8004166:	f000 f8ad 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2140      	movs	r1, #64	; 0x40
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f904 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8004176:	e009      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f000 f8fb 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8004188:	e000      	b.n	800418c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800418a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a29      	ldr	r2, [pc, #164]	; (80042b8 <TIM_Base_SetConfig+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00b      	beq.n	8004230 <TIM_Base_SetConfig+0x30>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421e:	d007      	beq.n	8004230 <TIM_Base_SetConfig+0x30>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <TIM_Base_SetConfig+0xbc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_Base_SetConfig+0x30>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <TIM_Base_SetConfig+0xc0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d108      	bne.n	8004242 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <TIM_Base_SetConfig+0xb8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00b      	beq.n	8004262 <TIM_Base_SetConfig+0x62>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d007      	beq.n	8004262 <TIM_Base_SetConfig+0x62>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a19      	ldr	r2, [pc, #100]	; (80042bc <TIM_Base_SetConfig+0xbc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_Base_SetConfig+0x62>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <TIM_Base_SetConfig+0xc0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d108      	bne.n	8004274 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a07      	ldr	r2, [pc, #28]	; (80042b8 <TIM_Base_SetConfig+0xb8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d103      	bne.n	80042a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	615a      	str	r2, [r3, #20]
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800

080042c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f023 0201 	bic.w	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 030a 	bic.w	r3, r3, #10
 8004300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 0210 	bic.w	r2, r3, #16
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800434a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	031b      	lsls	r3, r3, #12
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800435c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	621a      	str	r2, [r3, #32]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr

0800437e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	f043 0307 	orr.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	609a      	str	r2, [r3, #8]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr

080043b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b087      	sub	sp, #28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	021a      	lsls	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4313      	orrs	r3, r2
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	609a      	str	r2, [r3, #8]
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004404:	2302      	movs	r3, #2
 8004406:	e032      	b.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004440:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800449c:	b084      	sub	sp, #16
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	f107 0014 	add.w	r0, r7, #20
 80044aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	b004      	add	sp, #16
 80044ba:	4770      	bx	lr

080044bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044c8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	89fb      	ldrh	r3, [r7, #14]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044f6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044fe:	b29b      	uxth	r3, r3
 8004500:	b21a      	sxth	r2, r3
 8004502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004506:	43db      	mvns	r3, r3
 8004508:	b21b      	sxth	r3, r3
 800450a:	4013      	ands	r3, r2
 800450c:	b21b      	sxth	r3, r3
 800450e:	b29a      	uxth	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800453a:	b084      	sub	sp, #16
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	f107 0014 	add.w	r0, r7, #20
 8004548:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ffa5 	bl	80044bc <USB_EnableGlobalInt>

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800457e:	b004      	add	sp, #16
 8004580:	4770      	bx	lr
	...

08004584 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004584:	b490      	push	{r4, r7}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d819      	bhi.n	80045e6 <USB_ActivateEndpoint+0x62>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <USB_ActivateEndpoint+0x34>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045dd 	.word	0x080045dd
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	080045d3 	.word	0x080045d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045c8:	89bb      	ldrh	r3, [r7, #12]
 80045ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ce:	81bb      	strh	r3, [r7, #12]
      break;
 80045d0:	e00d      	b.n	80045ee <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045d2:	89bb      	ldrh	r3, [r7, #12]
 80045d4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045d8:	81bb      	strh	r3, [r7, #12]
      break;
 80045da:	e008      	b.n	80045ee <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045dc:	89bb      	ldrh	r3, [r7, #12]
 80045de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045e2:	81bb      	strh	r3, [r7, #12]
      break;
 80045e4:	e003      	b.n	80045ee <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
      break;
 80045ea:	e000      	b.n	80045ee <USB_ActivateEndpoint+0x6a>
      break;
 80045ec:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	89bb      	ldrh	r3, [r7, #12]
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	b29a      	uxth	r2, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	4313      	orrs	r3, r2
 800462e:	b29c      	uxth	r4, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	4b8a      	ldr	r3, [pc, #552]	; (8004864 <USB_ActivateEndpoint+0x2e0>)
 800463c:	4323      	orrs	r3, r4
 800463e:	b29b      	uxth	r3, r3
 8004640:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	7b1b      	ldrb	r3, [r3, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 8112 	bne.w	8004870 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	785b      	ldrb	r3, [r3, #1]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d067      	beq.n	8004724 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004654:	687c      	ldr	r4, [r7, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465c:	b29b      	uxth	r3, r3
 800465e:	441c      	add	r4, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	4423      	add	r3, r4
 8004668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466c:	461c      	mov	r4, r3
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	88db      	ldrh	r3, [r3, #6]
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	b29b      	uxth	r3, r3
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	b29b      	uxth	r3, r3
 800467a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29c      	uxth	r4, r3
 800468a:	4623      	mov	r3, r4
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d014      	beq.n	80046be <USB_ActivateEndpoint+0x13a>
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	b29c      	uxth	r4, r3
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	4b6c      	ldr	r3, [pc, #432]	; (8004868 <USB_ActivateEndpoint+0x2e4>)
 80046b8:	4323      	orrs	r3, r4
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	78db      	ldrb	r3, [r3, #3]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d018      	beq.n	80046f8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046dc:	b29c      	uxth	r4, r3
 80046de:	f084 0320 	eor.w	r3, r4, #32
 80046e2:	b29c      	uxth	r4, r3
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	4b5d      	ldr	r3, [pc, #372]	; (8004864 <USB_ActivateEndpoint+0x2e0>)
 80046f0:	4323      	orrs	r3, r4
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
 80046f6:	e22b      	b.n	8004b50 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470e:	b29c      	uxth	r4, r3
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	441a      	add	r2, r3
 800471a:	4b52      	ldr	r3, [pc, #328]	; (8004864 <USB_ActivateEndpoint+0x2e0>)
 800471c:	4323      	orrs	r3, r4
 800471e:	b29b      	uxth	r3, r3
 8004720:	8013      	strh	r3, [r2, #0]
 8004722:	e215      	b.n	8004b50 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004724:	687c      	ldr	r4, [r7, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472c:	b29b      	uxth	r3, r3
 800472e:	441c      	add	r4, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	4423      	add	r3, r4
 8004738:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800473c:	461c      	mov	r4, r3
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	88db      	ldrh	r3, [r3, #6]
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	b29b      	uxth	r3, r3
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800474c:	687c      	ldr	r4, [r7, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004754:	b29b      	uxth	r3, r3
 8004756:	441c      	add	r4, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	4423      	add	r3, r4
 8004760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004764:	461c      	mov	r4, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10e      	bne.n	800478c <USB_ActivateEndpoint+0x208>
 800476e:	8823      	ldrh	r3, [r4, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004776:	b29b      	uxth	r3, r3
 8004778:	8023      	strh	r3, [r4, #0]
 800477a:	8823      	ldrh	r3, [r4, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004786:	b29b      	uxth	r3, r3
 8004788:	8023      	strh	r3, [r4, #0]
 800478a:	e02d      	b.n	80047e8 <USB_ActivateEndpoint+0x264>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b3e      	cmp	r3, #62	; 0x3e
 8004792:	d812      	bhi.n	80047ba <USB_ActivateEndpoint+0x236>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <USB_ActivateEndpoint+0x22a>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	029b      	lsls	r3, r3, #10
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8023      	strh	r3, [r4, #0]
 80047b8:	e016      	b.n	80047e8 <USB_ActivateEndpoint+0x264>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <USB_ActivateEndpoint+0x250>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	029b      	lsls	r3, r3, #10
 80047da:	b29b      	uxth	r3, r3
 80047dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29c      	uxth	r4, r3
 80047f6:	4623      	mov	r3, r4
 80047f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d014      	beq.n	800482a <USB_ActivateEndpoint+0x2a6>
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	b29c      	uxth	r4, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <USB_ActivateEndpoint+0x2e8>)
 8004824:	4323      	orrs	r3, r4
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004840:	b29c      	uxth	r4, r3
 8004842:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004846:	b29c      	uxth	r4, r3
 8004848:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800484c:	b29c      	uxth	r4, r3
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <USB_ActivateEndpoint+0x2e0>)
 800485a:	4323      	orrs	r3, r4
 800485c:	b29b      	uxth	r3, r3
 800485e:	8013      	strh	r3, [r2, #0]
 8004860:	e176      	b.n	8004b50 <USB_ActivateEndpoint+0x5cc>
 8004862:	bf00      	nop
 8004864:	ffff8080 	.word	0xffff8080
 8004868:	ffff80c0 	.word	0xffff80c0
 800486c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	b29c      	uxth	r4, r3
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	4b96      	ldr	r3, [pc, #600]	; (8004aec <USB_ActivateEndpoint+0x568>)
 8004894:	4323      	orrs	r3, r4
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800489a:	687c      	ldr	r4, [r7, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	441c      	add	r4, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	4423      	add	r3, r4
 80048ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b2:	461c      	mov	r4, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	891b      	ldrh	r3, [r3, #8]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8023      	strh	r3, [r4, #0]
 80048c2:	687c      	ldr	r4, [r7, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	441c      	add	r4, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	4423      	add	r3, r4
 80048d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048da:	461c      	mov	r4, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	895b      	ldrh	r3, [r3, #10]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f040 8088 	bne.w	8004a04 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29c      	uxth	r4, r3
 8004902:	4623      	mov	r3, r4
 8004904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d014      	beq.n	8004936 <USB_ActivateEndpoint+0x3b2>
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	b29c      	uxth	r4, r3
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	4b70      	ldr	r3, [pc, #448]	; (8004af0 <USB_ActivateEndpoint+0x56c>)
 8004930:	4323      	orrs	r3, r4
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29c      	uxth	r4, r3
 8004944:	4623      	mov	r3, r4
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d014      	beq.n	8004978 <USB_ActivateEndpoint+0x3f4>
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004964:	b29c      	uxth	r4, r3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	4b60      	ldr	r3, [pc, #384]	; (8004af4 <USB_ActivateEndpoint+0x570>)
 8004972:	4323      	orrs	r3, r4
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	b29c      	uxth	r4, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <USB_ActivateEndpoint+0x570>)
 800499c:	4323      	orrs	r3, r4
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b8:	b29c      	uxth	r4, r3
 80049ba:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80049be:	b29c      	uxth	r4, r3
 80049c0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80049c4:	b29c      	uxth	r4, r3
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	441a      	add	r2, r3
 80049d0:	4b49      	ldr	r3, [pc, #292]	; (8004af8 <USB_ActivateEndpoint+0x574>)
 80049d2:	4323      	orrs	r3, r4
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ee:	b29c      	uxth	r4, r3
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	4b3f      	ldr	r3, [pc, #252]	; (8004af8 <USB_ActivateEndpoint+0x574>)
 80049fc:	4323      	orrs	r3, r4
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
 8004a02:	e0a5      	b.n	8004b50 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29c      	uxth	r4, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d014      	beq.n	8004a46 <USB_ActivateEndpoint+0x4c2>
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	b29c      	uxth	r4, r3
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <USB_ActivateEndpoint+0x56c>)
 8004a40:	4323      	orrs	r3, r4
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29c      	uxth	r4, r3
 8004a54:	4623      	mov	r3, r4
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d014      	beq.n	8004a88 <USB_ActivateEndpoint+0x504>
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a74:	b29c      	uxth	r4, r3
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <USB_ActivateEndpoint+0x570>)
 8004a82:	4323      	orrs	r3, r4
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	b29c      	uxth	r4, r3
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <USB_ActivateEndpoint+0x56c>)
 8004aac:	4323      	orrs	r3, r4
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	78db      	ldrb	r3, [r3, #3]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d020      	beq.n	8004afc <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad0:	b29c      	uxth	r4, r3
 8004ad2:	f084 0320 	eor.w	r3, r4, #32
 8004ad6:	b29c      	uxth	r4, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <USB_ActivateEndpoint+0x574>)
 8004ae4:	4323      	orrs	r3, r4
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]
 8004aea:	e01c      	b.n	8004b26 <USB_ActivateEndpoint+0x5a2>
 8004aec:	ffff8180 	.word	0xffff8180
 8004af0:	ffffc080 	.word	0xffffc080
 8004af4:	ffff80c0 	.word	0xffff80c0
 8004af8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	b29c      	uxth	r4, r3
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <USB_ActivateEndpoint+0x5d8>)
 8004b20:	4323      	orrs	r3, r4
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	b29c      	uxth	r4, r3
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <USB_ActivateEndpoint+0x5d8>)
 8004b4a:	4323      	orrs	r3, r4
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc90      	pop	{r4, r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	ffff8080 	.word	0xffff8080

08004b60 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b60:	b490      	push	{r4, r7}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	7b1b      	ldrb	r3, [r3, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d171      	bne.n	8004c56 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d036      	beq.n	8004be8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29c      	uxth	r4, r3
 8004b88:	4623      	mov	r3, r4
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d014      	beq.n	8004bbc <USB_DeactivateEndpoint+0x5c>
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	b29c      	uxth	r4, r3
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	4b6b      	ldr	r3, [pc, #428]	; (8004d64 <USB_DeactivateEndpoint+0x204>)
 8004bb6:	4323      	orrs	r3, r4
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd2:	b29c      	uxth	r4, r3
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <USB_DeactivateEndpoint+0x208>)
 8004be0:	4323      	orrs	r3, r4
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]
 8004be6:	e144      	b.n	8004e72 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29c      	uxth	r4, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d014      	beq.n	8004c2a <USB_DeactivateEndpoint+0xca>
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	b29c      	uxth	r4, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	4b52      	ldr	r3, [pc, #328]	; (8004d6c <USB_DeactivateEndpoint+0x20c>)
 8004c24:	4323      	orrs	r3, r4
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	b29c      	uxth	r4, r3
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <USB_DeactivateEndpoint+0x208>)
 8004c4e:	4323      	orrs	r3, r4
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8013      	strh	r3, [r2, #0]
 8004c54:	e10d      	b.n	8004e72 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 8088 	bne.w	8004d70 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29c      	uxth	r4, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d014      	beq.n	8004ca2 <USB_DeactivateEndpoint+0x142>
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	b29c      	uxth	r4, r3
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <USB_DeactivateEndpoint+0x20c>)
 8004c9c:	4323      	orrs	r3, r4
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29c      	uxth	r4, r3
 8004cb0:	4623      	mov	r3, r4
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d014      	beq.n	8004ce4 <USB_DeactivateEndpoint+0x184>
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd0:	b29c      	uxth	r4, r3
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <USB_DeactivateEndpoint+0x204>)
 8004cde:	4323      	orrs	r3, r4
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	b29c      	uxth	r4, r3
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <USB_DeactivateEndpoint+0x204>)
 8004d08:	4323      	orrs	r3, r4
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	b29c      	uxth	r4, r3
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	441a      	add	r2, r3
 8004d30:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <USB_DeactivateEndpoint+0x208>)
 8004d32:	4323      	orrs	r3, r4
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4e:	b29c      	uxth	r4, r3
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <USB_DeactivateEndpoint+0x208>)
 8004d5c:	4323      	orrs	r3, r4
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8013      	strh	r3, [r2, #0]
 8004d62:	e086      	b.n	8004e72 <USB_DeactivateEndpoint+0x312>
 8004d64:	ffff80c0 	.word	0xffff80c0
 8004d68:	ffff8080 	.word	0xffff8080
 8004d6c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29c      	uxth	r4, r3
 8004d7e:	4623      	mov	r3, r4
 8004d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d014      	beq.n	8004db2 <USB_DeactivateEndpoint+0x252>
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	b29c      	uxth	r4, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	4b35      	ldr	r3, [pc, #212]	; (8004e80 <USB_DeactivateEndpoint+0x320>)
 8004dac:	4323      	orrs	r3, r4
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29c      	uxth	r4, r3
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d014      	beq.n	8004df4 <USB_DeactivateEndpoint+0x294>
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de0:	b29c      	uxth	r4, r3
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	441a      	add	r2, r3
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <USB_DeactivateEndpoint+0x324>)
 8004dee:	4323      	orrs	r3, r4
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	b29c      	uxth	r4, r3
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <USB_DeactivateEndpoint+0x320>)
 8004e18:	4323      	orrs	r3, r4
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e34:	b29c      	uxth	r4, r3
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <USB_DeactivateEndpoint+0x328>)
 8004e42:	4323      	orrs	r3, r4
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	b29c      	uxth	r4, r3
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <USB_DeactivateEndpoint+0x328>)
 8004e6c:	4323      	orrs	r3, r4
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc90      	pop	{r4, r7}
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	ffffc080 	.word	0xffffc080
 8004e84:	ffff80c0 	.word	0xffff80c0
 8004e88:	ffff8080 	.word	0xffff8080

08004e8c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b08d      	sub	sp, #52	; 0x34
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	f040 8160 	bne.w	8005160 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d909      	bls.n	8004ec0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	1ad2      	subs	r2, r2, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	619a      	str	r2, [r3, #24]
 8004ebe:	e005      	b.n	8004ecc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	7b1b      	ldrb	r3, [r3, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d119      	bne.n	8004f08 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6959      	ldr	r1, [r3, #20]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	88da      	ldrh	r2, [r3, #6]
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fba2 	bl	800562a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ee6:	687c      	ldr	r4, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	441c      	add	r4, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	4423      	add	r3, r4
 8004efa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004efe:	461c      	mov	r4, r3
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8023      	strh	r3, [r4, #0]
 8004f06:	e10f      	b.n	8005128 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d065      	beq.n	8004fea <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f1e:	687c      	ldr	r4, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d148      	bne.n	8004fba <USB_EPStartXfer+0x12e>
 8004f28:	687c      	ldr	r4, [r7, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	441c      	add	r4, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	4423      	add	r3, r4
 8004f3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f40:	461c      	mov	r4, r3
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10e      	bne.n	8004f66 <USB_EPStartXfer+0xda>
 8004f48:	8823      	ldrh	r3, [r4, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8023      	strh	r3, [r4, #0]
 8004f54:	8823      	ldrh	r3, [r4, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8023      	strh	r3, [r4, #0]
 8004f64:	e03d      	b.n	8004fe2 <USB_EPStartXfer+0x156>
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	2b3e      	cmp	r3, #62	; 0x3e
 8004f6a:	d810      	bhi.n	8004f8e <USB_EPStartXfer+0x102>
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <USB_EPStartXfer+0xf6>
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	3301      	adds	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	029b      	lsls	r3, r3, #10
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	8023      	strh	r3, [r4, #0]
 8004f8c:	e029      	b.n	8004fe2 <USB_EPStartXfer+0x156>
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <USB_EPStartXfer+0x118>
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	029b      	lsls	r3, r3, #10
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8023      	strh	r3, [r4, #0]
 8004fb8:	e013      	b.n	8004fe2 <USB_EPStartXfer+0x156>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d10f      	bne.n	8004fe2 <USB_EPStartXfer+0x156>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	441c      	add	r4, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	4423      	add	r3, r4
 8004fd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	895b      	ldrh	r3, [r3, #10]
 8004fe6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fe8:	e063      	b.n	80050b2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d148      	bne.n	8005084 <USB_EPStartXfer+0x1f8>
 8004ff2:	687c      	ldr	r4, [r7, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	441c      	add	r4, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4423      	add	r3, r4
 8005006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800500a:	461c      	mov	r4, r3
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10e      	bne.n	8005030 <USB_EPStartXfer+0x1a4>
 8005012:	8823      	ldrh	r3, [r4, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800501a:	b29b      	uxth	r3, r3
 800501c:	8023      	strh	r3, [r4, #0]
 800501e:	8823      	ldrh	r3, [r4, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502a:	b29b      	uxth	r3, r3
 800502c:	8023      	strh	r3, [r4, #0]
 800502e:	e03d      	b.n	80050ac <USB_EPStartXfer+0x220>
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	2b3e      	cmp	r3, #62	; 0x3e
 8005034:	d810      	bhi.n	8005058 <USB_EPStartXfer+0x1cc>
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	623b      	str	r3, [r7, #32]
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <USB_EPStartXfer+0x1c0>
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	3301      	adds	r3, #1
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	b29b      	uxth	r3, r3
 8005050:	029b      	lsls	r3, r3, #10
 8005052:	b29b      	uxth	r3, r3
 8005054:	8023      	strh	r3, [r4, #0]
 8005056:	e029      	b.n	80050ac <USB_EPStartXfer+0x220>
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	623b      	str	r3, [r7, #32]
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <USB_EPStartXfer+0x1e2>
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	3b01      	subs	r3, #1
 800506c:	623b      	str	r3, [r7, #32]
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	b29b      	uxth	r3, r3
 8005072:	029b      	lsls	r3, r3, #10
 8005074:	b29b      	uxth	r3, r3
 8005076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507e:	b29b      	uxth	r3, r3
 8005080:	8023      	strh	r3, [r4, #0]
 8005082:	e013      	b.n	80050ac <USB_EPStartXfer+0x220>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d10f      	bne.n	80050ac <USB_EPStartXfer+0x220>
 800508c:	687c      	ldr	r4, [r7, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005094:	b29b      	uxth	r3, r3
 8005096:	441c      	add	r4, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	4423      	add	r3, r4
 80050a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050a4:	461c      	mov	r4, r3
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	891b      	ldrh	r3, [r3, #8]
 80050b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6959      	ldr	r1, [r3, #20]
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fab4 	bl	800562a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d115      	bne.n	80050f6 <USB_EPStartXfer+0x26a>
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e0:	b29c      	uxth	r4, r3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	4b9a      	ldr	r3, [pc, #616]	; (8005358 <USB_EPStartXfer+0x4cc>)
 80050ee:	4323      	orrs	r3, r4
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]
 80050f4:	e018      	b.n	8005128 <USB_EPStartXfer+0x29c>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d114      	bne.n	8005128 <USB_EPStartXfer+0x29c>
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005114:	b29c      	uxth	r4, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	441a      	add	r2, r3
 8005120:	4b8e      	ldr	r3, [pc, #568]	; (800535c <USB_EPStartXfer+0x4d0>)
 8005122:	4323      	orrs	r3, r4
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513e:	b29c      	uxth	r4, r3
 8005140:	f084 0310 	eor.w	r3, r4, #16
 8005144:	b29c      	uxth	r4, r3
 8005146:	f084 0320 	eor.w	r3, r4, #32
 800514a:	b29c      	uxth	r4, r3
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	441a      	add	r2, r3
 8005156:	4b82      	ldr	r3, [pc, #520]	; (8005360 <USB_EPStartXfer+0x4d4>)
 8005158:	4323      	orrs	r3, r4
 800515a:	b29b      	uxth	r3, r3
 800515c:	8013      	strh	r3, [r2, #0]
 800515e:	e146      	b.n	80053ee <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	429a      	cmp	r2, r3
 800516a:	d909      	bls.n	8005180 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	1ad2      	subs	r2, r2, r3
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	619a      	str	r2, [r3, #24]
 800517e:	e005      	b.n	800518c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2200      	movs	r2, #0
 800518a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	7b1b      	ldrb	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d148      	bne.n	8005226 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005194:	687c      	ldr	r4, [r7, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	441c      	add	r4, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	4423      	add	r3, r4
 80051a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051ac:	461c      	mov	r4, r3
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10e      	bne.n	80051d2 <USB_EPStartXfer+0x346>
 80051b4:	8823      	ldrh	r3, [r4, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8023      	strh	r3, [r4, #0]
 80051c0:	8823      	ldrh	r3, [r4, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	8023      	strh	r3, [r4, #0]
 80051d0:	e0f2      	b.n	80053b8 <USB_EPStartXfer+0x52c>
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	2b3e      	cmp	r3, #62	; 0x3e
 80051d6:	d810      	bhi.n	80051fa <USB_EPStartXfer+0x36e>
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <USB_EPStartXfer+0x362>
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8023      	strh	r3, [r4, #0]
 80051f8:	e0de      	b.n	80053b8 <USB_EPStartXfer+0x52c>
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <USB_EPStartXfer+0x384>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3b01      	subs	r3, #1
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	b29b      	uxth	r3, r3
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	b29b      	uxth	r3, r3
 8005218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005220:	b29b      	uxth	r3, r3
 8005222:	8023      	strh	r3, [r4, #0]
 8005224:	e0c8      	b.n	80053b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d148      	bne.n	80052c0 <USB_EPStartXfer+0x434>
 800522e:	687c      	ldr	r4, [r7, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005236:	b29b      	uxth	r3, r3
 8005238:	441c      	add	r4, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	4423      	add	r3, r4
 8005242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005246:	461c      	mov	r4, r3
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10e      	bne.n	800526c <USB_EPStartXfer+0x3e0>
 800524e:	8823      	ldrh	r3, [r4, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005256:	b29b      	uxth	r3, r3
 8005258:	8023      	strh	r3, [r4, #0]
 800525a:	8823      	ldrh	r3, [r4, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005266:	b29b      	uxth	r3, r3
 8005268:	8023      	strh	r3, [r4, #0]
 800526a:	e03d      	b.n	80052e8 <USB_EPStartXfer+0x45c>
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	2b3e      	cmp	r3, #62	; 0x3e
 8005270:	d810      	bhi.n	8005294 <USB_EPStartXfer+0x408>
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <USB_EPStartXfer+0x3fc>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	3301      	adds	r3, #1
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	b29b      	uxth	r3, r3
 800528c:	029b      	lsls	r3, r3, #10
 800528e:	b29b      	uxth	r3, r3
 8005290:	8023      	strh	r3, [r4, #0]
 8005292:	e029      	b.n	80052e8 <USB_EPStartXfer+0x45c>
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <USB_EPStartXfer+0x41e>
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8023      	strh	r3, [r4, #0]
 80052be:	e013      	b.n	80052e8 <USB_EPStartXfer+0x45c>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10f      	bne.n	80052e8 <USB_EPStartXfer+0x45c>
 80052c8:	687c      	ldr	r4, [r7, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	441c      	add	r4, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4423      	add	r3, r4
 80052dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052e0:	461c      	mov	r4, r3
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8023      	strh	r3, [r4, #0]
 80052e8:	687c      	ldr	r4, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d14e      	bne.n	8005390 <USB_EPStartXfer+0x504>
 80052f2:	687c      	ldr	r4, [r7, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	441c      	add	r4, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	4423      	add	r3, r4
 8005306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800530a:	461c      	mov	r4, r3
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10e      	bne.n	8005330 <USB_EPStartXfer+0x4a4>
 8005312:	8823      	ldrh	r3, [r4, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800531a:	b29b      	uxth	r3, r3
 800531c:	8023      	strh	r3, [r4, #0]
 800531e:	8823      	ldrh	r3, [r4, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29b      	uxth	r3, r3
 800532c:	8023      	strh	r3, [r4, #0]
 800532e:	e043      	b.n	80053b8 <USB_EPStartXfer+0x52c>
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	2b3e      	cmp	r3, #62	; 0x3e
 8005334:	d816      	bhi.n	8005364 <USB_EPStartXfer+0x4d8>
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <USB_EPStartXfer+0x4c0>
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	3301      	adds	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	b29b      	uxth	r3, r3
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	b29b      	uxth	r3, r3
 8005354:	8023      	strh	r3, [r4, #0]
 8005356:	e02f      	b.n	80053b8 <USB_EPStartXfer+0x52c>
 8005358:	ffff80c0 	.word	0xffff80c0
 800535c:	ffffc080 	.word	0xffffc080
 8005360:	ffff8080 	.word	0xffff8080
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <USB_EPStartXfer+0x4ee>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	3b01      	subs	r3, #1
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	b29b      	uxth	r3, r3
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	b29b      	uxth	r3, r3
 8005382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538a:	b29b      	uxth	r3, r3
 800538c:	8023      	strh	r3, [r4, #0]
 800538e:	e013      	b.n	80053b8 <USB_EPStartXfer+0x52c>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d10f      	bne.n	80053b8 <USB_EPStartXfer+0x52c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	441c      	add	r4, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	4423      	add	r3, r4
 80053aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	b29c      	uxth	r4, r3
 80053d0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80053d4:	b29c      	uxth	r4, r3
 80053d6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80053da:	b29c      	uxth	r4, r3
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <USB_EPStartXfer+0x56c>)
 80053e8:	4323      	orrs	r3, r4
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3734      	adds	r7, #52	; 0x34
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd90      	pop	{r4, r7, pc}
 80053f8:	ffff8080 	.word	0xffff8080

080053fc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053fc:	b490      	push	{r4, r7}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d018      	beq.n	8005440 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005424:	b29c      	uxth	r4, r3
 8005426:	f084 0310 	eor.w	r3, r4, #16
 800542a:	b29c      	uxth	r4, r3
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <USB_EPSetStall+0x80>)
 8005438:	4323      	orrs	r3, r4
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]
 800543e:	e017      	b.n	8005470 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	b29c      	uxth	r4, r3
 8005458:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800545c:	b29c      	uxth	r4, r3
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	4b04      	ldr	r3, [pc, #16]	; (800547c <USB_EPSetStall+0x80>)
 800546a:	4323      	orrs	r3, r4
 800546c:	b29b      	uxth	r3, r3
 800546e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bc90      	pop	{r4, r7}
 800547a:	4770      	bx	lr
 800547c:	ffff8080 	.word	0xffff8080

08005480 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005480:	b490      	push	{r4, r7}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	7b1b      	ldrb	r3, [r3, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d17d      	bne.n	800558e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d03d      	beq.n	8005516 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29c      	uxth	r4, r3
 80054a8:	4623      	mov	r3, r4
 80054aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d014      	beq.n	80054dc <USB_EPClearStall+0x5c>
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	b29c      	uxth	r4, r3
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	4b31      	ldr	r3, [pc, #196]	; (800559c <USB_EPClearStall+0x11c>)
 80054d6:	4323      	orrs	r3, r4
 80054d8:	b29b      	uxth	r3, r3
 80054da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	78db      	ldrb	r3, [r3, #3]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d054      	beq.n	800558e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fa:	b29c      	uxth	r4, r3
 80054fc:	f084 0320 	eor.w	r3, r4, #32
 8005500:	b29c      	uxth	r4, r3
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <USB_EPClearStall+0x120>)
 800550e:	4323      	orrs	r3, r4
 8005510:	b29b      	uxth	r3, r3
 8005512:	8013      	strh	r3, [r2, #0]
 8005514:	e03b      	b.n	800558e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29c      	uxth	r4, r3
 8005524:	4623      	mov	r3, r4
 8005526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d014      	beq.n	8005558 <USB_EPClearStall+0xd8>
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	b29c      	uxth	r4, r3
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	4b14      	ldr	r3, [pc, #80]	; (80055a4 <USB_EPClearStall+0x124>)
 8005552:	4323      	orrs	r3, r4
 8005554:	b29b      	uxth	r3, r3
 8005556:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	b29c      	uxth	r4, r3
 8005570:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005574:	b29c      	uxth	r4, r3
 8005576:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800557a:	b29c      	uxth	r4, r3
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	441a      	add	r2, r3
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <USB_EPClearStall+0x120>)
 8005588:	4323      	orrs	r3, r4
 800558a:	b29b      	uxth	r3, r3
 800558c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bc90      	pop	{r4, r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	ffff80c0 	.word	0xffff80c0
 80055a0:	ffff8080 	.word	0xffff8080
 80055a4:	ffffc080 	.word	0xffffc080

080055a8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2280      	movs	r2, #128	; 0x80
 80055be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr

080055e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005604:	b29b      	uxth	r3, r3
 8005606:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005608:	68fb      	ldr	r3, [r7, #12]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800562a:	b480      	push	{r7}
 800562c:	b08d      	sub	sp, #52	; 0x34
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	4611      	mov	r1, r2
 8005636:	461a      	mov	r2, r3
 8005638:	460b      	mov	r3, r1
 800563a:	80fb      	strh	r3, [r7, #6]
 800563c:	4613      	mov	r3, r2
 800563e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005640:	88bb      	ldrh	r3, [r7, #4]
 8005642:	3301      	adds	r3, #1
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	005a      	lsls	r2, r3, #1
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005662:	e01e      	b.n	80056a2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	3301      	adds	r3, #1
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	b29a      	uxth	r2, r3
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	3302      	adds	r3, #2
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	3302      	adds	r3, #2
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	3301      	adds	r3, #1
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	3b01      	subs	r3, #1
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1dd      	bne.n	8005664 <USB_WritePMA+0x3a>
  }
}
 80056a8:	bf00      	nop
 80056aa:	3734      	adds	r7, #52	; 0x34
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b08b      	sub	sp, #44	; 0x2c
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	4611      	mov	r1, r2
 80056be:	461a      	mov	r2, r3
 80056c0:	460b      	mov	r3, r1
 80056c2:	80fb      	strh	r3, [r7, #6]
 80056c4:	4613      	mov	r3, r2
 80056c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056c8:	88bb      	ldrh	r3, [r7, #4]
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056d8:	88fb      	ldrh	r3, [r7, #6]
 80056da:	005a      	lsls	r2, r3, #1
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	e01b      	b.n	8005724 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	3302      	adds	r3, #2
 80056f8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3301      	adds	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	b2da      	uxtb	r2, r3
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	3301      	adds	r3, #1
 8005716:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	3302      	adds	r3, #2
 800571c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	3b01      	subs	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e0      	bne.n	80056ec <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800572a:	88bb      	ldrh	r3, [r7, #4]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	701a      	strb	r2, [r3, #0]
  }
}
 8005746:	bf00      	nop
 8005748:	372c      	adds	r7, #44	; 0x2c
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	7c1b      	ldrb	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d115      	bne.n	8005794 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800576c:	2202      	movs	r2, #2
 800576e:	2181      	movs	r1, #129	; 0x81
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 feae 	bl	80074d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800577c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005780:	2202      	movs	r2, #2
 8005782:	2101      	movs	r1, #1
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fea4 	bl	80074d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005792:	e012      	b.n	80057ba <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005794:	2340      	movs	r3, #64	; 0x40
 8005796:	2202      	movs	r2, #2
 8005798:	2181      	movs	r1, #129	; 0x81
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fe99 	bl	80074d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057a6:	2340      	movs	r3, #64	; 0x40
 80057a8:	2202      	movs	r2, #2
 80057aa:	2101      	movs	r1, #1
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 fe90 	bl	80074d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057ba:	2308      	movs	r3, #8
 80057bc:	2203      	movs	r2, #3
 80057be:	2182      	movs	r1, #130	; 0x82
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fe86 	bl	80074d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057d0:	f001 ffa0 	bl	8007714 <USBD_static_malloc>
 80057d4:	4602      	mov	r2, r0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
 80057ea:	e026      	b.n	800583a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7c1b      	ldrb	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800581c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005820:	2101      	movs	r1, #1
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 ff3f 	bl	80076a6 <USBD_LL_PrepareReceive>
 8005828:	e007      	b.n	800583a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005830:	2340      	movs	r3, #64	; 0x40
 8005832:	2101      	movs	r1, #1
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 ff36 	bl	80076a6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005854:	2181      	movs	r1, #129	; 0x81
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fe61 	bl	800751e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005862:	2101      	movs	r1, #1
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fe5a 	bl	800751e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005872:	2182      	movs	r1, #130	; 0x82
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 fe52 	bl	800751e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00e      	beq.n	80058a8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589a:	4618      	mov	r0, r3
 800589c:	f001 ff46 	bl	800772c <USBD_static_free>
    pdev->pClassData = NULL;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d039      	beq.n	8005950 <USBD_CDC_Setup+0x9e>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d17c      	bne.n	80059da <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	88db      	ldrh	r3, [r3, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d029      	beq.n	800593c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b25b      	sxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da11      	bge.n	8005916 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80058fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	88d2      	ldrh	r2, [r2, #6]
 8005904:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	88db      	ldrh	r3, [r3, #6]
 800590c:	461a      	mov	r2, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 f9f6 	bl	8006d00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005914:	e068      	b.n	80059e8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	785a      	ldrb	r2, [r3, #1]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	88db      	ldrh	r3, [r3, #6]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800592c:	6939      	ldr	r1, [r7, #16]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	88db      	ldrh	r3, [r3, #6]
 8005932:	461a      	mov	r2, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 fa11 	bl	8006d5c <USBD_CtlPrepareRx>
      break;
 800593a:	e055      	b.n	80059e8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	7850      	ldrb	r0, [r2, #1]
 8005948:	2200      	movs	r2, #0
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	4798      	blx	r3
      break;
 800594e:	e04b      	b.n	80059e8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b0a      	cmp	r3, #10
 8005956:	d017      	beq.n	8005988 <USBD_CDC_Setup+0xd6>
 8005958:	2b0b      	cmp	r3, #11
 800595a:	d029      	beq.n	80059b0 <USBD_CDC_Setup+0xfe>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d133      	bne.n	80059c8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005966:	2b03      	cmp	r3, #3
 8005968:	d107      	bne.n	800597a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800596a:	f107 030c 	add.w	r3, r7, #12
 800596e:	2202      	movs	r2, #2
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 f9c4 	bl	8006d00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005978:	e02e      	b.n	80059d8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 f955 	bl	8006c2c <USBD_CtlError>
            ret = USBD_FAIL;
 8005982:	2302      	movs	r3, #2
 8005984:	75fb      	strb	r3, [r7, #23]
          break;
 8005986:	e027      	b.n	80059d8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598e:	2b03      	cmp	r3, #3
 8005990:	d107      	bne.n	80059a2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005992:	f107 030f 	add.w	r3, r7, #15
 8005996:	2201      	movs	r2, #1
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 f9b0 	bl	8006d00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059a0:	e01a      	b.n	80059d8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 f941 	bl	8006c2c <USBD_CtlError>
            ret = USBD_FAIL;
 80059aa:	2302      	movs	r3, #2
 80059ac:	75fb      	strb	r3, [r7, #23]
          break;
 80059ae:	e013      	b.n	80059d8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d00d      	beq.n	80059d6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 f935 	bl	8006c2c <USBD_CtlError>
            ret = USBD_FAIL;
 80059c2:	2302      	movs	r3, #2
 80059c4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059c6:	e006      	b.n	80059d6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 f92e 	bl	8006c2c <USBD_CtlError>
          ret = USBD_FAIL;
 80059d0:	2302      	movs	r3, #2
 80059d2:	75fb      	strb	r3, [r7, #23]
          break;
 80059d4:	e000      	b.n	80059d8 <USBD_CDC_Setup+0x126>
          break;
 80059d6:	bf00      	nop
      }
      break;
 80059d8:	e006      	b.n	80059e8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 f925 	bl	8006c2c <USBD_CtlError>
      ret = USBD_FAIL;
 80059e2:	2302      	movs	r3, #2
 80059e4:	75fb      	strb	r3, [r7, #23]
      break;
 80059e6:	bf00      	nop
  }

  return ret;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a04:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a0c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d037      	beq.n	8005a88 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	331c      	adds	r3, #28
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d026      	beq.n	8005a7c <USBD_CDC_DataIn+0x8a>
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	331c      	adds	r3, #28
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	0152      	lsls	r2, r2, #5
 8005a46:	440a      	add	r2, r1
 8005a48:	3238      	adds	r2, #56	; 0x38
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a50:	fb02 f201 	mul.w	r2, r2, r1
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d110      	bne.n	8005a7c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	331c      	adds	r3, #28
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a6e:	78f9      	ldrb	r1, [r7, #3]
 8005a70:	2300      	movs	r3, #0
 8005a72:	2200      	movs	r2, #0
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fdf3 	bl	8007660 <USBD_LL_Transmit>
 8005a7a:	e003      	b.n	8005a84 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e000      	b.n	8005a8a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 fe1e 	bl	80076ec <USBD_LL_GetRxDataSize>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4798      	blx	r3

    return USBD_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d015      	beq.n	8005b2e <USBD_CDC_EP0_RxReady+0x46>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b08:	2bff      	cmp	r3, #255	; 0xff
 8005b0a:	d010      	beq.n	8005b2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005b1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b22:	b292      	uxth	r2, r2
 8005b24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	22ff      	movs	r2, #255	; 0xff
 8005b2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2243      	movs	r2, #67	; 0x43
 8005b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b46:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000098 	.word	0x20000098

08005b58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2243      	movs	r2, #67	; 0x43
 8005b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b66:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000054 	.word	0x20000054

08005b78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2243      	movs	r2, #67	; 0x43
 8005b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b86:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	200000dc 	.word	0x200000dc

08005b98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005ba6:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000010 	.word	0x20000010

08005bb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr

08005c16 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c26:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01c      	beq.n	8005c90 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d115      	bne.n	8005c8c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2181      	movs	r1, #129	; 0x81
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f001 fcec 	bl	8007660 <USBD_LL_Transmit>

      return USBD_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e002      	b.n	8005c92 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d017      	beq.n	8005ce4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	7c1b      	ldrb	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 fcec 	bl	80076a6 <USBD_LL_PrepareReceive>
 8005cce:	e007      	b.n	8005ce0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cd6:	2340      	movs	r3, #64	; 0x40
 8005cd8:	2101      	movs	r1, #1
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fce3 	bl	80076a6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d02:	2302      	movs	r3, #2
 8005d04:	e01a      	b.n	8005d3c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	79fa      	ldrb	r2, [r7, #7]
 8005d32:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f001 fb57 	bl	80073e8 <USBD_LL_Init>

  return USBD_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d006      	beq.n	8005d66 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e001      	b.n	8005d6a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d66:	2302      	movs	r3, #2
 8005d68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr

08005d76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 fb8c 	bl	800749c <USBD_LL_Start>

  return USBD_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dae:	2302      	movs	r3, #2
 8005db0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00c      	beq.n	8005dd6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	78fa      	ldrb	r2, [r7, #3]
 8005df6:	4611      	mov	r1, r2
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3

  return USBD_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fecb 	bl	8006bb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d00c      	beq.n	8005e5c <USBD_LL_SetupStage+0x56>
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d302      	bcc.n	8005e4c <USBD_LL_SetupStage+0x46>
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d010      	beq.n	8005e6c <USBD_LL_SetupStage+0x66>
 8005e4a:	e017      	b.n	8005e7c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f9cb 	bl	80061f0 <USBD_StdDevReq>
      break;
 8005e5a:	e01a      	b.n	8005e92 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fa2d 	bl	80062c4 <USBD_StdItfReq>
      break;
 8005e6a:	e012      	b.n	8005e92 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fa6b 	bl	8006350 <USBD_StdEPReq>
      break;
 8005e7a:	e00a      	b.n	8005e92 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 fb66 	bl	800755c <USBD_LL_StallEP>
      break;
 8005e90:	bf00      	nop
  }

  return USBD_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d14b      	bne.n	8005f48 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005eb6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d134      	bne.n	8005f2c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d919      	bls.n	8005f02 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d203      	bcs.n	8005ef0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	e002      	b.n	8005ef6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 ff4c 	bl	8006d98 <USBD_CtlContinueRx>
 8005f00:	e038      	b.n	8005f74 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d105      	bne.n	8005f24 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 ff49 	bl	8006dbc <USBD_CtlSendStatus>
 8005f2a:	e023      	b.n	8005f74 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d11e      	bne.n	8005f74 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f001 fb0b 	bl	800755c <USBD_LL_StallEP>
 8005f46:	e015      	b.n	8005f74 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00d      	beq.n	8005f70 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d108      	bne.n	8005f70 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	7afa      	ldrb	r2, [r7, #11]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3
 8005f6e:	e001      	b.n	8005f74 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f70:	2302      	movs	r3, #2
 8005f72:	e000      	b.n	8005f76 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b086      	sub	sp, #24
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	460b      	mov	r3, r1
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f8c:	7afb      	ldrb	r3, [r7, #11]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d17f      	bne.n	8006092 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3314      	adds	r3, #20
 8005f96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d15c      	bne.n	800605c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d915      	bls.n	8005fda <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 feb6 	bl	8006d38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f001 fb67 	bl	80076a6 <USBD_LL_PrepareReceive>
 8005fd8:	e04e      	b.n	8006078 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	6912      	ldr	r2, [r2, #16]
 8005fe2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fe6:	fb02 f201 	mul.w	r2, r2, r1
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d11c      	bne.n	800602a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d316      	bcc.n	800602a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006006:	429a      	cmp	r2, r3
 8006008:	d20f      	bcs.n	800602a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800600a:	2200      	movs	r2, #0
 800600c:	2100      	movs	r1, #0
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 fe92 	bl	8006d38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800601c:	2300      	movs	r3, #0
 800601e:	2200      	movs	r2, #0
 8006020:	2100      	movs	r1, #0
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f001 fb3f 	bl	80076a6 <USBD_LL_PrepareReceive>
 8006028:	e026      	b.n	8006078 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800603c:	2b03      	cmp	r3, #3
 800603e:	d105      	bne.n	800604c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800604c:	2180      	movs	r1, #128	; 0x80
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f001 fa84 	bl	800755c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fec4 	bl	8006de2 <USBD_CtlReceiveStatus>
 800605a:	e00d      	b.n	8006078 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006062:	2b04      	cmp	r3, #4
 8006064:	d004      	beq.n	8006070 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f001 fa72 	bl	800755c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d11d      	bne.n	80060be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fe83 	bl	8005d8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006090:	e015      	b.n	80060be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00d      	beq.n	80060ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d108      	bne.n	80060ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	7afa      	ldrb	r2, [r7, #11]
 80060b2:	4611      	mov	r1, r2
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	4798      	blx	r3
 80060b8:	e001      	b.n	80060be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060ba:	2302      	movs	r3, #2
 80060bc:	e000      	b.n	80060c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060d0:	2340      	movs	r3, #64	; 0x40
 80060d2:	2200      	movs	r2, #0
 80060d4:	2100      	movs	r1, #0
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 f9fb 	bl	80074d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060ec:	2340      	movs	r3, #64	; 0x40
 80060ee:	2200      	movs	r2, #0
 80060f0:	2180      	movs	r1, #128	; 0x80
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 f9ed 	bl	80074d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2240      	movs	r2, #64	; 0x40
 8006102:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6852      	ldr	r2, [r2, #4]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	4611      	mov	r1, r2
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
  }

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2204      	movs	r2, #4
 8006180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr

08006190 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d105      	bne.n	80061ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d10b      	bne.n	80061e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006206:	2b20      	cmp	r3, #32
 8006208:	d004      	beq.n	8006214 <USBD_StdDevReq+0x24>
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d002      	beq.n	8006214 <USBD_StdDevReq+0x24>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <USBD_StdDevReq+0x34>
 8006212:	e04c      	b.n	80062ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
      break;
 8006222:	e049      	b.n	80062b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	2b09      	cmp	r3, #9
 800622a:	d83a      	bhi.n	80062a2 <USBD_StdDevReq+0xb2>
 800622c:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <USBD_StdDevReq+0x44>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006285 	.word	0x08006285
 8006238:	08006299 	.word	0x08006299
 800623c:	080062a3 	.word	0x080062a3
 8006240:	0800628f 	.word	0x0800628f
 8006244:	080062a3 	.word	0x080062a3
 8006248:	08006267 	.word	0x08006267
 800624c:	0800625d 	.word	0x0800625d
 8006250:	080062a3 	.word	0x080062a3
 8006254:	0800627b 	.word	0x0800627b
 8006258:	08006271 	.word	0x08006271
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9d4 	bl	800660c <USBD_GetDescriptor>
          break;
 8006264:	e022      	b.n	80062ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fb37 	bl	80068dc <USBD_SetAddress>
          break;
 800626e:	e01d      	b.n	80062ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fb74 	bl	8006960 <USBD_SetConfig>
          break;
 8006278:	e018      	b.n	80062ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fbfd 	bl	8006a7c <USBD_GetConfig>
          break;
 8006282:	e013      	b.n	80062ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fc2c 	bl	8006ae4 <USBD_GetStatus>
          break;
 800628c:	e00e      	b.n	80062ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fc5a 	bl	8006b4a <USBD_SetFeature>
          break;
 8006296:	e009      	b.n	80062ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fc69 	bl	8006b72 <USBD_ClrFeature>
          break;
 80062a0:	e004      	b.n	80062ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fcc1 	bl	8006c2c <USBD_CtlError>
          break;
 80062aa:	bf00      	nop
      }
      break;
 80062ac:	e004      	b.n	80062b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fcbb 	bl	8006c2c <USBD_CtlError>
      break;
 80062b6:	bf00      	nop
  }

  return ret;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop

080062c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d003      	beq.n	80062e6 <USBD_StdItfReq+0x22>
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d001      	beq.n	80062e6 <USBD_StdItfReq+0x22>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d12a      	bne.n	800633c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ec:	3b01      	subs	r3, #1
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d81d      	bhi.n	800632e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	889b      	ldrh	r3, [r3, #4]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d813      	bhi.n	8006324 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	88db      	ldrh	r3, [r3, #6]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d110      	bne.n	8006338 <USBD_StdItfReq+0x74>
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10d      	bne.n	8006338 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fd4d 	bl	8006dbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006322:	e009      	b.n	8006338 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fc80 	bl	8006c2c <USBD_CtlError>
          break;
 800632c:	e004      	b.n	8006338 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc7b 	bl	8006c2c <USBD_CtlError>
          break;
 8006336:	e000      	b.n	800633a <USBD_StdItfReq+0x76>
          break;
 8006338:	bf00      	nop
      }
      break;
 800633a:	e004      	b.n	8006346 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fc74 	bl	8006c2c <USBD_CtlError>
      break;
 8006344:	bf00      	nop
  }

  return USBD_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	889b      	ldrh	r3, [r3, #4]
 8006362:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800636c:	2b20      	cmp	r3, #32
 800636e:	d004      	beq.n	800637a <USBD_StdEPReq+0x2a>
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d002      	beq.n	800637a <USBD_StdEPReq+0x2a>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <USBD_StdEPReq+0x3a>
 8006378:	e13d      	b.n	80065f6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
      break;
 8006388:	e13a      	b.n	8006600 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006392:	2b20      	cmp	r3, #32
 8006394:	d10a      	bne.n	80063ac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	4798      	blx	r3
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	e12a      	b.n	8006602 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d03e      	beq.n	8006432 <USBD_StdEPReq+0xe2>
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d002      	beq.n	80063be <USBD_StdEPReq+0x6e>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d070      	beq.n	800649e <USBD_StdEPReq+0x14e>
 80063bc:	e115      	b.n	80065ea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d002      	beq.n	80063ce <USBD_StdEPReq+0x7e>
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d015      	beq.n	80063f8 <USBD_StdEPReq+0xa8>
 80063cc:	e02b      	b.n	8006426 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00c      	beq.n	80063ee <USBD_StdEPReq+0x9e>
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	2b80      	cmp	r3, #128	; 0x80
 80063d8:	d009      	beq.n	80063ee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 f8bc 	bl	800755c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 f8b8 	bl	800755c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063ec:	e020      	b.n	8006430 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fc1b 	bl	8006c2c <USBD_CtlError>
              break;
 80063f6:	e01b      	b.n	8006430 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	885b      	ldrh	r3, [r3, #2]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10e      	bne.n	800641e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <USBD_StdEPReq+0xce>
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	2b80      	cmp	r3, #128	; 0x80
 800640a:	d008      	beq.n	800641e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	88db      	ldrh	r3, [r3, #6]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 f89f 	bl	800755c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fccc 	bl	8006dbc <USBD_CtlSendStatus>

              break;
 8006424:	e004      	b.n	8006430 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fbff 	bl	8006c2c <USBD_CtlError>
              break;
 800642e:	bf00      	nop
          }
          break;
 8006430:	e0e0      	b.n	80065f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006438:	2b02      	cmp	r3, #2
 800643a:	d002      	beq.n	8006442 <USBD_StdEPReq+0xf2>
 800643c:	2b03      	cmp	r3, #3
 800643e:	d015      	beq.n	800646c <USBD_StdEPReq+0x11c>
 8006440:	e026      	b.n	8006490 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00c      	beq.n	8006462 <USBD_StdEPReq+0x112>
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b80      	cmp	r3, #128	; 0x80
 800644c:	d009      	beq.n	8006462 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 f882 	bl	800755c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006458:	2180      	movs	r1, #128	; 0x80
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 f87e 	bl	800755c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006460:	e01c      	b.n	800649c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fbe1 	bl	8006c2c <USBD_CtlError>
              break;
 800646a:	e017      	b.n	800649c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	885b      	ldrh	r3, [r3, #2]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d112      	bne.n	800649a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 f889 	bl	800759a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fc97 	bl	8006dbc <USBD_CtlSendStatus>
              }
              break;
 800648e:	e004      	b.n	800649a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fbca 	bl	8006c2c <USBD_CtlError>
              break;
 8006498:	e000      	b.n	800649c <USBD_StdEPReq+0x14c>
              break;
 800649a:	bf00      	nop
          }
          break;
 800649c:	e0aa      	b.n	80065f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d002      	beq.n	80064ae <USBD_StdEPReq+0x15e>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d032      	beq.n	8006512 <USBD_StdEPReq+0x1c2>
 80064ac:	e097      	b.n	80065de <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <USBD_StdEPReq+0x174>
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	2b80      	cmp	r3, #128	; 0x80
 80064b8:	d004      	beq.n	80064c4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fbb5 	bl	8006c2c <USBD_CtlError>
                break;
 80064c2:	e091      	b.n	80065e8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da0b      	bge.n	80064e4 <USBD_StdEPReq+0x194>
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	3310      	adds	r3, #16
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	e00b      	b.n	80064fc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	3304      	adds	r3, #4
 80064fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2202      	movs	r2, #2
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fbf8 	bl	8006d00 <USBD_CtlSendData>
              break;
 8006510:	e06a      	b.n	80065e8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006516:	2b00      	cmp	r3, #0
 8006518:	da11      	bge.n	800653e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	f003 020f 	and.w	r2, r3, #15
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	3318      	adds	r3, #24
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d117      	bne.n	8006564 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fb78 	bl	8006c2c <USBD_CtlError>
                  break;
 800653c:	e054      	b.n	80065e8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb65 	bl	8006c2c <USBD_CtlError>
                  break;
 8006562:	e041      	b.n	80065e8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006568:	2b00      	cmp	r3, #0
 800656a:	da0b      	bge.n	8006584 <USBD_StdEPReq+0x234>
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	3310      	adds	r3, #16
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	e00b      	b.n	800659c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	3304      	adds	r3, #4
 800659c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <USBD_StdEPReq+0x25a>
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d103      	bne.n	80065b2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e00e      	b.n	80065d0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 f80e 	bl	80075d8 <USBD_LL_IsStallEP>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	e002      	b.n	80065d0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2202      	movs	r2, #2
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fb92 	bl	8006d00 <USBD_CtlSendData>
              break;
 80065dc:	e004      	b.n	80065e8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fb23 	bl	8006c2c <USBD_CtlError>
              break;
 80065e6:	bf00      	nop
          }
          break;
 80065e8:	e004      	b.n	80065f4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fb1d 	bl	8006c2c <USBD_CtlError>
          break;
 80065f2:	bf00      	nop
      }
      break;
 80065f4:	e004      	b.n	8006600 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb17 	bl	8006c2c <USBD_CtlError>
      break;
 80065fe:	bf00      	nop
  }

  return ret;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	885b      	ldrh	r3, [r3, #2]
 8006626:	0a1b      	lsrs	r3, r3, #8
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	2b06      	cmp	r3, #6
 800662e:	f200 8128 	bhi.w	8006882 <USBD_GetDescriptor+0x276>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <USBD_GetDescriptor+0x2c>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006655 	.word	0x08006655
 800663c:	0800666d 	.word	0x0800666d
 8006640:	080066ad 	.word	0x080066ad
 8006644:	08006883 	.word	0x08006883
 8006648:	08006883 	.word	0x08006883
 800664c:	08006823 	.word	0x08006823
 8006650:	0800684f 	.word	0x0800684f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	7c12      	ldrb	r2, [r2, #16]
 8006660:	f107 0108 	add.w	r1, r7, #8
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
 8006668:	60f8      	str	r0, [r7, #12]
      break;
 800666a:	e112      	b.n	8006892 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7c1b      	ldrb	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10d      	bne.n	8006690 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	f107 0208 	add.w	r2, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800668e:	e100      	b.n	8006892 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	f107 0208 	add.w	r2, r7, #8
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
 80066a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	2202      	movs	r2, #2
 80066a8:	701a      	strb	r2, [r3, #0]
      break;
 80066aa:	e0f2      	b.n	8006892 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	885b      	ldrh	r3, [r3, #2]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	f200 80ac 	bhi.w	8006810 <USBD_GetDescriptor+0x204>
 80066b8:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <USBD_GetDescriptor+0xb4>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066d9 	.word	0x080066d9
 80066c4:	0800670d 	.word	0x0800670d
 80066c8:	08006741 	.word	0x08006741
 80066cc:	08006775 	.word	0x08006775
 80066d0:	080067a9 	.word	0x080067a9
 80066d4:	080067dd 	.word	0x080067dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fa:	e091      	b.n	8006820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa94 	bl	8006c2c <USBD_CtlError>
            err++;
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	3301      	adds	r3, #1
 8006708:	72fb      	strb	r3, [r7, #11]
          break;
 800670a:	e089      	b.n	8006820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672e:	e077      	b.n	8006820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa7a 	bl	8006c2c <USBD_CtlError>
            err++;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	3301      	adds	r3, #1
 800673c:	72fb      	strb	r3, [r7, #11]
          break;
 800673e:	e06f      	b.n	8006820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	7c12      	ldrb	r2, [r2, #16]
 8006758:	f107 0108 	add.w	r1, r7, #8
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006762:	e05d      	b.n	8006820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa60 	bl	8006c2c <USBD_CtlError>
            err++;
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	3301      	adds	r3, #1
 8006770:	72fb      	strb	r3, [r7, #11]
          break;
 8006772:	e055      	b.n	8006820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006796:	e043      	b.n	8006820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa46 	bl	8006c2c <USBD_CtlError>
            err++;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	3301      	adds	r3, #1
 80067a4:	72fb      	strb	r3, [r7, #11]
          break;
 80067a6:	e03b      	b.n	8006820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ca:	e029      	b.n	8006820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa2c 	bl	8006c2c <USBD_CtlError>
            err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
          break;
 80067da:	e021      	b.n	8006820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	7c12      	ldrb	r2, [r2, #16]
 80067f4:	f107 0108 	add.w	r1, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fe:	e00f      	b.n	8006820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa12 	bl	8006c2c <USBD_CtlError>
            err++;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3301      	adds	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]
          break;
 800680e:	e007      	b.n	8006820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa0a 	bl	8006c2c <USBD_CtlError>
          err++;
 8006818:	7afb      	ldrb	r3, [r7, #11]
 800681a:	3301      	adds	r3, #1
 800681c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800681e:	e038      	b.n	8006892 <USBD_GetDescriptor+0x286>
 8006820:	e037      	b.n	8006892 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	7c1b      	ldrb	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	f107 0208 	add.w	r2, r7, #8
 8006836:	4610      	mov	r0, r2
 8006838:	4798      	blx	r3
 800683a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800683c:	e029      	b.n	8006892 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9f3 	bl	8006c2c <USBD_CtlError>
        err++;
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	3301      	adds	r3, #1
 800684a:	72fb      	strb	r3, [r7, #11]
      break;
 800684c:	e021      	b.n	8006892 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	7c1b      	ldrb	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10d      	bne.n	8006872 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	f107 0208 	add.w	r2, r7, #8
 8006862:	4610      	mov	r0, r2
 8006864:	4798      	blx	r3
 8006866:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	2207      	movs	r2, #7
 800686e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006870:	e00f      	b.n	8006892 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f9d9 	bl	8006c2c <USBD_CtlError>
        err++;
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	3301      	adds	r3, #1
 800687e:	72fb      	strb	r3, [r7, #11]
      break;
 8006880:	e007      	b.n	8006892 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f9d1 	bl	8006c2c <USBD_CtlError>
      err++;
 800688a:	7afb      	ldrb	r3, [r7, #11]
 800688c:	3301      	adds	r3, #1
 800688e:	72fb      	strb	r3, [r7, #11]
      break;
 8006890:	bf00      	nop
  }

  if (err != 0U)
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11c      	bne.n	80068d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006898:	893b      	ldrh	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d011      	beq.n	80068c2 <USBD_GetDescriptor+0x2b6>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	88da      	ldrh	r2, [r3, #6]
 80068aa:	893b      	ldrh	r3, [r7, #8]
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bf28      	it	cs
 80068b0:	4613      	movcs	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068b6:	893b      	ldrh	r3, [r7, #8]
 80068b8:	461a      	mov	r2, r3
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa1f 	bl	8006d00 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	88db      	ldrh	r3, [r3, #6]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa76 	bl	8006dbc <USBD_CtlSendStatus>
 80068d0:	e000      	b.n	80068d4 <USBD_GetDescriptor+0x2c8>
    return;
 80068d2:	bf00      	nop
    }
  }
}
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop

080068dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	889b      	ldrh	r3, [r3, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d130      	bne.n	8006950 <USBD_SetAddress+0x74>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	88db      	ldrh	r3, [r3, #6]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d12c      	bne.n	8006950 <USBD_SetAddress+0x74>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	885b      	ldrh	r3, [r3, #2]
 80068fa:	2b7f      	cmp	r3, #127	; 0x7f
 80068fc:	d828      	bhi.n	8006950 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	885b      	ldrh	r3, [r3, #2]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006908:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006910:	2b03      	cmp	r3, #3
 8006912:	d104      	bne.n	800691e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f988 	bl	8006c2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691c:	e01c      	b.n	8006958 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7bfa      	ldrb	r2, [r7, #15]
 8006922:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fe79 	bl	8007622 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fa43 	bl	8006dbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006944:	e008      	b.n	8006958 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694e:	e003      	b.n	8006958 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f96a 	bl	8006c2c <USBD_CtlError>
  }
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	4b41      	ldr	r3, [pc, #260]	; (8006a78 <USBD_SetConfig+0x118>)
 8006972:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006974:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <USBD_SetConfig+0x118>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d904      	bls.n	8006986 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f954 	bl	8006c2c <USBD_CtlError>
 8006984:	e075      	b.n	8006a72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698c:	2b02      	cmp	r3, #2
 800698e:	d002      	beq.n	8006996 <USBD_SetConfig+0x36>
 8006990:	2b03      	cmp	r3, #3
 8006992:	d023      	beq.n	80069dc <USBD_SetConfig+0x7c>
 8006994:	e062      	b.n	8006a5c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006996:	4b38      	ldr	r3, [pc, #224]	; (8006a78 <USBD_SetConfig+0x118>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01a      	beq.n	80069d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800699e:	4b36      	ldr	r3, [pc, #216]	; (8006a78 <USBD_SetConfig+0x118>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2203      	movs	r2, #3
 80069ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069b0:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <USBD_SetConfig+0x118>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff f9f3 	bl	8005da2 <USBD_SetClassConfig>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d104      	bne.n	80069cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f931 	bl	8006c2c <USBD_CtlError>
            return;
 80069ca:	e052      	b.n	8006a72 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f9f5 	bl	8006dbc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069d2:	e04e      	b.n	8006a72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f9f1 	bl	8006dbc <USBD_CtlSendStatus>
        break;
 80069da:	e04a      	b.n	8006a72 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80069dc:	4b26      	ldr	r3, [pc, #152]	; (8006a78 <USBD_SetConfig+0x118>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d112      	bne.n	8006a0a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80069ec:	4b22      	ldr	r3, [pc, #136]	; (8006a78 <USBD_SetConfig+0x118>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80069f6:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <USBD_SetConfig+0x118>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff f9ef 	bl	8005de0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9da 	bl	8006dbc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a08:	e033      	b.n	8006a72 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <USBD_SetConfig+0x118>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d01d      	beq.n	8006a54 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff f9dd 	bl	8005de0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <USBD_SetConfig+0x118>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a30:	4b11      	ldr	r3, [pc, #68]	; (8006a78 <USBD_SetConfig+0x118>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff f9b3 	bl	8005da2 <USBD_SetClassConfig>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d104      	bne.n	8006a4c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f8f1 	bl	8006c2c <USBD_CtlError>
            return;
 8006a4a:	e012      	b.n	8006a72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f9b5 	bl	8006dbc <USBD_CtlSendStatus>
        break;
 8006a52:	e00e      	b.n	8006a72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f9b1 	bl	8006dbc <USBD_CtlSendStatus>
        break;
 8006a5a:	e00a      	b.n	8006a72 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f8e4 	bl	8006c2c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a64:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <USBD_SetConfig+0x118>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff f9b8 	bl	8005de0 <USBD_ClrClassConfig>
        break;
 8006a70:	bf00      	nop
    }
  }
}
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	2000019d 	.word	0x2000019d

08006a7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	88db      	ldrh	r3, [r3, #6]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d004      	beq.n	8006a98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f8cb 	bl	8006c2c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a96:	e021      	b.n	8006adc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	db17      	blt.n	8006ad2 <USBD_GetConfig+0x56>
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd02      	ble.n	8006aac <USBD_GetConfig+0x30>
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d00b      	beq.n	8006ac2 <USBD_GetConfig+0x46>
 8006aaa:	e012      	b.n	8006ad2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f920 	bl	8006d00 <USBD_CtlSendData>
        break;
 8006ac0:	e00c      	b.n	8006adc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f918 	bl	8006d00 <USBD_CtlSendData>
        break;
 8006ad0:	e004      	b.n	8006adc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f8a9 	bl	8006c2c <USBD_CtlError>
        break;
 8006ada:	bf00      	nop
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af4:	3b01      	subs	r3, #1
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d81e      	bhi.n	8006b38 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d004      	beq.n	8006b0c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f891 	bl	8006c2c <USBD_CtlError>
        break;
 8006b0a:	e01a      	b.n	8006b42 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f043 0202 	orr.w	r2, r3, #2
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f8e5 	bl	8006d00 <USBD_CtlSendData>
      break;
 8006b36:	e004      	b.n	8006b42 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f876 	bl	8006c2c <USBD_CtlError>
      break;
 8006b40:	bf00      	nop
  }
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	885b      	ldrh	r3, [r3, #2]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d106      	bne.n	8006b6a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f929 	bl	8006dbc <USBD_CtlSendStatus>
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b82:	3b01      	subs	r3, #1
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d80b      	bhi.n	8006ba0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	885b      	ldrh	r3, [r3, #2]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d10c      	bne.n	8006baa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f90f 	bl	8006dbc <USBD_CtlSendStatus>
      }
      break;
 8006b9e:	e004      	b.n	8006baa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f842 	bl	8006c2c <USBD_CtlError>
      break;
 8006ba8:	e000      	b.n	8006bac <USBD_ClrFeature+0x3a>
      break;
 8006baa:	bf00      	nop
  }
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781a      	ldrb	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	785a      	ldrb	r2, [r3, #1]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	3303      	adds	r3, #3
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	3304      	adds	r3, #4
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	3305      	adds	r3, #5
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	4413      	add	r3, r2
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	3306      	adds	r3, #6
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	3307      	adds	r3, #7
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	80da      	strh	r2, [r3, #6]

}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c36:	2180      	movs	r1, #128	; 0x80
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fc8f 	bl	800755c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c3e:	2100      	movs	r1, #0
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fc8b 	bl	800755c <USBD_LL_StallEP>
}
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d032      	beq.n	8006cca <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f834 	bl	8006cd2 <USBD_GetLen>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	75fa      	strb	r2, [r7, #23]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4413      	add	r3, r2
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	7812      	ldrb	r2, [r2, #0]
 8006c88:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	75fa      	strb	r2, [r7, #23]
 8006c90:	461a      	mov	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4413      	add	r3, r2
 8006c96:	2203      	movs	r2, #3
 8006c98:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c9a:	e012      	b.n	8006cc2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	60fa      	str	r2, [r7, #12]
 8006ca2:	7dfa      	ldrb	r2, [r7, #23]
 8006ca4:	1c51      	adds	r1, r2, #1
 8006ca6:	75f9      	strb	r1, [r7, #23]
 8006ca8:	4611      	mov	r1, r2
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	440a      	add	r2, r1
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	75fa      	strb	r2, [r7, #23]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e8      	bne.n	8006c9c <USBD_GetString+0x4e>
    }
  }
}
 8006cca:	bf00      	nop
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006cde:	e005      	b.n	8006cec <USBD_GetLen+0x1a>
  {
    len++;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f5      	bne.n	8006ce0 <USBD_GetLen+0xe>
  }

  return len;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc80      	pop	{r7}
 8006cfe:	4770      	bx	lr

08006d00 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d16:	88fa      	ldrh	r2, [r7, #6]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d1c:	88fa      	ldrh	r2, [r7, #6]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fc99 	bl	8007660 <USBD_LL_Transmit>

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fc87 	bl	8007660 <USBD_LL_Transmit>

  return USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d72:	88fa      	ldrh	r2, [r7, #6]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	2100      	movs	r1, #0
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fc8c 	bl	80076a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	2100      	movs	r1, #0
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fc7a 	bl	80076a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fc44 	bl	8007660 <USBD_LL_Transmit>

  return USBD_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2205      	movs	r2, #5
 8006dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006df2:	2300      	movs	r3, #0
 8006df4:	2200      	movs	r2, #0
 8006df6:	2100      	movs	r1, #0
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc54 	bl	80076a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4912      	ldr	r1, [pc, #72]	; (8006e58 <MX_USB_DEVICE_Init+0x50>)
 8006e10:	4812      	ldr	r0, [pc, #72]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e12:	f7fe ff6c 	bl	8005cee <USBD_Init>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e1c:	f7fa ffce 	bl	8001dbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e20:	490f      	ldr	r1, [pc, #60]	; (8006e60 <MX_USB_DEVICE_Init+0x58>)
 8006e22:	480e      	ldr	r0, [pc, #56]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e24:	f7fe ff8e 	bl	8005d44 <USBD_RegisterClass>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e2e:	f7fa ffc5 	bl	8001dbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e32:	490c      	ldr	r1, [pc, #48]	; (8006e64 <MX_USB_DEVICE_Init+0x5c>)
 8006e34:	4809      	ldr	r0, [pc, #36]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e36:	f7fe febf 	bl	8005bb8 <USBD_CDC_RegisterInterface>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e40:	f7fa ffbc 	bl	8001dbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e44:	4805      	ldr	r0, [pc, #20]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e46:	f7fe ff96 	bl	8005d76 <USBD_Start>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e50:	f7fa ffb4 	bl	8001dbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e54:	bf00      	nop
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000130 	.word	0x20000130
 8006e5c:	20000518 	.word	0x20000518
 8006e60:	2000001c 	.word	0x2000001c
 8006e64:	20000120 	.word	0x20000120

08006e68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4905      	ldr	r1, [pc, #20]	; (8006e84 <CDC_Init_FS+0x1c>)
 8006e70:	4805      	ldr	r0, [pc, #20]	; (8006e88 <CDC_Init_FS+0x20>)
 8006e72:	f7fe feb7 	bl	8005be4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e76:	4905      	ldr	r1, [pc, #20]	; (8006e8c <CDC_Init_FS+0x24>)
 8006e78:	4803      	ldr	r0, [pc, #12]	; (8006e88 <CDC_Init_FS+0x20>)
 8006e7a:	f7fe fecc 	bl	8005c16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000bd0 	.word	0x20000bd0
 8006e88:	20000518 	.word	0x20000518
 8006e8c:	200007dc 	.word	0x200007dc

08006e90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr
	...

08006ea0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
 8006eac:	4613      	mov	r3, r2
 8006eae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	2b23      	cmp	r3, #35	; 0x23
 8006eb4:	d84a      	bhi.n	8006f4c <CDC_Control_FS+0xac>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <CDC_Control_FS+0x1c>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006f4d 	.word	0x08006f4d
 8006ec0:	08006f4d 	.word	0x08006f4d
 8006ec4:	08006f4d 	.word	0x08006f4d
 8006ec8:	08006f4d 	.word	0x08006f4d
 8006ecc:	08006f4d 	.word	0x08006f4d
 8006ed0:	08006f4d 	.word	0x08006f4d
 8006ed4:	08006f4d 	.word	0x08006f4d
 8006ed8:	08006f4d 	.word	0x08006f4d
 8006edc:	08006f4d 	.word	0x08006f4d
 8006ee0:	08006f4d 	.word	0x08006f4d
 8006ee4:	08006f4d 	.word	0x08006f4d
 8006ee8:	08006f4d 	.word	0x08006f4d
 8006eec:	08006f4d 	.word	0x08006f4d
 8006ef0:	08006f4d 	.word	0x08006f4d
 8006ef4:	08006f4d 	.word	0x08006f4d
 8006ef8:	08006f4d 	.word	0x08006f4d
 8006efc:	08006f4d 	.word	0x08006f4d
 8006f00:	08006f4d 	.word	0x08006f4d
 8006f04:	08006f4d 	.word	0x08006f4d
 8006f08:	08006f4d 	.word	0x08006f4d
 8006f0c:	08006f4d 	.word	0x08006f4d
 8006f10:	08006f4d 	.word	0x08006f4d
 8006f14:	08006f4d 	.word	0x08006f4d
 8006f18:	08006f4d 	.word	0x08006f4d
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f4d 	.word	0x08006f4d
 8006f30:	08006f4d 	.word	0x08006f4d
 8006f34:	08006f4d 	.word	0x08006f4d
 8006f38:	08006f4d 	.word	0x08006f4d
 8006f3c:	08006f4d 	.word	0x08006f4d
 8006f40:	08006f4d 	.word	0x08006f4d
 8006f44:	08006f4d 	.word	0x08006f4d
 8006f48:	08006f4d 	.word	0x08006f4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f4c:	bf00      	nop
  }

  return (USBD_OK);
 8006f4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop

08006f5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4823      	ldr	r0, [pc, #140]	; (8006ff8 <CDC_Receive_FS+0x9c>)
 8006f6a:	f7fe fe54 	bl	8005c16 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f6e:	4822      	ldr	r0, [pc, #136]	; (8006ff8 <CDC_Receive_FS+0x9c>)
 8006f70:	f7fe fe93 	bl	8005c9a <USBD_CDC_ReceivePacket>

  for (uint8_t i = 0; i < *Len; i++)
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
 8006f78:	e009      	b.n	8006f8e <CDC_Receive_FS+0x32>
  {
	  receivedData[i] = Buf[i];
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	441a      	add	r2, r3
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	7811      	ldrb	r1, [r2, #0]
 8006f84:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <CDC_Receive_FS+0xa0>)
 8006f86:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < *Len; i++)
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	73fb      	strb	r3, [r7, #15]
 8006f8e:	7bfa      	ldrb	r2, [r7, #15]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3f0      	bcc.n	8006f7a <CDC_Receive_FS+0x1e>
  }

  motor[0].newAbsoluteTargetUSB = (receivedData[0] << 8) | (receivedData[1]);
 8006f98:	4b18      	ldr	r3, [pc, #96]	; (8006ffc <CDC_Receive_FS+0xa0>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	b21a      	sxth	r2, r3
 8006fa0:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <CDC_Receive_FS+0xa0>)
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	b21b      	sxth	r3, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b21a      	sxth	r2, r3
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <CDC_Receive_FS+0xa4>)
 8006fac:	859a      	strh	r2, [r3, #44]	; 0x2c
  motor[1].newAbsoluteTargetUSB = (receivedData[2] << 8) | (receivedData[3]);
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <CDC_Receive_FS+0xa0>)
 8006fb0:	789b      	ldrb	r3, [r3, #2]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <CDC_Receive_FS+0xa0>)
 8006fb8:	78db      	ldrb	r3, [r3, #3]
 8006fba:	b21b      	sxth	r3, r3
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	b21a      	sxth	r2, r3
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <CDC_Receive_FS+0xa4>)
 8006fc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  motor[2].newAbsoluteTargetUSB = (receivedData[4] << 8) | (receivedData[5]);
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <CDC_Receive_FS+0xa0>)
 8006fc8:	791b      	ldrb	r3, [r3, #4]
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	b21a      	sxth	r2, r3
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <CDC_Receive_FS+0xa0>)
 8006fd0:	795b      	ldrb	r3, [r3, #5]
 8006fd2:	b21b      	sxth	r3, r3
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	b21a      	sxth	r2, r3
 8006fd8:	4b09      	ldr	r3, [pc, #36]	; (8007000 <CDC_Receive_FS+0xa4>)
 8006fda:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

  newCommandAvailable = 1;
 8006fde:	4b09      	ldr	r3, [pc, #36]	; (8007004 <CDC_Receive_FS+0xa8>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]

  CDC_Transmit_FS(&receivedData[0], 6);
 8006fe4:	2106      	movs	r1, #6
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <CDC_Receive_FS+0xa0>)
 8006fe8:	f000 f80e 	bl	8007008 <CDC_Transmit_FS>
  return (USBD_OK);
 8006fec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000518 	.word	0x20000518
 8006ffc:	20000bc4 	.word	0x20000bc4
 8007000:	20000484 	.word	0x20000484
 8007004:	20000440 	.word	0x20000440

08007008 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007018:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <CDC_Transmit_FS+0x48>)
 800701a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800702a:	2301      	movs	r3, #1
 800702c:	e00b      	b.n	8007046 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800702e:	887b      	ldrh	r3, [r7, #2]
 8007030:	461a      	mov	r2, r3
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	4806      	ldr	r0, [pc, #24]	; (8007050 <CDC_Transmit_FS+0x48>)
 8007036:	f7fe fdd5 	bl	8005be4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800703a:	4805      	ldr	r0, [pc, #20]	; (8007050 <CDC_Transmit_FS+0x48>)
 800703c:	f7fe fdfe 	bl	8005c3c <USBD_CDC_TransmitPacket>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000518 	.word	0x20000518

08007054 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2212      	movs	r2, #18
 8007064:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007066:	4b03      	ldr	r3, [pc, #12]	; (8007074 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	2000014c 	.word	0x2000014c

08007078 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2204      	movs	r2, #4
 8007088:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800708a:	4b03      	ldr	r3, [pc, #12]	; (8007098 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000160 	.word	0x20000160

0800709c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	6039      	str	r1, [r7, #0]
 80070a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	4907      	ldr	r1, [pc, #28]	; (80070d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80070b2:	4808      	ldr	r0, [pc, #32]	; (80070d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80070b4:	f7ff fdcb 	bl	8006c4e <USBD_GetString>
 80070b8:	e004      	b.n	80070c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	4904      	ldr	r1, [pc, #16]	; (80070d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80070be:	4805      	ldr	r0, [pc, #20]	; (80070d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80070c0:	f7ff fdc5 	bl	8006c4e <USBD_GetString>
  }
  return USBD_StrDesc;
 80070c4:	4b02      	ldr	r3, [pc, #8]	; (80070d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000fc0 	.word	0x20000fc0
 80070d4:	08007830 	.word	0x08007830

080070d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	6039      	str	r1, [r7, #0]
 80070e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	4904      	ldr	r1, [pc, #16]	; (80070f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070e8:	4804      	ldr	r0, [pc, #16]	; (80070fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070ea:	f7ff fdb0 	bl	8006c4e <USBD_GetString>
  return USBD_StrDesc;
 80070ee:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20000fc0 	.word	0x20000fc0
 80070fc:	0800784c 	.word	0x0800784c

08007100 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	221a      	movs	r2, #26
 8007110:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007112:	f000 f843 	bl	800719c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007116:	4b02      	ldr	r3, [pc, #8]	; (8007120 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000164 	.word	0x20000164

08007124 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	6039      	str	r1, [r7, #0]
 800712e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d105      	bne.n	8007142 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4907      	ldr	r1, [pc, #28]	; (8007158 <USBD_FS_ConfigStrDescriptor+0x34>)
 800713a:	4808      	ldr	r0, [pc, #32]	; (800715c <USBD_FS_ConfigStrDescriptor+0x38>)
 800713c:	f7ff fd87 	bl	8006c4e <USBD_GetString>
 8007140:	e004      	b.n	800714c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4904      	ldr	r1, [pc, #16]	; (8007158 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007146:	4805      	ldr	r0, [pc, #20]	; (800715c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007148:	f7ff fd81 	bl	8006c4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800714c:	4b02      	ldr	r3, [pc, #8]	; (8007158 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000fc0 	.word	0x20000fc0
 800715c:	08007860 	.word	0x08007860

08007160 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	4907      	ldr	r1, [pc, #28]	; (8007194 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007176:	4808      	ldr	r0, [pc, #32]	; (8007198 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007178:	f7ff fd69 	bl	8006c4e <USBD_GetString>
 800717c:	e004      	b.n	8007188 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	4904      	ldr	r1, [pc, #16]	; (8007194 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007182:	4805      	ldr	r0, [pc, #20]	; (8007198 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007184:	f7ff fd63 	bl	8006c4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000fc0 	.word	0x20000fc0
 8007198:	0800786c 	.word	0x0800786c

0800719c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <Get_SerialNum+0x44>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071a8:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <Get_SerialNum+0x48>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071ae:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <Get_SerialNum+0x4c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071c2:	2208      	movs	r2, #8
 80071c4:	4909      	ldr	r1, [pc, #36]	; (80071ec <Get_SerialNum+0x50>)
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f814 	bl	80071f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071cc:	2204      	movs	r2, #4
 80071ce:	4908      	ldr	r1, [pc, #32]	; (80071f0 <Get_SerialNum+0x54>)
 80071d0:	68b8      	ldr	r0, [r7, #8]
 80071d2:	f000 f80f 	bl	80071f4 <IntToUnicode>
  }
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	1ffff7e8 	.word	0x1ffff7e8
 80071e4:	1ffff7ec 	.word	0x1ffff7ec
 80071e8:	1ffff7f0 	.word	0x1ffff7f0
 80071ec:	20000166 	.word	0x20000166
 80071f0:	20000176 	.word	0x20000176

080071f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007206:	2300      	movs	r3, #0
 8007208:	75fb      	strb	r3, [r7, #23]
 800720a:	e027      	b.n	800725c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	0f1b      	lsrs	r3, r3, #28
 8007210:	2b09      	cmp	r3, #9
 8007212:	d80b      	bhi.n	800722c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	0f1b      	lsrs	r3, r3, #28
 8007218:	b2da      	uxtb	r2, r3
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	4619      	mov	r1, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	440b      	add	r3, r1
 8007224:	3230      	adds	r2, #48	; 0x30
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	e00a      	b.n	8007242 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	0f1b      	lsrs	r3, r3, #28
 8007230:	b2da      	uxtb	r2, r3
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	4619      	mov	r1, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	440b      	add	r3, r1
 800723c:	3237      	adds	r2, #55	; 0x37
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	3301      	adds	r3, #1
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4413      	add	r3, r2
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	3301      	adds	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
 800725c:	7dfa      	ldrb	r2, [r7, #23]
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	429a      	cmp	r2, r3
 8007262:	d3d3      	bcc.n	800720c <IntToUnicode+0x18>
  }
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr
	...

08007270 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a0d      	ldr	r2, [pc, #52]	; (80072b4 <HAL_PCD_MspInit+0x44>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d113      	bne.n	80072aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <HAL_PCD_MspInit+0x48>)
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	4a0c      	ldr	r2, [pc, #48]	; (80072b8 <HAL_PCD_MspInit+0x48>)
 8007288:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800728c:	61d3      	str	r3, [r2, #28]
 800728e:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <HAL_PCD_MspInit+0x48>)
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	2014      	movs	r0, #20
 80072a0:	f7fb f831 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80072a4:	2014      	movs	r0, #20
 80072a6:	f7fb f84a 	bl	800233e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40005c00 	.word	0x40005c00
 80072b8:	40021000 	.word	0x40021000

080072bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7fe fd97 	bl	8005e06 <USBD_LL_SetupStage>
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80072f2:	78fb      	ldrb	r3, [r7, #3]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	015b      	lsls	r3, r3, #5
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	4619      	mov	r1, r3
 8007304:	f7fe fdca 	bl	8005e9c <USBD_LL_DataOutStage>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	015b      	lsls	r3, r3, #5
 8007328:	4413      	add	r3, r2
 800732a:	333c      	adds	r3, #60	; 0x3c
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	4619      	mov	r1, r3
 8007332:	f7fe fe24 	bl	8005f7e <USBD_LL_DataInStage>
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800734c:	4618      	mov	r0, r3
 800734e:	f7fe ff34 	bl	80061ba <USBD_LL_SOF>
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007362:	2301      	movs	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d001      	beq.n	8007372 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800736e:	f7fa fd25 	bl	8001dbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007378:	7bfa      	ldrb	r2, [r7, #15]
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fee4 	bl	800614a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe fe9d 	bl	80060c8 <USBD_LL_Reset>
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fede 	bl	8006168 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <HAL_PCD_SuspendCallback+0x30>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	4a03      	ldr	r2, [pc, #12]	; (80073c8 <HAL_PCD_SuspendCallback+0x30>)
 80073ba:	f043 0306 	orr.w	r3, r3, #6
 80073be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	e000ed00 	.word	0xe000ed00

080073cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fed8 	bl	8006190 <USBD_LL_Resume>
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80073f0:	4a28      	ldr	r2, [pc, #160]	; (8007494 <USBD_LL_Init+0xac>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a26      	ldr	r2, [pc, #152]	; (8007494 <USBD_LL_Init+0xac>)
 80073fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007400:	4b24      	ldr	r3, [pc, #144]	; (8007494 <USBD_LL_Init+0xac>)
 8007402:	4a25      	ldr	r2, [pc, #148]	; (8007498 <USBD_LL_Init+0xb0>)
 8007404:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007406:	4b23      	ldr	r3, [pc, #140]	; (8007494 <USBD_LL_Init+0xac>)
 8007408:	2208      	movs	r2, #8
 800740a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800740c:	4b21      	ldr	r3, [pc, #132]	; (8007494 <USBD_LL_Init+0xac>)
 800740e:	2202      	movs	r2, #2
 8007410:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007412:	4b20      	ldr	r3, [pc, #128]	; (8007494 <USBD_LL_Init+0xac>)
 8007414:	2200      	movs	r2, #0
 8007416:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007418:	4b1e      	ldr	r3, [pc, #120]	; (8007494 <USBD_LL_Init+0xac>)
 800741a:	2200      	movs	r2, #0
 800741c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <USBD_LL_Init+0xac>)
 8007420:	2200      	movs	r2, #0
 8007422:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007424:	481b      	ldr	r0, [pc, #108]	; (8007494 <USBD_LL_Init+0xac>)
 8007426:	f7fb f92f 	bl	8002688 <HAL_PCD_Init>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007430:	f7fa fcc4 	bl	8001dbc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800743a:	2318      	movs	r3, #24
 800743c:	2200      	movs	r2, #0
 800743e:	2100      	movs	r1, #0
 8007440:	f7fb ffc8 	bl	80033d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800744a:	2358      	movs	r3, #88	; 0x58
 800744c:	2200      	movs	r2, #0
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	f7fb ffc0 	bl	80033d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800745a:	23c0      	movs	r3, #192	; 0xc0
 800745c:	2200      	movs	r2, #0
 800745e:	2181      	movs	r1, #129	; 0x81
 8007460:	f7fb ffb8 	bl	80033d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800746a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800746e:	2200      	movs	r2, #0
 8007470:	2101      	movs	r1, #1
 8007472:	f7fb ffaf 	bl	80033d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800747c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007480:	2200      	movs	r2, #0
 8007482:	2182      	movs	r1, #130	; 0x82
 8007484:	f7fb ffa6 	bl	80033d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200011c0 	.word	0x200011c0
 8007498:	40005c00 	.word	0x40005c00

0800749c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fb f9c9 	bl	800284a <HAL_PCD_Start>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f948 	bl	8007754 <USBD_Get_USB_Status>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	4608      	mov	r0, r1
 80074dc:	4611      	mov	r1, r2
 80074de:	461a      	mov	r2, r3
 80074e0:	4603      	mov	r3, r0
 80074e2:	70fb      	strb	r3, [r7, #3]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70bb      	strb	r3, [r7, #2]
 80074e8:	4613      	mov	r3, r2
 80074ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074fa:	78bb      	ldrb	r3, [r7, #2]
 80074fc:	883a      	ldrh	r2, [r7, #0]
 80074fe:	78f9      	ldrb	r1, [r7, #3]
 8007500:	f7fb fafc 	bl	8002afc <HAL_PCD_EP_Open>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f922 	bl	8007754 <USBD_Get_USB_Status>
 8007510:	4603      	mov	r3, r0
 8007512:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007514:	7bbb      	ldrb	r3, [r7, #14]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	4611      	mov	r1, r2
 800753c:	4618      	mov	r0, r3
 800753e:	f7fb fb3d 	bl	8002bbc <HAL_PCD_EP_Close>
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	4618      	mov	r0, r3
 800754a:	f000 f903 	bl	8007754 <USBD_Get_USB_Status>
 800754e:	4603      	mov	r3, r0
 8007550:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007552:	7bbb      	ldrb	r3, [r7, #14]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	4611      	mov	r1, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f7fb fbe7 	bl	8002d4e <HAL_PCD_EP_SetStall>
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f8e4 	bl	8007754 <USBD_Get_USB_Status>
 800758c:	4603      	mov	r3, r0
 800758e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007590:	7bbb      	ldrb	r3, [r7, #14]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fb fc22 	bl	8002e02 <HAL_PCD_EP_ClrStall>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 f8c5 	bl	8007754 <USBD_Get_USB_Status>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ea:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80075ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	da08      	bge.n	8007606 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	015b      	lsls	r3, r3, #5
 80075fe:	4413      	add	r3, r2
 8007600:	332a      	adds	r3, #42	; 0x2a
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	e008      	b.n	8007618 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	015b      	lsls	r3, r3, #5
 8007610:	4413      	add	r3, r2
 8007612:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007616:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	bc80      	pop	{r7}
 8007620:	4770      	bx	lr

08007622 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	4611      	mov	r1, r2
 8007640:	4618      	mov	r0, r3
 8007642:	f7fb fa36 	bl	8002ab2 <HAL_PCD_SetAddress>
 8007646:	4603      	mov	r3, r0
 8007648:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f881 	bl	8007754 <USBD_Get_USB_Status>
 8007652:	4603      	mov	r3, r0
 8007654:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007656:	7bbb      	ldrb	r3, [r7, #14]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	461a      	mov	r2, r3
 800766c:	460b      	mov	r3, r1
 800766e:	72fb      	strb	r3, [r7, #11]
 8007670:	4613      	mov	r3, r2
 8007672:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007682:	893b      	ldrh	r3, [r7, #8]
 8007684:	7af9      	ldrb	r1, [r7, #11]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	f7fb fb28 	bl	8002cdc <HAL_PCD_EP_Transmit>
 800768c:	4603      	mov	r3, r0
 800768e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 f85e 	bl	8007754 <USBD_Get_USB_Status>
 8007698:	4603      	mov	r3, r0
 800769a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800769c:	7dbb      	ldrb	r3, [r7, #22]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b086      	sub	sp, #24
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	461a      	mov	r2, r3
 80076b2:	460b      	mov	r3, r1
 80076b4:	72fb      	strb	r3, [r7, #11]
 80076b6:	4613      	mov	r3, r2
 80076b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076c8:	893b      	ldrh	r3, [r7, #8]
 80076ca:	7af9      	ldrb	r1, [r7, #11]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	f7fb fab7 	bl	8002c40 <HAL_PCD_EP_Receive>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 f83b 	bl	8007754 <USBD_Get_USB_Status>
 80076de:	4603      	mov	r3, r0
 80076e0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80076e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f7fb fad6 	bl	8002cb4 <HAL_PCD_EP_GetRxCount>
 8007708:	4603      	mov	r3, r0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800771c:	4b02      	ldr	r3, [pc, #8]	; (8007728 <USBD_static_malloc+0x14>)
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr
 8007728:	200001a0 	.word	0x200001a0

0800772c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]

}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	bc80      	pop	{r7}
 8007752:	4770      	bx	lr

08007754 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d817      	bhi.n	8007798 <USBD_Get_USB_Status+0x44>
 8007768:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <USBD_Get_USB_Status+0x1c>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	08007781 	.word	0x08007781
 8007774:	08007787 	.word	0x08007787
 8007778:	0800778d 	.word	0x0800778d
 800777c:	08007793 	.word	0x08007793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]
    break;
 8007784:	e00b      	b.n	800779e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007786:	2302      	movs	r3, #2
 8007788:	73fb      	strb	r3, [r7, #15]
    break;
 800778a:	e008      	b.n	800779e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800778c:	2301      	movs	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]
    break;
 8007790:	e005      	b.n	800779e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007792:	2302      	movs	r3, #2
 8007794:	73fb      	strb	r3, [r7, #15]
    break;
 8007796:	e002      	b.n	800779e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007798:	2302      	movs	r3, #2
 800779a:	73fb      	strb	r3, [r7, #15]
    break;
 800779c:	bf00      	nop
  }
  return usb_status;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop

080077ac <__libc_init_array>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	2500      	movs	r5, #0
 80077b0:	4e0c      	ldr	r6, [pc, #48]	; (80077e4 <__libc_init_array+0x38>)
 80077b2:	4c0d      	ldr	r4, [pc, #52]	; (80077e8 <__libc_init_array+0x3c>)
 80077b4:	1ba4      	subs	r4, r4, r6
 80077b6:	10a4      	asrs	r4, r4, #2
 80077b8:	42a5      	cmp	r5, r4
 80077ba:	d109      	bne.n	80077d0 <__libc_init_array+0x24>
 80077bc:	f000 f822 	bl	8007804 <_init>
 80077c0:	2500      	movs	r5, #0
 80077c2:	4e0a      	ldr	r6, [pc, #40]	; (80077ec <__libc_init_array+0x40>)
 80077c4:	4c0a      	ldr	r4, [pc, #40]	; (80077f0 <__libc_init_array+0x44>)
 80077c6:	1ba4      	subs	r4, r4, r6
 80077c8:	10a4      	asrs	r4, r4, #2
 80077ca:	42a5      	cmp	r5, r4
 80077cc:	d105      	bne.n	80077da <__libc_init_array+0x2e>
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077d4:	4798      	blx	r3
 80077d6:	3501      	adds	r5, #1
 80077d8:	e7ee      	b.n	80077b8 <__libc_init_array+0xc>
 80077da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077de:	4798      	blx	r3
 80077e0:	3501      	adds	r5, #1
 80077e2:	e7f2      	b.n	80077ca <__libc_init_array+0x1e>
 80077e4:	0800798c 	.word	0x0800798c
 80077e8:	0800798c 	.word	0x0800798c
 80077ec:	0800798c 	.word	0x0800798c
 80077f0:	08007990 	.word	0x08007990

080077f4 <memset>:
 80077f4:	4603      	mov	r3, r0
 80077f6:	4402      	add	r2, r0
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d100      	bne.n	80077fe <memset+0xa>
 80077fc:	4770      	bx	lr
 80077fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007802:	e7f9      	b.n	80077f8 <memset+0x4>

08007804 <_init>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr

08007810 <_fini>:
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007812:	bf00      	nop
 8007814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007816:	bc08      	pop	{r3}
 8007818:	469e      	mov	lr, r3
 800781a:	4770      	bx	lr
