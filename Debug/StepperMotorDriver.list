
StepperMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  80000000  80000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  80000110  80000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  800079a8  800079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  80007b18  80007b18  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  80007b18  80007b18  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  80007b18  80007b18  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  80007b18  80007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  80007b1c  80007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  80007b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ac  20000180  80007ca0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  80007ca0  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017afb  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003127  00000000  00000000  00037ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001020  00000000  00000000  0003add0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  0003bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ece  00000000  00000000  0003cca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2a8  00000000  00000000  00053b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074b56  00000000  00000000  00061e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004588  00000000  00000000  000d69f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

80000110 <__do_global_dtors_aux>:
80000110:	b510      	push	{r4, lr}
80000112:	4c05      	ldr	r4, [pc, #20]	; (80000128 <__do_global_dtors_aux+0x18>)
80000114:	7823      	ldrb	r3, [r4, #0]
80000116:	b933      	cbnz	r3, 80000126 <__do_global_dtors_aux+0x16>
80000118:	4b04      	ldr	r3, [pc, #16]	; (8000012c <__do_global_dtors_aux+0x1c>)
8000011a:	b113      	cbz	r3, 80000122 <__do_global_dtors_aux+0x12>
8000011c:	4804      	ldr	r0, [pc, #16]	; (80000130 <__do_global_dtors_aux+0x20>)
8000011e:	f3af 8000 	nop.w
80000122:	2301      	movs	r3, #1
80000124:	7023      	strb	r3, [r4, #0]
80000126:	bd10      	pop	{r4, pc}
80000128:	20000180 	.word	0x20000180
8000012c:	00000000 	.word	0x00000000
80000130:	80007990 	.word	0x80007990

80000134 <frame_dummy>:
80000134:	b508      	push	{r3, lr}
80000136:	4b03      	ldr	r3, [pc, #12]	; (80000144 <frame_dummy+0x10>)
80000138:	b11b      	cbz	r3, 80000142 <frame_dummy+0xe>
8000013a:	4903      	ldr	r1, [pc, #12]	; (80000148 <frame_dummy+0x14>)
8000013c:	4803      	ldr	r0, [pc, #12]	; (8000014c <frame_dummy+0x18>)
8000013e:	f3af 8000 	nop.w
80000142:	bd08      	pop	{r3, pc}
80000144:	00000000 	.word	0x00000000
80000148:	20000184 	.word	0x20000184
8000014c:	80007990 	.word	0x80007990

80000150 <__aeabi_drsub>:
80000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
80000154:	e002      	b.n	8000015c <__adddf3>
80000156:	bf00      	nop

80000158 <__aeabi_dsub>:
80000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

8000015c <__adddf3>:
8000015c:	b530      	push	{r4, r5, lr}
8000015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
80000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
80000166:	ea94 0f05 	teq	r4, r5
8000016a:	bf08      	it	eq
8000016c:	ea90 0f02 	teqeq	r0, r2
80000170:	bf1f      	itttt	ne
80000172:	ea54 0c00 	orrsne.w	ip, r4, r0
80000176:	ea55 0c02 	orrsne.w	ip, r5, r2
8000017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
8000017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
80000182:	f000 80e2 	beq.w	8000034a <__adddf3+0x1ee>
80000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
8000018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
8000018e:	bfb8      	it	lt
80000190:	426d      	neglt	r5, r5
80000192:	dd0c      	ble.n	800001ae <__adddf3+0x52>
80000194:	442c      	add	r4, r5
80000196:	ea80 0202 	eor.w	r2, r0, r2
8000019a:	ea81 0303 	eor.w	r3, r1, r3
8000019e:	ea82 0000 	eor.w	r0, r2, r0
800001a2:	ea83 0101 	eor.w	r1, r3, r1
800001a6:	ea80 0202 	eor.w	r2, r0, r2
800001aa:	ea81 0303 	eor.w	r3, r1, r3
800001ae:	2d36      	cmp	r5, #54	; 0x36
800001b0:	bf88      	it	hi
800001b2:	bd30      	pophi	{r4, r5, pc}
800001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
800001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
800001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
800001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
800001c4:	d002      	beq.n	800001cc <__adddf3+0x70>
800001c6:	4240      	negs	r0, r0
800001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
800001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
800001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
800001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
800001d8:	d002      	beq.n	800001e0 <__adddf3+0x84>
800001da:	4252      	negs	r2, r2
800001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
800001e0:	ea94 0f05 	teq	r4, r5
800001e4:	f000 80a7 	beq.w	80000336 <__adddf3+0x1da>
800001e8:	f1a4 0401 	sub.w	r4, r4, #1
800001ec:	f1d5 0e20 	rsbs	lr, r5, #32
800001f0:	db0d      	blt.n	8000020e <__adddf3+0xb2>
800001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
800001f6:	fa22 f205 	lsr.w	r2, r2, r5
800001fa:	1880      	adds	r0, r0, r2
800001fc:	f141 0100 	adc.w	r1, r1, #0
80000200:	fa03 f20e 	lsl.w	r2, r3, lr
80000204:	1880      	adds	r0, r0, r2
80000206:	fa43 f305 	asr.w	r3, r3, r5
8000020a:	4159      	adcs	r1, r3
8000020c:	e00e      	b.n	8000022c <__adddf3+0xd0>
8000020e:	f1a5 0520 	sub.w	r5, r5, #32
80000212:	f10e 0e20 	add.w	lr, lr, #32
80000216:	2a01      	cmp	r2, #1
80000218:	fa03 fc0e 	lsl.w	ip, r3, lr
8000021c:	bf28      	it	cs
8000021e:	f04c 0c02 	orrcs.w	ip, ip, #2
80000222:	fa43 f305 	asr.w	r3, r3, r5
80000226:	18c0      	adds	r0, r0, r3
80000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
8000022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
80000230:	d507      	bpl.n	80000242 <__adddf3+0xe6>
80000232:	f04f 0e00 	mov.w	lr, #0
80000236:	f1dc 0c00 	rsbs	ip, ip, #0
8000023a:	eb7e 0000 	sbcs.w	r0, lr, r0
8000023e:	eb6e 0101 	sbc.w	r1, lr, r1
80000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
80000246:	d31b      	bcc.n	80000280 <__adddf3+0x124>
80000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
8000024c:	d30c      	bcc.n	80000268 <__adddf3+0x10c>
8000024e:	0849      	lsrs	r1, r1, #1
80000250:	ea5f 0030 	movs.w	r0, r0, rrx
80000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
80000258:	f104 0401 	add.w	r4, r4, #1
8000025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
80000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
80000264:	f080 809a 	bcs.w	8000039c <__adddf3+0x240>
80000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
8000026c:	bf08      	it	eq
8000026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
80000272:	f150 0000 	adcs.w	r0, r0, #0
80000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
8000027a:	ea41 0105 	orr.w	r1, r1, r5
8000027e:	bd30      	pop	{r4, r5, pc}
80000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
80000284:	4140      	adcs	r0, r0
80000286:	eb41 0101 	adc.w	r1, r1, r1
8000028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
8000028e:	f1a4 0401 	sub.w	r4, r4, #1
80000292:	d1e9      	bne.n	80000268 <__adddf3+0x10c>
80000294:	f091 0f00 	teq	r1, #0
80000298:	bf04      	itt	eq
8000029a:	4601      	moveq	r1, r0
8000029c:	2000      	moveq	r0, #0
8000029e:	fab1 f381 	clz	r3, r1
800002a2:	bf08      	it	eq
800002a4:	3320      	addeq	r3, #32
800002a6:	f1a3 030b 	sub.w	r3, r3, #11
800002aa:	f1b3 0220 	subs.w	r2, r3, #32
800002ae:	da0c      	bge.n	800002ca <__adddf3+0x16e>
800002b0:	320c      	adds	r2, #12
800002b2:	dd08      	ble.n	800002c6 <__adddf3+0x16a>
800002b4:	f102 0c14 	add.w	ip, r2, #20
800002b8:	f1c2 020c 	rsb	r2, r2, #12
800002bc:	fa01 f00c 	lsl.w	r0, r1, ip
800002c0:	fa21 f102 	lsr.w	r1, r1, r2
800002c4:	e00c      	b.n	800002e0 <__adddf3+0x184>
800002c6:	f102 0214 	add.w	r2, r2, #20
800002ca:	bfd8      	it	le
800002cc:	f1c2 0c20 	rsble	ip, r2, #32
800002d0:	fa01 f102 	lsl.w	r1, r1, r2
800002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
800002d8:	bfdc      	itt	le
800002da:	ea41 010c 	orrle.w	r1, r1, ip
800002de:	4090      	lslle	r0, r2
800002e0:	1ae4      	subs	r4, r4, r3
800002e2:	bfa2      	ittt	ge
800002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
800002e8:	4329      	orrge	r1, r5
800002ea:	bd30      	popge	{r4, r5, pc}
800002ec:	ea6f 0404 	mvn.w	r4, r4
800002f0:	3c1f      	subs	r4, #31
800002f2:	da1c      	bge.n	8000032e <__adddf3+0x1d2>
800002f4:	340c      	adds	r4, #12
800002f6:	dc0e      	bgt.n	80000316 <__adddf3+0x1ba>
800002f8:	f104 0414 	add.w	r4, r4, #20
800002fc:	f1c4 0220 	rsb	r2, r4, #32
80000300:	fa20 f004 	lsr.w	r0, r0, r4
80000304:	fa01 f302 	lsl.w	r3, r1, r2
80000308:	ea40 0003 	orr.w	r0, r0, r3
8000030c:	fa21 f304 	lsr.w	r3, r1, r4
80000310:	ea45 0103 	orr.w	r1, r5, r3
80000314:	bd30      	pop	{r4, r5, pc}
80000316:	f1c4 040c 	rsb	r4, r4, #12
8000031a:	f1c4 0220 	rsb	r2, r4, #32
8000031e:	fa20 f002 	lsr.w	r0, r0, r2
80000322:	fa01 f304 	lsl.w	r3, r1, r4
80000326:	ea40 0003 	orr.w	r0, r0, r3
8000032a:	4629      	mov	r1, r5
8000032c:	bd30      	pop	{r4, r5, pc}
8000032e:	fa21 f004 	lsr.w	r0, r1, r4
80000332:	4629      	mov	r1, r5
80000334:	bd30      	pop	{r4, r5, pc}
80000336:	f094 0f00 	teq	r4, #0
8000033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
8000033e:	bf06      	itte	eq
80000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
80000344:	3401      	addeq	r4, #1
80000346:	3d01      	subne	r5, #1
80000348:	e74e      	b.n	800001e8 <__adddf3+0x8c>
8000034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
8000034e:	bf18      	it	ne
80000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
80000354:	d029      	beq.n	800003aa <__adddf3+0x24e>
80000356:	ea94 0f05 	teq	r4, r5
8000035a:	bf08      	it	eq
8000035c:	ea90 0f02 	teqeq	r0, r2
80000360:	d005      	beq.n	8000036e <__adddf3+0x212>
80000362:	ea54 0c00 	orrs.w	ip, r4, r0
80000366:	bf04      	itt	eq
80000368:	4619      	moveq	r1, r3
8000036a:	4610      	moveq	r0, r2
8000036c:	bd30      	pop	{r4, r5, pc}
8000036e:	ea91 0f03 	teq	r1, r3
80000372:	bf1e      	ittt	ne
80000374:	2100      	movne	r1, #0
80000376:	2000      	movne	r0, #0
80000378:	bd30      	popne	{r4, r5, pc}
8000037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
8000037e:	d105      	bne.n	8000038c <__adddf3+0x230>
80000380:	0040      	lsls	r0, r0, #1
80000382:	4149      	adcs	r1, r1
80000384:	bf28      	it	cs
80000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
8000038a:	bd30      	pop	{r4, r5, pc}
8000038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
80000390:	bf3c      	itt	cc
80000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
80000396:	bd30      	popcc	{r4, r5, pc}
80000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
8000039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
800003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
800003a4:	f04f 0000 	mov.w	r0, #0
800003a8:	bd30      	pop	{r4, r5, pc}
800003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
800003ae:	bf1a      	itte	ne
800003b0:	4619      	movne	r1, r3
800003b2:	4610      	movne	r0, r2
800003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
800003b8:	bf1c      	itt	ne
800003ba:	460b      	movne	r3, r1
800003bc:	4602      	movne	r2, r0
800003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
800003c2:	bf06      	itte	eq
800003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
800003c8:	ea91 0f03 	teqeq	r1, r3
800003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
800003d0:	bd30      	pop	{r4, r5, pc}
800003d2:	bf00      	nop

800003d4 <__aeabi_ui2d>:
800003d4:	f090 0f00 	teq	r0, #0
800003d8:	bf04      	itt	eq
800003da:	2100      	moveq	r1, #0
800003dc:	4770      	bxeq	lr
800003de:	b530      	push	{r4, r5, lr}
800003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
800003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
800003e8:	f04f 0500 	mov.w	r5, #0
800003ec:	f04f 0100 	mov.w	r1, #0
800003f0:	e750      	b.n	80000294 <__adddf3+0x138>
800003f2:	bf00      	nop

800003f4 <__aeabi_i2d>:
800003f4:	f090 0f00 	teq	r0, #0
800003f8:	bf04      	itt	eq
800003fa:	2100      	moveq	r1, #0
800003fc:	4770      	bxeq	lr
800003fe:	b530      	push	{r4, r5, lr}
80000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
80000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
80000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
8000040c:	bf48      	it	mi
8000040e:	4240      	negmi	r0, r0
80000410:	f04f 0100 	mov.w	r1, #0
80000414:	e73e      	b.n	80000294 <__adddf3+0x138>
80000416:	bf00      	nop

80000418 <__aeabi_f2d>:
80000418:	0042      	lsls	r2, r0, #1
8000041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
8000041e:	ea4f 0131 	mov.w	r1, r1, rrx
80000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
80000426:	bf1f      	itttt	ne
80000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
8000042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
80000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
80000434:	4770      	bxne	lr
80000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
8000043a:	bf08      	it	eq
8000043c:	4770      	bxeq	lr
8000043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
80000442:	bf04      	itt	eq
80000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
80000448:	4770      	bxeq	lr
8000044a:	b530      	push	{r4, r5, lr}
8000044c:	f44f 7460 	mov.w	r4, #896	; 0x380
80000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
80000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
80000458:	e71c      	b.n	80000294 <__adddf3+0x138>
8000045a:	bf00      	nop

8000045c <__aeabi_ul2d>:
8000045c:	ea50 0201 	orrs.w	r2, r0, r1
80000460:	bf08      	it	eq
80000462:	4770      	bxeq	lr
80000464:	b530      	push	{r4, r5, lr}
80000466:	f04f 0500 	mov.w	r5, #0
8000046a:	e00a      	b.n	80000482 <__aeabi_l2d+0x16>

8000046c <__aeabi_l2d>:
8000046c:	ea50 0201 	orrs.w	r2, r0, r1
80000470:	bf08      	it	eq
80000472:	4770      	bxeq	lr
80000474:	b530      	push	{r4, r5, lr}
80000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
8000047a:	d502      	bpl.n	80000482 <__aeabi_l2d+0x16>
8000047c:	4240      	negs	r0, r0
8000047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
80000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
80000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
8000048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
8000048e:	f43f aed8 	beq.w	80000242 <__adddf3+0xe6>
80000492:	f04f 0203 	mov.w	r2, #3
80000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
8000049a:	bf18      	it	ne
8000049c:	3203      	addne	r2, #3
8000049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
800004a2:	bf18      	it	ne
800004a4:	3203      	addne	r2, #3
800004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
800004aa:	f1c2 0320 	rsb	r3, r2, #32
800004ae:	fa00 fc03 	lsl.w	ip, r0, r3
800004b2:	fa20 f002 	lsr.w	r0, r0, r2
800004b6:	fa01 fe03 	lsl.w	lr, r1, r3
800004ba:	ea40 000e 	orr.w	r0, r0, lr
800004be:	fa21 f102 	lsr.w	r1, r1, r2
800004c2:	4414      	add	r4, r2
800004c4:	e6bd      	b.n	80000242 <__adddf3+0xe6>
800004c6:	bf00      	nop

800004c8 <__aeabi_dmul>:
800004c8:	b570      	push	{r4, r5, r6, lr}
800004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
800004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
800004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
800004d6:	bf1d      	ittte	ne
800004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
800004dc:	ea94 0f0c 	teqne	r4, ip
800004e0:	ea95 0f0c 	teqne	r5, ip
800004e4:	f000 f8de 	bleq	800006a4 <__aeabi_dmul+0x1dc>
800004e8:	442c      	add	r4, r5
800004ea:	ea81 0603 	eor.w	r6, r1, r3
800004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
800004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
800004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
800004fa:	bf18      	it	ne
800004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
80000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
80000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
80000508:	d038      	beq.n	8000057c <__aeabi_dmul+0xb4>
8000050a:	fba0 ce02 	umull	ip, lr, r0, r2
8000050e:	f04f 0500 	mov.w	r5, #0
80000512:	fbe1 e502 	umlal	lr, r5, r1, r2
80000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
8000051a:	fbe0 e503 	umlal	lr, r5, r0, r3
8000051e:	f04f 0600 	mov.w	r6, #0
80000522:	fbe1 5603 	umlal	r5, r6, r1, r3
80000526:	f09c 0f00 	teq	ip, #0
8000052a:	bf18      	it	ne
8000052c:	f04e 0e01 	orrne.w	lr, lr, #1
80000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
80000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
80000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
8000053c:	d204      	bcs.n	80000548 <__aeabi_dmul+0x80>
8000053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
80000542:	416d      	adcs	r5, r5
80000544:	eb46 0606 	adc.w	r6, r6, r6
80000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
8000054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
80000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
80000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
80000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
8000055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
80000560:	bf88      	it	hi
80000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
80000566:	d81e      	bhi.n	800005a6 <__aeabi_dmul+0xde>
80000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
8000056c:	bf08      	it	eq
8000056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
80000572:	f150 0000 	adcs.w	r0, r0, #0
80000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
8000057a:	bd70      	pop	{r4, r5, r6, pc}
8000057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
80000580:	ea46 0101 	orr.w	r1, r6, r1
80000584:	ea40 0002 	orr.w	r0, r0, r2
80000588:	ea81 0103 	eor.w	r1, r1, r3
8000058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
80000590:	bfc2      	ittt	gt
80000592:	ebd4 050c 	rsbsgt	r5, r4, ip
80000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
8000059a:	bd70      	popgt	{r4, r5, r6, pc}
8000059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
800005a0:	f04f 0e00 	mov.w	lr, #0
800005a4:	3c01      	subs	r4, #1
800005a6:	f300 80ab 	bgt.w	80000700 <__aeabi_dmul+0x238>
800005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
800005ae:	bfde      	ittt	le
800005b0:	2000      	movle	r0, #0
800005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
800005b6:	bd70      	pople	{r4, r5, r6, pc}
800005b8:	f1c4 0400 	rsb	r4, r4, #0
800005bc:	3c20      	subs	r4, #32
800005be:	da35      	bge.n	8000062c <__aeabi_dmul+0x164>
800005c0:	340c      	adds	r4, #12
800005c2:	dc1b      	bgt.n	800005fc <__aeabi_dmul+0x134>
800005c4:	f104 0414 	add.w	r4, r4, #20
800005c8:	f1c4 0520 	rsb	r5, r4, #32
800005cc:	fa00 f305 	lsl.w	r3, r0, r5
800005d0:	fa20 f004 	lsr.w	r0, r0, r4
800005d4:	fa01 f205 	lsl.w	r2, r1, r5
800005d8:	ea40 0002 	orr.w	r0, r0, r2
800005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
800005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
800005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
800005e8:	fa21 f604 	lsr.w	r6, r1, r4
800005ec:	eb42 0106 	adc.w	r1, r2, r6
800005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
800005f4:	bf08      	it	eq
800005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
800005fa:	bd70      	pop	{r4, r5, r6, pc}
800005fc:	f1c4 040c 	rsb	r4, r4, #12
80000600:	f1c4 0520 	rsb	r5, r4, #32
80000604:	fa00 f304 	lsl.w	r3, r0, r4
80000608:	fa20 f005 	lsr.w	r0, r0, r5
8000060c:	fa01 f204 	lsl.w	r2, r1, r4
80000610:	ea40 0002 	orr.w	r0, r0, r2
80000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
80000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
8000061c:	f141 0100 	adc.w	r1, r1, #0
80000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
80000624:	bf08      	it	eq
80000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
8000062a:	bd70      	pop	{r4, r5, r6, pc}
8000062c:	f1c4 0520 	rsb	r5, r4, #32
80000630:	fa00 f205 	lsl.w	r2, r0, r5
80000634:	ea4e 0e02 	orr.w	lr, lr, r2
80000638:	fa20 f304 	lsr.w	r3, r0, r4
8000063c:	fa01 f205 	lsl.w	r2, r1, r5
80000640:	ea43 0302 	orr.w	r3, r3, r2
80000644:	fa21 f004 	lsr.w	r0, r1, r4
80000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
8000064c:	fa21 f204 	lsr.w	r2, r1, r4
80000650:	ea20 0002 	bic.w	r0, r0, r2
80000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
80000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
8000065c:	bf08      	it	eq
8000065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
80000662:	bd70      	pop	{r4, r5, r6, pc}
80000664:	f094 0f00 	teq	r4, #0
80000668:	d10f      	bne.n	8000068a <__aeabi_dmul+0x1c2>
8000066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
8000066e:	0040      	lsls	r0, r0, #1
80000670:	eb41 0101 	adc.w	r1, r1, r1
80000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
80000678:	bf08      	it	eq
8000067a:	3c01      	subeq	r4, #1
8000067c:	d0f7      	beq.n	8000066e <__aeabi_dmul+0x1a6>
8000067e:	ea41 0106 	orr.w	r1, r1, r6
80000682:	f095 0f00 	teq	r5, #0
80000686:	bf18      	it	ne
80000688:	4770      	bxne	lr
8000068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
8000068e:	0052      	lsls	r2, r2, #1
80000690:	eb43 0303 	adc.w	r3, r3, r3
80000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
80000698:	bf08      	it	eq
8000069a:	3d01      	subeq	r5, #1
8000069c:	d0f7      	beq.n	8000068e <__aeabi_dmul+0x1c6>
8000069e:	ea43 0306 	orr.w	r3, r3, r6
800006a2:	4770      	bx	lr
800006a4:	ea94 0f0c 	teq	r4, ip
800006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
800006ac:	bf18      	it	ne
800006ae:	ea95 0f0c 	teqne	r5, ip
800006b2:	d00c      	beq.n	800006ce <__aeabi_dmul+0x206>
800006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
800006b8:	bf18      	it	ne
800006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
800006be:	d1d1      	bne.n	80000664 <__aeabi_dmul+0x19c>
800006c0:	ea81 0103 	eor.w	r1, r1, r3
800006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
800006c8:	f04f 0000 	mov.w	r0, #0
800006cc:	bd70      	pop	{r4, r5, r6, pc}
800006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
800006d2:	bf06      	itte	eq
800006d4:	4610      	moveq	r0, r2
800006d6:	4619      	moveq	r1, r3
800006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
800006dc:	d019      	beq.n	80000712 <__aeabi_dmul+0x24a>
800006de:	ea94 0f0c 	teq	r4, ip
800006e2:	d102      	bne.n	800006ea <__aeabi_dmul+0x222>
800006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
800006e8:	d113      	bne.n	80000712 <__aeabi_dmul+0x24a>
800006ea:	ea95 0f0c 	teq	r5, ip
800006ee:	d105      	bne.n	800006fc <__aeabi_dmul+0x234>
800006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
800006f4:	bf1c      	itt	ne
800006f6:	4610      	movne	r0, r2
800006f8:	4619      	movne	r1, r3
800006fa:	d10a      	bne.n	80000712 <__aeabi_dmul+0x24a>
800006fc:	ea81 0103 	eor.w	r1, r1, r3
80000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
80000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
80000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
8000070c:	f04f 0000 	mov.w	r0, #0
80000710:	bd70      	pop	{r4, r5, r6, pc}
80000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
80000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
8000071a:	bd70      	pop	{r4, r5, r6, pc}

8000071c <__aeabi_ddiv>:
8000071c:	b570      	push	{r4, r5, r6, lr}
8000071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
80000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
80000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
8000072a:	bf1d      	ittte	ne
8000072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
80000730:	ea94 0f0c 	teqne	r4, ip
80000734:	ea95 0f0c 	teqne	r5, ip
80000738:	f000 f8a7 	bleq	8000088a <__aeabi_ddiv+0x16e>
8000073c:	eba4 0405 	sub.w	r4, r4, r5
80000740:	ea81 0e03 	eor.w	lr, r1, r3
80000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
80000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
8000074c:	f000 8088 	beq.w	80000860 <__aeabi_ddiv+0x144>
80000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
80000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
80000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
8000075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
80000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
80000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
80000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
8000076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
80000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
80000774:	429d      	cmp	r5, r3
80000776:	bf08      	it	eq
80000778:	4296      	cmpeq	r6, r2
8000077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
8000077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
80000782:	d202      	bcs.n	8000078a <__aeabi_ddiv+0x6e>
80000784:	085b      	lsrs	r3, r3, #1
80000786:	ea4f 0232 	mov.w	r2, r2, rrx
8000078a:	1ab6      	subs	r6, r6, r2
8000078c:	eb65 0503 	sbc.w	r5, r5, r3
80000790:	085b      	lsrs	r3, r3, #1
80000792:	ea4f 0232 	mov.w	r2, r2, rrx
80000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
8000079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
8000079e:	ebb6 0e02 	subs.w	lr, r6, r2
800007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
800007a6:	bf22      	ittt	cs
800007a8:	1ab6      	subcs	r6, r6, r2
800007aa:	4675      	movcs	r5, lr
800007ac:	ea40 000c 	orrcs.w	r0, r0, ip
800007b0:	085b      	lsrs	r3, r3, #1
800007b2:	ea4f 0232 	mov.w	r2, r2, rrx
800007b6:	ebb6 0e02 	subs.w	lr, r6, r2
800007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
800007be:	bf22      	ittt	cs
800007c0:	1ab6      	subcs	r6, r6, r2
800007c2:	4675      	movcs	r5, lr
800007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
800007c8:	085b      	lsrs	r3, r3, #1
800007ca:	ea4f 0232 	mov.w	r2, r2, rrx
800007ce:	ebb6 0e02 	subs.w	lr, r6, r2
800007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
800007d6:	bf22      	ittt	cs
800007d8:	1ab6      	subcs	r6, r6, r2
800007da:	4675      	movcs	r5, lr
800007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
800007e0:	085b      	lsrs	r3, r3, #1
800007e2:	ea4f 0232 	mov.w	r2, r2, rrx
800007e6:	ebb6 0e02 	subs.w	lr, r6, r2
800007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
800007ee:	bf22      	ittt	cs
800007f0:	1ab6      	subcs	r6, r6, r2
800007f2:	4675      	movcs	r5, lr
800007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
800007f8:	ea55 0e06 	orrs.w	lr, r5, r6
800007fc:	d018      	beq.n	80000830 <__aeabi_ddiv+0x114>
800007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
80000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
80000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
8000080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
8000080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
80000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
80000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
8000081a:	d1c0      	bne.n	8000079e <__aeabi_ddiv+0x82>
8000081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
80000820:	d10b      	bne.n	8000083a <__aeabi_ddiv+0x11e>
80000822:	ea41 0100 	orr.w	r1, r1, r0
80000826:	f04f 0000 	mov.w	r0, #0
8000082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
8000082e:	e7b6      	b.n	8000079e <__aeabi_ddiv+0x82>
80000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
80000834:	bf04      	itt	eq
80000836:	4301      	orreq	r1, r0
80000838:	2000      	moveq	r0, #0
8000083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
8000083e:	bf88      	it	hi
80000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
80000844:	f63f aeaf 	bhi.w	800005a6 <__aeabi_dmul+0xde>
80000848:	ebb5 0c03 	subs.w	ip, r5, r3
8000084c:	bf04      	itt	eq
8000084e:	ebb6 0c02 	subseq.w	ip, r6, r2
80000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
80000856:	f150 0000 	adcs.w	r0, r0, #0
8000085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
8000085e:	bd70      	pop	{r4, r5, r6, pc}
80000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
80000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
80000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
8000086c:	bfc2      	ittt	gt
8000086e:	ebd4 050c 	rsbsgt	r5, r4, ip
80000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
80000876:	bd70      	popgt	{r4, r5, r6, pc}
80000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
8000087c:	f04f 0e00 	mov.w	lr, #0
80000880:	3c01      	subs	r4, #1
80000882:	e690      	b.n	800005a6 <__aeabi_dmul+0xde>
80000884:	ea45 0e06 	orr.w	lr, r5, r6
80000888:	e68d      	b.n	800005a6 <__aeabi_dmul+0xde>
8000088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
8000088e:	ea94 0f0c 	teq	r4, ip
80000892:	bf08      	it	eq
80000894:	ea95 0f0c 	teqeq	r5, ip
80000898:	f43f af3b 	beq.w	80000712 <__aeabi_dmul+0x24a>
8000089c:	ea94 0f0c 	teq	r4, ip
800008a0:	d10a      	bne.n	800008b8 <__aeabi_ddiv+0x19c>
800008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
800008a6:	f47f af34 	bne.w	80000712 <__aeabi_dmul+0x24a>
800008aa:	ea95 0f0c 	teq	r5, ip
800008ae:	f47f af25 	bne.w	800006fc <__aeabi_dmul+0x234>
800008b2:	4610      	mov	r0, r2
800008b4:	4619      	mov	r1, r3
800008b6:	e72c      	b.n	80000712 <__aeabi_dmul+0x24a>
800008b8:	ea95 0f0c 	teq	r5, ip
800008bc:	d106      	bne.n	800008cc <__aeabi_ddiv+0x1b0>
800008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
800008c2:	f43f aefd 	beq.w	800006c0 <__aeabi_dmul+0x1f8>
800008c6:	4610      	mov	r0, r2
800008c8:	4619      	mov	r1, r3
800008ca:	e722      	b.n	80000712 <__aeabi_dmul+0x24a>
800008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
800008d0:	bf18      	it	ne
800008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
800008d6:	f47f aec5 	bne.w	80000664 <__aeabi_dmul+0x19c>
800008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
800008de:	f47f af0d 	bne.w	800006fc <__aeabi_dmul+0x234>
800008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
800008e6:	f47f aeeb 	bne.w	800006c0 <__aeabi_dmul+0x1f8>
800008ea:	e712      	b.n	80000712 <__aeabi_dmul+0x24a>

800008ec <__gedf2>:
800008ec:	f04f 3cff 	mov.w	ip, #4294967295
800008f0:	e006      	b.n	80000900 <__cmpdf2+0x4>
800008f2:	bf00      	nop

800008f4 <__ledf2>:
800008f4:	f04f 0c01 	mov.w	ip, #1
800008f8:	e002      	b.n	80000900 <__cmpdf2+0x4>
800008fa:	bf00      	nop

800008fc <__cmpdf2>:
800008fc:	f04f 0c01 	mov.w	ip, #1
80000900:	f84d cd04 	str.w	ip, [sp, #-4]!
80000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
80000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
8000090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
80000910:	bf18      	it	ne
80000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
80000916:	d01b      	beq.n	80000950 <__cmpdf2+0x54>
80000918:	b001      	add	sp, #4
8000091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
8000091e:	bf0c      	ite	eq
80000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
80000924:	ea91 0f03 	teqne	r1, r3
80000928:	bf02      	ittt	eq
8000092a:	ea90 0f02 	teqeq	r0, r2
8000092e:	2000      	moveq	r0, #0
80000930:	4770      	bxeq	lr
80000932:	f110 0f00 	cmn.w	r0, #0
80000936:	ea91 0f03 	teq	r1, r3
8000093a:	bf58      	it	pl
8000093c:	4299      	cmppl	r1, r3
8000093e:	bf08      	it	eq
80000940:	4290      	cmpeq	r0, r2
80000942:	bf2c      	ite	cs
80000944:	17d8      	asrcs	r0, r3, #31
80000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
8000094a:	f040 0001 	orr.w	r0, r0, #1
8000094e:	4770      	bx	lr
80000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
80000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
80000958:	d102      	bne.n	80000960 <__cmpdf2+0x64>
8000095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
8000095e:	d107      	bne.n	80000970 <__cmpdf2+0x74>
80000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
80000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
80000968:	d1d6      	bne.n	80000918 <__cmpdf2+0x1c>
8000096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
8000096e:	d0d3      	beq.n	80000918 <__cmpdf2+0x1c>
80000970:	f85d 0b04 	ldr.w	r0, [sp], #4
80000974:	4770      	bx	lr
80000976:	bf00      	nop

80000978 <__aeabi_cdrcmple>:
80000978:	4684      	mov	ip, r0
8000097a:	4610      	mov	r0, r2
8000097c:	4662      	mov	r2, ip
8000097e:	468c      	mov	ip, r1
80000980:	4619      	mov	r1, r3
80000982:	4663      	mov	r3, ip
80000984:	e000      	b.n	80000988 <__aeabi_cdcmpeq>
80000986:	bf00      	nop

80000988 <__aeabi_cdcmpeq>:
80000988:	b501      	push	{r0, lr}
8000098a:	f7ff ffb7 	bl	800008fc <__cmpdf2>
8000098e:	2800      	cmp	r0, #0
80000990:	bf48      	it	mi
80000992:	f110 0f00 	cmnmi.w	r0, #0
80000996:	bd01      	pop	{r0, pc}

80000998 <__aeabi_dcmpeq>:
80000998:	f84d ed08 	str.w	lr, [sp, #-8]!
8000099c:	f7ff fff4 	bl	80000988 <__aeabi_cdcmpeq>
800009a0:	bf0c      	ite	eq
800009a2:	2001      	moveq	r0, #1
800009a4:	2000      	movne	r0, #0
800009a6:	f85d fb08 	ldr.w	pc, [sp], #8
800009aa:	bf00      	nop

800009ac <__aeabi_dcmplt>:
800009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
800009b0:	f7ff ffea 	bl	80000988 <__aeabi_cdcmpeq>
800009b4:	bf34      	ite	cc
800009b6:	2001      	movcc	r0, #1
800009b8:	2000      	movcs	r0, #0
800009ba:	f85d fb08 	ldr.w	pc, [sp], #8
800009be:	bf00      	nop

800009c0 <__aeabi_dcmple>:
800009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
800009c4:	f7ff ffe0 	bl	80000988 <__aeabi_cdcmpeq>
800009c8:	bf94      	ite	ls
800009ca:	2001      	movls	r0, #1
800009cc:	2000      	movhi	r0, #0
800009ce:	f85d fb08 	ldr.w	pc, [sp], #8
800009d2:	bf00      	nop

800009d4 <__aeabi_dcmpge>:
800009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
800009d8:	f7ff ffce 	bl	80000978 <__aeabi_cdrcmple>
800009dc:	bf94      	ite	ls
800009de:	2001      	movls	r0, #1
800009e0:	2000      	movhi	r0, #0
800009e2:	f85d fb08 	ldr.w	pc, [sp], #8
800009e6:	bf00      	nop

800009e8 <__aeabi_dcmpgt>:
800009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
800009ec:	f7ff ffc4 	bl	80000978 <__aeabi_cdrcmple>
800009f0:	bf34      	ite	cc
800009f2:	2001      	movcc	r0, #1
800009f4:	2000      	movcs	r0, #0
800009f6:	f85d fb08 	ldr.w	pc, [sp], #8
800009fa:	bf00      	nop

800009fc <__aeabi_d2iz>:
800009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
80000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
80000a04:	d215      	bcs.n	80000a32 <__aeabi_d2iz+0x36>
80000a06:	d511      	bpl.n	80000a2c <__aeabi_d2iz+0x30>
80000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
80000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
80000a10:	d912      	bls.n	80000a38 <__aeabi_d2iz+0x3c>
80000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
80000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
80000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
80000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
80000a22:	fa23 f002 	lsr.w	r0, r3, r2
80000a26:	bf18      	it	ne
80000a28:	4240      	negne	r0, r0
80000a2a:	4770      	bx	lr
80000a2c:	f04f 0000 	mov.w	r0, #0
80000a30:	4770      	bx	lr
80000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
80000a36:	d105      	bne.n	80000a44 <__aeabi_d2iz+0x48>
80000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
80000a3c:	bf08      	it	eq
80000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
80000a42:	4770      	bx	lr
80000a44:	f04f 0000 	mov.w	r0, #0
80000a48:	4770      	bx	lr
80000a4a:	bf00      	nop

80000a4c <__aeabi_d2uiz>:
80000a4c:	004a      	lsls	r2, r1, #1
80000a4e:	d211      	bcs.n	80000a74 <__aeabi_d2uiz+0x28>
80000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
80000a54:	d211      	bcs.n	80000a7a <__aeabi_d2uiz+0x2e>
80000a56:	d50d      	bpl.n	80000a74 <__aeabi_d2uiz+0x28>
80000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
80000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
80000a60:	d40e      	bmi.n	80000a80 <__aeabi_d2uiz+0x34>
80000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
80000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
80000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
80000a6e:	fa23 f002 	lsr.w	r0, r3, r2
80000a72:	4770      	bx	lr
80000a74:	f04f 0000 	mov.w	r0, #0
80000a78:	4770      	bx	lr
80000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
80000a7e:	d102      	bne.n	80000a86 <__aeabi_d2uiz+0x3a>
80000a80:	f04f 30ff 	mov.w	r0, #4294967295
80000a84:	4770      	bx	lr
80000a86:	f04f 0000 	mov.w	r0, #0
80000a8a:	4770      	bx	lr

80000a8c <__aeabi_d2f>:
80000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
80000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
80000a94:	bf24      	itt	cs
80000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
80000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
80000a9e:	d90d      	bls.n	80000abc <__aeabi_d2f+0x30>
80000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
80000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
80000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
80000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
80000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
80000ab4:	bf08      	it	eq
80000ab6:	f020 0001 	biceq.w	r0, r0, #1
80000aba:	4770      	bx	lr
80000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
80000ac0:	d121      	bne.n	80000b06 <__aeabi_d2f+0x7a>
80000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
80000ac6:	bfbc      	itt	lt
80000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
80000acc:	4770      	bxlt	lr
80000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
80000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
80000ad6:	f1c2 0218 	rsb	r2, r2, #24
80000ada:	f1c2 0c20 	rsb	ip, r2, #32
80000ade:	fa10 f30c 	lsls.w	r3, r0, ip
80000ae2:	fa20 f002 	lsr.w	r0, r0, r2
80000ae6:	bf18      	it	ne
80000ae8:	f040 0001 	orrne.w	r0, r0, #1
80000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
80000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
80000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
80000af8:	ea40 000c 	orr.w	r0, r0, ip
80000afc:	fa23 f302 	lsr.w	r3, r3, r2
80000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
80000b04:	e7cc      	b.n	80000aa0 <__aeabi_d2f+0x14>
80000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
80000b0a:	d107      	bne.n	80000b1c <__aeabi_d2f+0x90>
80000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
80000b10:	bf1e      	ittt	ne
80000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
80000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
80000b1a:	4770      	bxne	lr
80000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
80000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
80000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
80000b28:	4770      	bx	lr
80000b2a:	bf00      	nop

80000b2c <__aeabi_frsub>:
80000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
80000b30:	e002      	b.n	80000b38 <__addsf3>
80000b32:	bf00      	nop

80000b34 <__aeabi_fsub>:
80000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

80000b38 <__addsf3>:
80000b38:	0042      	lsls	r2, r0, #1
80000b3a:	bf1f      	itttt	ne
80000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
80000b40:	ea92 0f03 	teqne	r2, r3
80000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
80000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
80000b4c:	d06a      	beq.n	80000c24 <__addsf3+0xec>
80000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
80000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
80000b56:	bfc1      	itttt	gt
80000b58:	18d2      	addgt	r2, r2, r3
80000b5a:	4041      	eorgt	r1, r0
80000b5c:	4048      	eorgt	r0, r1
80000b5e:	4041      	eorgt	r1, r0
80000b60:	bfb8      	it	lt
80000b62:	425b      	neglt	r3, r3
80000b64:	2b19      	cmp	r3, #25
80000b66:	bf88      	it	hi
80000b68:	4770      	bxhi	lr
80000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
80000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
80000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
80000b76:	bf18      	it	ne
80000b78:	4240      	negne	r0, r0
80000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
80000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
80000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
80000b86:	bf18      	it	ne
80000b88:	4249      	negne	r1, r1
80000b8a:	ea92 0f03 	teq	r2, r3
80000b8e:	d03f      	beq.n	80000c10 <__addsf3+0xd8>
80000b90:	f1a2 0201 	sub.w	r2, r2, #1
80000b94:	fa41 fc03 	asr.w	ip, r1, r3
80000b98:	eb10 000c 	adds.w	r0, r0, ip
80000b9c:	f1c3 0320 	rsb	r3, r3, #32
80000ba0:	fa01 f103 	lsl.w	r1, r1, r3
80000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
80000ba8:	d502      	bpl.n	80000bb0 <__addsf3+0x78>
80000baa:	4249      	negs	r1, r1
80000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
80000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
80000bb4:	d313      	bcc.n	80000bde <__addsf3+0xa6>
80000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
80000bba:	d306      	bcc.n	80000bca <__addsf3+0x92>
80000bbc:	0840      	lsrs	r0, r0, #1
80000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
80000bc2:	f102 0201 	add.w	r2, r2, #1
80000bc6:	2afe      	cmp	r2, #254	; 0xfe
80000bc8:	d251      	bcs.n	80000c6e <__addsf3+0x136>
80000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
80000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
80000bd2:	bf08      	it	eq
80000bd4:	f020 0001 	biceq.w	r0, r0, #1
80000bd8:	ea40 0003 	orr.w	r0, r0, r3
80000bdc:	4770      	bx	lr
80000bde:	0049      	lsls	r1, r1, #1
80000be0:	eb40 0000 	adc.w	r0, r0, r0
80000be4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
80000be8:	f1a2 0201 	sub.w	r2, r2, #1
80000bec:	d1ed      	bne.n	80000bca <__addsf3+0x92>
80000bee:	fab0 fc80 	clz	ip, r0
80000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
80000bf6:	ebb2 020c 	subs.w	r2, r2, ip
80000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
80000bfe:	bfaa      	itet	ge
80000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
80000c04:	4252      	neglt	r2, r2
80000c06:	4318      	orrge	r0, r3
80000c08:	bfbc      	itt	lt
80000c0a:	40d0      	lsrlt	r0, r2
80000c0c:	4318      	orrlt	r0, r3
80000c0e:	4770      	bx	lr
80000c10:	f092 0f00 	teq	r2, #0
80000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
80000c18:	bf06      	itte	eq
80000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
80000c1e:	3201      	addeq	r2, #1
80000c20:	3b01      	subne	r3, #1
80000c22:	e7b5      	b.n	80000b90 <__addsf3+0x58>
80000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
80000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
80000c2c:	bf18      	it	ne
80000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
80000c32:	d021      	beq.n	80000c78 <__addsf3+0x140>
80000c34:	ea92 0f03 	teq	r2, r3
80000c38:	d004      	beq.n	80000c44 <__addsf3+0x10c>
80000c3a:	f092 0f00 	teq	r2, #0
80000c3e:	bf08      	it	eq
80000c40:	4608      	moveq	r0, r1
80000c42:	4770      	bx	lr
80000c44:	ea90 0f01 	teq	r0, r1
80000c48:	bf1c      	itt	ne
80000c4a:	2000      	movne	r0, #0
80000c4c:	4770      	bxne	lr
80000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
80000c52:	d104      	bne.n	80000c5e <__addsf3+0x126>
80000c54:	0040      	lsls	r0, r0, #1
80000c56:	bf28      	it	cs
80000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
80000c5c:	4770      	bx	lr
80000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
80000c62:	bf3c      	itt	cc
80000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
80000c68:	4770      	bxcc	lr
80000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
80000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
80000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
80000c76:	4770      	bx	lr
80000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
80000c7c:	bf16      	itet	ne
80000c7e:	4608      	movne	r0, r1
80000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
80000c84:	4601      	movne	r1, r0
80000c86:	0242      	lsls	r2, r0, #9
80000c88:	bf06      	itte	eq
80000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
80000c8e:	ea90 0f01 	teqeq	r0, r1
80000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
80000c96:	4770      	bx	lr

80000c98 <__aeabi_ui2f>:
80000c98:	f04f 0300 	mov.w	r3, #0
80000c9c:	e004      	b.n	80000ca8 <__aeabi_i2f+0x8>
80000c9e:	bf00      	nop

80000ca0 <__aeabi_i2f>:
80000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
80000ca4:	bf48      	it	mi
80000ca6:	4240      	negmi	r0, r0
80000ca8:	ea5f 0c00 	movs.w	ip, r0
80000cac:	bf08      	it	eq
80000cae:	4770      	bxeq	lr
80000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
80000cb4:	4601      	mov	r1, r0
80000cb6:	f04f 0000 	mov.w	r0, #0
80000cba:	e01c      	b.n	80000cf6 <__aeabi_l2f+0x2a>

80000cbc <__aeabi_ul2f>:
80000cbc:	ea50 0201 	orrs.w	r2, r0, r1
80000cc0:	bf08      	it	eq
80000cc2:	4770      	bxeq	lr
80000cc4:	f04f 0300 	mov.w	r3, #0
80000cc8:	e00a      	b.n	80000ce0 <__aeabi_l2f+0x14>
80000cca:	bf00      	nop

80000ccc <__aeabi_l2f>:
80000ccc:	ea50 0201 	orrs.w	r2, r0, r1
80000cd0:	bf08      	it	eq
80000cd2:	4770      	bxeq	lr
80000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
80000cd8:	d502      	bpl.n	80000ce0 <__aeabi_l2f+0x14>
80000cda:	4240      	negs	r0, r0
80000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
80000ce0:	ea5f 0c01 	movs.w	ip, r1
80000ce4:	bf02      	ittt	eq
80000ce6:	4684      	moveq	ip, r0
80000ce8:	4601      	moveq	r1, r0
80000cea:	2000      	moveq	r0, #0
80000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
80000cf0:	bf08      	it	eq
80000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
80000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
80000cfa:	fabc f28c 	clz	r2, ip
80000cfe:	3a08      	subs	r2, #8
80000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
80000d04:	db10      	blt.n	80000d28 <__aeabi_l2f+0x5c>
80000d06:	fa01 fc02 	lsl.w	ip, r1, r2
80000d0a:	4463      	add	r3, ip
80000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
80000d10:	f1c2 0220 	rsb	r2, r2, #32
80000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
80000d18:	fa20 f202 	lsr.w	r2, r0, r2
80000d1c:	eb43 0002 	adc.w	r0, r3, r2
80000d20:	bf08      	it	eq
80000d22:	f020 0001 	biceq.w	r0, r0, #1
80000d26:	4770      	bx	lr
80000d28:	f102 0220 	add.w	r2, r2, #32
80000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
80000d30:	f1c2 0220 	rsb	r2, r2, #32
80000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
80000d38:	fa21 f202 	lsr.w	r2, r1, r2
80000d3c:	eb43 0002 	adc.w	r0, r3, r2
80000d40:	bf08      	it	eq
80000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
80000d46:	4770      	bx	lr

80000d48 <__aeabi_fmul>:
80000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
80000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
80000d50:	bf1e      	ittt	ne
80000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
80000d56:	ea92 0f0c 	teqne	r2, ip
80000d5a:	ea93 0f0c 	teqne	r3, ip
80000d5e:	d06f      	beq.n	80000e40 <__aeabi_fmul+0xf8>
80000d60:	441a      	add	r2, r3
80000d62:	ea80 0c01 	eor.w	ip, r0, r1
80000d66:	0240      	lsls	r0, r0, #9
80000d68:	bf18      	it	ne
80000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
80000d6e:	d01e      	beq.n	80000dae <__aeabi_fmul+0x66>
80000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
80000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
80000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
80000d7c:	fba0 3101 	umull	r3, r1, r0, r1
80000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
80000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
80000d88:	bf3e      	ittt	cc
80000d8a:	0049      	lslcc	r1, r1, #1
80000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
80000d90:	005b      	lslcc	r3, r3, #1
80000d92:	ea40 0001 	orr.w	r0, r0, r1
80000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
80000d9a:	2afd      	cmp	r2, #253	; 0xfd
80000d9c:	d81d      	bhi.n	80000dda <__aeabi_fmul+0x92>
80000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
80000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
80000da6:	bf08      	it	eq
80000da8:	f020 0001 	biceq.w	r0, r0, #1
80000dac:	4770      	bx	lr
80000dae:	f090 0f00 	teq	r0, #0
80000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
80000db6:	bf08      	it	eq
80000db8:	0249      	lsleq	r1, r1, #9
80000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
80000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
80000dc2:	3a7f      	subs	r2, #127	; 0x7f
80000dc4:	bfc2      	ittt	gt
80000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
80000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
80000dce:	4770      	bxgt	lr
80000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
80000dd4:	f04f 0300 	mov.w	r3, #0
80000dd8:	3a01      	subs	r2, #1
80000dda:	dc5d      	bgt.n	80000e98 <__aeabi_fmul+0x150>
80000ddc:	f112 0f19 	cmn.w	r2, #25
80000de0:	bfdc      	itt	le
80000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
80000de6:	4770      	bxle	lr
80000de8:	f1c2 0200 	rsb	r2, r2, #0
80000dec:	0041      	lsls	r1, r0, #1
80000dee:	fa21 f102 	lsr.w	r1, r1, r2
80000df2:	f1c2 0220 	rsb	r2, r2, #32
80000df6:	fa00 fc02 	lsl.w	ip, r0, r2
80000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
80000dfe:	f140 0000 	adc.w	r0, r0, #0
80000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
80000e06:	bf08      	it	eq
80000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
80000e0c:	4770      	bx	lr
80000e0e:	f092 0f00 	teq	r2, #0
80000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
80000e16:	bf02      	ittt	eq
80000e18:	0040      	lsleq	r0, r0, #1
80000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
80000e1e:	3a01      	subeq	r2, #1
80000e20:	d0f9      	beq.n	80000e16 <__aeabi_fmul+0xce>
80000e22:	ea40 000c 	orr.w	r0, r0, ip
80000e26:	f093 0f00 	teq	r3, #0
80000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
80000e2e:	bf02      	ittt	eq
80000e30:	0049      	lsleq	r1, r1, #1
80000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
80000e36:	3b01      	subeq	r3, #1
80000e38:	d0f9      	beq.n	80000e2e <__aeabi_fmul+0xe6>
80000e3a:	ea41 010c 	orr.w	r1, r1, ip
80000e3e:	e78f      	b.n	80000d60 <__aeabi_fmul+0x18>
80000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
80000e44:	ea92 0f0c 	teq	r2, ip
80000e48:	bf18      	it	ne
80000e4a:	ea93 0f0c 	teqne	r3, ip
80000e4e:	d00a      	beq.n	80000e66 <__aeabi_fmul+0x11e>
80000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
80000e54:	bf18      	it	ne
80000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
80000e5a:	d1d8      	bne.n	80000e0e <__aeabi_fmul+0xc6>
80000e5c:	ea80 0001 	eor.w	r0, r0, r1
80000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
80000e64:	4770      	bx	lr
80000e66:	f090 0f00 	teq	r0, #0
80000e6a:	bf17      	itett	ne
80000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
80000e70:	4608      	moveq	r0, r1
80000e72:	f091 0f00 	teqne	r1, #0
80000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
80000e7a:	d014      	beq.n	80000ea6 <__aeabi_fmul+0x15e>
80000e7c:	ea92 0f0c 	teq	r2, ip
80000e80:	d101      	bne.n	80000e86 <__aeabi_fmul+0x13e>
80000e82:	0242      	lsls	r2, r0, #9
80000e84:	d10f      	bne.n	80000ea6 <__aeabi_fmul+0x15e>
80000e86:	ea93 0f0c 	teq	r3, ip
80000e8a:	d103      	bne.n	80000e94 <__aeabi_fmul+0x14c>
80000e8c:	024b      	lsls	r3, r1, #9
80000e8e:	bf18      	it	ne
80000e90:	4608      	movne	r0, r1
80000e92:	d108      	bne.n	80000ea6 <__aeabi_fmul+0x15e>
80000e94:	ea80 0001 	eor.w	r0, r0, r1
80000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
80000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
80000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
80000ea4:	4770      	bx	lr
80000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
80000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
80000eae:	4770      	bx	lr

80000eb0 <__aeabi_fdiv>:
80000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
80000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
80000eb8:	bf1e      	ittt	ne
80000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
80000ebe:	ea92 0f0c 	teqne	r2, ip
80000ec2:	ea93 0f0c 	teqne	r3, ip
80000ec6:	d069      	beq.n	80000f9c <__aeabi_fdiv+0xec>
80000ec8:	eba2 0203 	sub.w	r2, r2, r3
80000ecc:	ea80 0c01 	eor.w	ip, r0, r1
80000ed0:	0249      	lsls	r1, r1, #9
80000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
80000ed6:	d037      	beq.n	80000f48 <__aeabi_fdiv+0x98>
80000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
80000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
80000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
80000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
80000ee8:	428b      	cmp	r3, r1
80000eea:	bf38      	it	cc
80000eec:	005b      	lslcc	r3, r3, #1
80000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
80000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
80000ef6:	428b      	cmp	r3, r1
80000ef8:	bf24      	itt	cs
80000efa:	1a5b      	subcs	r3, r3, r1
80000efc:	ea40 000c 	orrcs.w	r0, r0, ip
80000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
80000f04:	bf24      	itt	cs
80000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
80000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
80000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
80000f12:	bf24      	itt	cs
80000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
80000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
80000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
80000f20:	bf24      	itt	cs
80000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
80000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
80000f2a:	011b      	lsls	r3, r3, #4
80000f2c:	bf18      	it	ne
80000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
80000f32:	d1e0      	bne.n	80000ef6 <__aeabi_fdiv+0x46>
80000f34:	2afd      	cmp	r2, #253	; 0xfd
80000f36:	f63f af50 	bhi.w	80000dda <__aeabi_fmul+0x92>
80000f3a:	428b      	cmp	r3, r1
80000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
80000f40:	bf08      	it	eq
80000f42:	f020 0001 	biceq.w	r0, r0, #1
80000f46:	4770      	bx	lr
80000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
80000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
80000f50:	327f      	adds	r2, #127	; 0x7f
80000f52:	bfc2      	ittt	gt
80000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
80000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
80000f5c:	4770      	bxgt	lr
80000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
80000f62:	f04f 0300 	mov.w	r3, #0
80000f66:	3a01      	subs	r2, #1
80000f68:	e737      	b.n	80000dda <__aeabi_fmul+0x92>
80000f6a:	f092 0f00 	teq	r2, #0
80000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
80000f72:	bf02      	ittt	eq
80000f74:	0040      	lsleq	r0, r0, #1
80000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
80000f7a:	3a01      	subeq	r2, #1
80000f7c:	d0f9      	beq.n	80000f72 <__aeabi_fdiv+0xc2>
80000f7e:	ea40 000c 	orr.w	r0, r0, ip
80000f82:	f093 0f00 	teq	r3, #0
80000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
80000f8a:	bf02      	ittt	eq
80000f8c:	0049      	lsleq	r1, r1, #1
80000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
80000f92:	3b01      	subeq	r3, #1
80000f94:	d0f9      	beq.n	80000f8a <__aeabi_fdiv+0xda>
80000f96:	ea41 010c 	orr.w	r1, r1, ip
80000f9a:	e795      	b.n	80000ec8 <__aeabi_fdiv+0x18>
80000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
80000fa0:	ea92 0f0c 	teq	r2, ip
80000fa4:	d108      	bne.n	80000fb8 <__aeabi_fdiv+0x108>
80000fa6:	0242      	lsls	r2, r0, #9
80000fa8:	f47f af7d 	bne.w	80000ea6 <__aeabi_fmul+0x15e>
80000fac:	ea93 0f0c 	teq	r3, ip
80000fb0:	f47f af70 	bne.w	80000e94 <__aeabi_fmul+0x14c>
80000fb4:	4608      	mov	r0, r1
80000fb6:	e776      	b.n	80000ea6 <__aeabi_fmul+0x15e>
80000fb8:	ea93 0f0c 	teq	r3, ip
80000fbc:	d104      	bne.n	80000fc8 <__aeabi_fdiv+0x118>
80000fbe:	024b      	lsls	r3, r1, #9
80000fc0:	f43f af4c 	beq.w	80000e5c <__aeabi_fmul+0x114>
80000fc4:	4608      	mov	r0, r1
80000fc6:	e76e      	b.n	80000ea6 <__aeabi_fmul+0x15e>
80000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
80000fcc:	bf18      	it	ne
80000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
80000fd2:	d1ca      	bne.n	80000f6a <__aeabi_fdiv+0xba>
80000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
80000fd8:	f47f af5c 	bne.w	80000e94 <__aeabi_fmul+0x14c>
80000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
80000fe0:	f47f af3c 	bne.w	80000e5c <__aeabi_fmul+0x114>
80000fe4:	e75f      	b.n	80000ea6 <__aeabi_fmul+0x15e>
80000fe6:	bf00      	nop

80000fe8 <__gesf2>:
80000fe8:	f04f 3cff 	mov.w	ip, #4294967295
80000fec:	e006      	b.n	80000ffc <__cmpsf2+0x4>
80000fee:	bf00      	nop

80000ff0 <__lesf2>:
80000ff0:	f04f 0c01 	mov.w	ip, #1
80000ff4:	e002      	b.n	80000ffc <__cmpsf2+0x4>
80000ff6:	bf00      	nop

80000ff8 <__cmpsf2>:
80000ff8:	f04f 0c01 	mov.w	ip, #1
80000ffc:	f84d cd04 	str.w	ip, [sp, #-4]!
80001000:	ea4f 0240 	mov.w	r2, r0, lsl #1
80001004:	ea4f 0341 	mov.w	r3, r1, lsl #1
80001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
8000100c:	bf18      	it	ne
8000100e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
80001012:	d011      	beq.n	80001038 <__cmpsf2+0x40>
80001014:	b001      	add	sp, #4
80001016:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
8000101a:	bf18      	it	ne
8000101c:	ea90 0f01 	teqne	r0, r1
80001020:	bf58      	it	pl
80001022:	ebb2 0003 	subspl.w	r0, r2, r3
80001026:	bf88      	it	hi
80001028:	17c8      	asrhi	r0, r1, #31
8000102a:	bf38      	it	cc
8000102c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
80001030:	bf18      	it	ne
80001032:	f040 0001 	orrne.w	r0, r0, #1
80001036:	4770      	bx	lr
80001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
8000103c:	d102      	bne.n	80001044 <__cmpsf2+0x4c>
8000103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
80001042:	d105      	bne.n	80001050 <__cmpsf2+0x58>
80001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
80001048:	d1e4      	bne.n	80001014 <__cmpsf2+0x1c>
8000104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
8000104e:	d0e1      	beq.n	80001014 <__cmpsf2+0x1c>
80001050:	f85d 0b04 	ldr.w	r0, [sp], #4
80001054:	4770      	bx	lr
80001056:	bf00      	nop

80001058 <__aeabi_cfrcmple>:
80001058:	4684      	mov	ip, r0
8000105a:	4608      	mov	r0, r1
8000105c:	4661      	mov	r1, ip
8000105e:	e7ff      	b.n	80001060 <__aeabi_cfcmpeq>

80001060 <__aeabi_cfcmpeq>:
80001060:	b50f      	push	{r0, r1, r2, r3, lr}
80001062:	f7ff ffc9 	bl	80000ff8 <__cmpsf2>
80001066:	2800      	cmp	r0, #0
80001068:	bf48      	it	mi
8000106a:	f110 0f00 	cmnmi.w	r0, #0
8000106e:	bd0f      	pop	{r0, r1, r2, r3, pc}

80001070 <__aeabi_fcmpeq>:
80001070:	f84d ed08 	str.w	lr, [sp, #-8]!
80001074:	f7ff fff4 	bl	80001060 <__aeabi_cfcmpeq>
80001078:	bf0c      	ite	eq
8000107a:	2001      	moveq	r0, #1
8000107c:	2000      	movne	r0, #0
8000107e:	f85d fb08 	ldr.w	pc, [sp], #8
80001082:	bf00      	nop

80001084 <__aeabi_fcmplt>:
80001084:	f84d ed08 	str.w	lr, [sp, #-8]!
80001088:	f7ff ffea 	bl	80001060 <__aeabi_cfcmpeq>
8000108c:	bf34      	ite	cc
8000108e:	2001      	movcc	r0, #1
80001090:	2000      	movcs	r0, #0
80001092:	f85d fb08 	ldr.w	pc, [sp], #8
80001096:	bf00      	nop

80001098 <__aeabi_fcmple>:
80001098:	f84d ed08 	str.w	lr, [sp, #-8]!
8000109c:	f7ff ffe0 	bl	80001060 <__aeabi_cfcmpeq>
800010a0:	bf94      	ite	ls
800010a2:	2001      	movls	r0, #1
800010a4:	2000      	movhi	r0, #0
800010a6:	f85d fb08 	ldr.w	pc, [sp], #8
800010aa:	bf00      	nop

800010ac <__aeabi_fcmpge>:
800010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
800010b0:	f7ff ffd2 	bl	80001058 <__aeabi_cfrcmple>
800010b4:	bf94      	ite	ls
800010b6:	2001      	movls	r0, #1
800010b8:	2000      	movhi	r0, #0
800010ba:	f85d fb08 	ldr.w	pc, [sp], #8
800010be:	bf00      	nop

800010c0 <__aeabi_fcmpgt>:
800010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
800010c4:	f7ff ffc8 	bl	80001058 <__aeabi_cfrcmple>
800010c8:	bf34      	ite	cc
800010ca:	2001      	movcc	r0, #1
800010cc:	2000      	movcs	r0, #0
800010ce:	f85d fb08 	ldr.w	pc, [sp], #8
800010d2:	bf00      	nop

800010d4 <__aeabi_f2iz>:
800010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
800010d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
800010dc:	d30f      	bcc.n	800010fe <__aeabi_f2iz+0x2a>
800010de:	f04f 039e 	mov.w	r3, #158	; 0x9e
800010e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
800010e6:	d90d      	bls.n	80001104 <__aeabi_f2iz+0x30>
800010e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
800010ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
800010f0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
800010f4:	fa23 f002 	lsr.w	r0, r3, r2
800010f8:	bf18      	it	ne
800010fa:	4240      	negne	r0, r0
800010fc:	4770      	bx	lr
800010fe:	f04f 0000 	mov.w	r0, #0
80001102:	4770      	bx	lr
80001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
80001108:	d101      	bne.n	8000110e <__aeabi_f2iz+0x3a>
8000110a:	0242      	lsls	r2, r0, #9
8000110c:	d105      	bne.n	8000111a <__aeabi_f2iz+0x46>
8000110e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
80001112:	bf08      	it	eq
80001114:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
80001118:	4770      	bx	lr
8000111a:	f04f 0000 	mov.w	r0, #0
8000111e:	4770      	bx	lr

80001120 <microsecondDelay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void microsecondDelay()
{
80001120:	b480      	push	{r7}
80001122:	b083      	sub	sp, #12
80001124:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++)
80001126:	2300      	movs	r3, #0
80001128:	607b      	str	r3, [r7, #4]
8000112a:	e002      	b.n	80001132 <microsecondDelay+0x12>
8000112c:	687b      	ldr	r3, [r7, #4]
8000112e:	3301      	adds	r3, #1
80001130:	607b      	str	r3, [r7, #4]
80001132:	687b      	ldr	r3, [r7, #4]
80001134:	2b01      	cmp	r3, #1
80001136:	ddf9      	ble.n	8000112c <microsecondDelay+0xc>
	{}
}
80001138:	bf00      	nop
8000113a:	370c      	adds	r7, #12
8000113c:	46bd      	mov	sp, r7
8000113e:	bc80      	pop	{r7}
80001140:	4770      	bx	lr
	...

80001144 <setDirectionS0>:

void setDirectionS0(int direction)
{
80001144:	b580      	push	{r7, lr}
80001146:	b082      	sub	sp, #8
80001148:	af00      	add	r7, sp, #0
8000114a:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
8000114c:	687b      	ldr	r3, [r7, #4]
8000114e:	2b01      	cmp	r3, #1
80001150:	d105      	bne.n	8000115e <setDirectionS0+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
80001152:	2201      	movs	r2, #1
80001154:	2102      	movs	r1, #2
80001156:	4806      	ldr	r0, [pc, #24]	; (80001170 <setDirectionS0+0x2c>)
80001158:	f001 fb2c 	bl	800027b4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
	}
}
8000115c:	e004      	b.n	80001168 <setDirectionS0+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
8000115e:	2200      	movs	r2, #0
80001160:	2102      	movs	r1, #2
80001162:	4803      	ldr	r0, [pc, #12]	; (80001170 <setDirectionS0+0x2c>)
80001164:	f001 fb26 	bl	800027b4 <HAL_GPIO_WritePin>
}
80001168:	bf00      	nop
8000116a:	3708      	adds	r7, #8
8000116c:	46bd      	mov	sp, r7
8000116e:	bd80      	pop	{r7, pc}
80001170:	40010800 	.word	0x40010800

80001174 <setDirectionS1>:

void setDirectionS1(int direction)
{
80001174:	b580      	push	{r7, lr}
80001176:	b082      	sub	sp, #8
80001178:	af00      	add	r7, sp, #0
8000117a:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
8000117c:	687b      	ldr	r3, [r7, #4]
8000117e:	2b01      	cmp	r3, #1
80001180:	d105      	bne.n	8000118e <setDirectionS1+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
80001182:	2201      	movs	r2, #1
80001184:	2108      	movs	r1, #8
80001186:	4806      	ldr	r0, [pc, #24]	; (800011a0 <setDirectionS1+0x2c>)
80001188:	f001 fb14 	bl	800027b4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
	}
}
8000118c:	e004      	b.n	80001198 <setDirectionS1+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
8000118e:	2200      	movs	r2, #0
80001190:	2108      	movs	r1, #8
80001192:	4803      	ldr	r0, [pc, #12]	; (800011a0 <setDirectionS1+0x2c>)
80001194:	f001 fb0e 	bl	800027b4 <HAL_GPIO_WritePin>
}
80001198:	bf00      	nop
8000119a:	3708      	adds	r7, #8
8000119c:	46bd      	mov	sp, r7
8000119e:	bd80      	pop	{r7, pc}
800011a0:	40010800 	.word	0x40010800

800011a4 <setDirectionS2>:

void setDirectionS2(int direction)
{
800011a4:	b580      	push	{r7, lr}
800011a6:	b082      	sub	sp, #8
800011a8:	af00      	add	r7, sp, #0
800011aa:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
800011ac:	687b      	ldr	r3, [r7, #4]
800011ae:	2b01      	cmp	r3, #1
800011b0:	d105      	bne.n	800011be <setDirectionS2+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
800011b2:	2201      	movs	r2, #1
800011b4:	2120      	movs	r1, #32
800011b6:	4806      	ldr	r0, [pc, #24]	; (800011d0 <setDirectionS2+0x2c>)
800011b8:	f001 fafc 	bl	800027b4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
	}
}
800011bc:	e004      	b.n	800011c8 <setDirectionS2+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
800011be:	2200      	movs	r2, #0
800011c0:	2120      	movs	r1, #32
800011c2:	4803      	ldr	r0, [pc, #12]	; (800011d0 <setDirectionS2+0x2c>)
800011c4:	f001 faf6 	bl	800027b4 <HAL_GPIO_WritePin>
}
800011c8:	bf00      	nop
800011ca:	3708      	adds	r7, #8
800011cc:	46bd      	mov	sp, r7
800011ce:	bd80      	pop	{r7, pc}
800011d0:	40010800 	.word	0x40010800

800011d4 <sendPulseS0>:

void sendPulseS0()
{
800011d4:	b580      	push	{r7, lr}
800011d6:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
800011d8:	2101      	movs	r1, #1
800011da:	4805      	ldr	r0, [pc, #20]	; (800011f0 <sendPulseS0+0x1c>)
800011dc:	f001 fb02 	bl	800027e4 <HAL_GPIO_TogglePin>
	 microsecondDelay();
800011e0:	f7ff ff9e 	bl	80001120 <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
800011e4:	2101      	movs	r1, #1
800011e6:	4802      	ldr	r0, [pc, #8]	; (800011f0 <sendPulseS0+0x1c>)
800011e8:	f001 fafc 	bl	800027e4 <HAL_GPIO_TogglePin>
}
800011ec:	bf00      	nop
800011ee:	bd80      	pop	{r7, pc}
800011f0:	40010800 	.word	0x40010800

800011f4 <sendPulseS1>:

void sendPulseS1()
{
800011f4:	b580      	push	{r7, lr}
800011f6:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
800011f8:	2104      	movs	r1, #4
800011fa:	4805      	ldr	r0, [pc, #20]	; (80001210 <sendPulseS1+0x1c>)
800011fc:	f001 faf2 	bl	800027e4 <HAL_GPIO_TogglePin>
	 microsecondDelay();
80001200:	f7ff ff8e 	bl	80001120 <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
80001204:	2104      	movs	r1, #4
80001206:	4802      	ldr	r0, [pc, #8]	; (80001210 <sendPulseS1+0x1c>)
80001208:	f001 faec 	bl	800027e4 <HAL_GPIO_TogglePin>
}
8000120c:	bf00      	nop
8000120e:	bd80      	pop	{r7, pc}
80001210:	40010800 	.word	0x40010800

80001214 <sendPulseS2>:

void sendPulseS2()
{
80001214:	b580      	push	{r7, lr}
80001216:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
80001218:	2110      	movs	r1, #16
8000121a:	4805      	ldr	r0, [pc, #20]	; (80001230 <sendPulseS2+0x1c>)
8000121c:	f001 fae2 	bl	800027e4 <HAL_GPIO_TogglePin>
	 microsecondDelay();
80001220:	f7ff ff7e 	bl	80001120 <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
80001224:	2110      	movs	r1, #16
80001226:	4802      	ldr	r0, [pc, #8]	; (80001230 <sendPulseS2+0x1c>)
80001228:	f001 fadc 	bl	800027e4 <HAL_GPIO_TogglePin>
}
8000122c:	bf00      	nop
8000122e:	bd80      	pop	{r7, pc}
80001230:	40010800 	.word	0x40010800

80001234 <motionComplete>:


void motionComplete(StepperMotor* motor)
{
80001234:	b480      	push	{r7}
80001236:	b083      	sub	sp, #12
80001238:	af00      	add	r7, sp, #0
8000123a:	6078      	str	r0, [r7, #4]
	motor->currentCount = 0;
8000123c:	687b      	ldr	r3, [r7, #4]
8000123e:	2200      	movs	r2, #0
80001240:	821a      	strh	r2, [r3, #16]
	motor->targetCount = 0;
80001242:	687b      	ldr	r3, [r7, #4]
80001244:	2200      	movs	r2, #0
80001246:	825a      	strh	r2, [r3, #18]
	motor->rampingUp = 0;
80001248:	687b      	ldr	r3, [r7, #4]
8000124a:	2200      	movs	r2, #0
8000124c:	751a      	strb	r2, [r3, #20]
	motor->rampingDown = 0;
8000124e:	687b      	ldr	r3, [r7, #4]
80001250:	2200      	movs	r2, #0
80001252:	755a      	strb	r2, [r3, #21]
	motor->rampUpCount = 0;
80001254:	687b      	ldr	r3, [r7, #4]
80001256:	2200      	movs	r2, #0
80001258:	759a      	strb	r2, [r3, #22]
	motor->rampDownCount = 0;
8000125a:	687b      	ldr	r3, [r7, #4]
8000125c:	2200      	movs	r2, #0
8000125e:	75da      	strb	r2, [r3, #23]
	motor->estDurationOfMovement = 0;
80001260:	687b      	ldr	r3, [r7, #4]
80001262:	f04f 0200 	mov.w	r2, #0
80001266:	625a      	str	r2, [r3, #36]	; 0x24
}
80001268:	bf00      	nop
8000126a:	370c      	adds	r7, #12
8000126c:	46bd      	mov	sp, r7
8000126e:	bc80      	pop	{r7}
80001270:	4770      	bx	lr
	...

80001274 <programInit>:

void programInit()
{
80001274:	b580      	push	{r7, lr}
80001276:	b082      	sub	sp, #8
80001278:	af00      	add	r7, sp, #0
	//Timer Initializations
	motor[0].timerHandle = &htim2;
8000127a:	4b36      	ldr	r3, [pc, #216]	; (80001354 <programInit+0xe0>)
8000127c:	4a36      	ldr	r2, [pc, #216]	; (80001358 <programInit+0xe4>)
8000127e:	61da      	str	r2, [r3, #28]
	motor[1].timerHandle = &htim3;
80001280:	4b34      	ldr	r3, [pc, #208]	; (80001354 <programInit+0xe0>)
80001282:	4a36      	ldr	r2, [pc, #216]	; (8000135c <programInit+0xe8>)
80001284:	64da      	str	r2, [r3, #76]	; 0x4c
	motor[2].timerHandle = &htim4;
80001286:	4b33      	ldr	r3, [pc, #204]	; (80001354 <programInit+0xe0>)
80001288:	4a35      	ldr	r2, [pc, #212]	; (80001360 <programInit+0xec>)
8000128a:	67da      	str	r2, [r3, #124]	; 0x7c

	//Direction-set function pointers
	motor[0].setDirection = setDirectionS0;
8000128c:	4b31      	ldr	r3, [pc, #196]	; (80001354 <programInit+0xe0>)
8000128e:	4a35      	ldr	r2, [pc, #212]	; (80001364 <programInit+0xf0>)
80001290:	605a      	str	r2, [r3, #4]
	motor[1].setDirection = setDirectionS1;
80001292:	4b30      	ldr	r3, [pc, #192]	; (80001354 <programInit+0xe0>)
80001294:	4a34      	ldr	r2, [pc, #208]	; (80001368 <programInit+0xf4>)
80001296:	635a      	str	r2, [r3, #52]	; 0x34
	motor[2].setDirection = setDirectionS2;
80001298:	4b2e      	ldr	r3, [pc, #184]	; (80001354 <programInit+0xe0>)
8000129a:	4a34      	ldr	r2, [pc, #208]	; (8000136c <programInit+0xf8>)
8000129c:	665a      	str	r2, [r3, #100]	; 0x64

	//Set pulse pointers
	motor[0].sendPulse = sendPulseS0;
8000129e:	4b2d      	ldr	r3, [pc, #180]	; (80001354 <programInit+0xe0>)
800012a0:	4a33      	ldr	r2, [pc, #204]	; (80001370 <programInit+0xfc>)
800012a2:	601a      	str	r2, [r3, #0]
	motor[1].sendPulse = sendPulseS1;
800012a4:	4b2b      	ldr	r3, [pc, #172]	; (80001354 <programInit+0xe0>)
800012a6:	4a33      	ldr	r2, [pc, #204]	; (80001374 <programInit+0x100>)
800012a8:	631a      	str	r2, [r3, #48]	; 0x30
	motor[2].sendPulse = sendPulseS2;
800012aa:	4b2a      	ldr	r3, [pc, #168]	; (80001354 <programInit+0xe0>)
800012ac:	4a32      	ldr	r2, [pc, #200]	; (80001378 <programInit+0x104>)
800012ae:	661a      	str	r2, [r3, #96]	; 0x60

	newCommandAvailable = 0;
800012b0:	4b32      	ldr	r3, [pc, #200]	; (8000137c <programInit+0x108>)
800012b2:	2200      	movs	r2, #0
800012b4:	701a      	strb	r2, [r3, #0]
	previousMotionComplete = 1;
800012b6:	4b32      	ldr	r3, [pc, #200]	; (80001380 <programInit+0x10c>)
800012b8:	2201      	movs	r2, #1
800012ba:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
800012bc:	2300      	movs	r3, #0
800012be:	71fb      	strb	r3, [r7, #7]
800012c0:	e041      	b.n	80001346 <programInit+0xd2>
	{
		motionComplete(&motor[i]);
800012c2:	79fa      	ldrb	r2, [r7, #7]
800012c4:	4613      	mov	r3, r2
800012c6:	005b      	lsls	r3, r3, #1
800012c8:	4413      	add	r3, r2
800012ca:	011b      	lsls	r3, r3, #4
800012cc:	4a21      	ldr	r2, [pc, #132]	; (80001354 <programInit+0xe0>)
800012ce:	4413      	add	r3, r2
800012d0:	4618      	mov	r0, r3
800012d2:	f7ff ffaf 	bl	80001234 <motionComplete>
		motor[i].scaleFactor = 1;
800012d6:	79fa      	ldrb	r2, [r7, #7]
800012d8:	491e      	ldr	r1, [pc, #120]	; (80001354 <programInit+0xe0>)
800012da:	4613      	mov	r3, r2
800012dc:	005b      	lsls	r3, r3, #1
800012de:	4413      	add	r3, r2
800012e0:	011b      	lsls	r3, r3, #4
800012e2:	440b      	add	r3, r1
800012e4:	3320      	adds	r3, #32
800012e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
800012ea:	601a      	str	r2, [r3, #0]
		motor[i].direction = CLOCKWISE;
800012ec:	79fa      	ldrb	r2, [r7, #7]
800012ee:	4919      	ldr	r1, [pc, #100]	; (80001354 <programInit+0xe0>)
800012f0:	4613      	mov	r3, r2
800012f2:	005b      	lsls	r3, r3, #1
800012f4:	4413      	add	r3, r2
800012f6:	011b      	lsls	r3, r3, #4
800012f8:	440b      	add	r3, r1
800012fa:	3308      	adds	r3, #8
800012fc:	22ff      	movs	r2, #255	; 0xff
800012fe:	701a      	strb	r2, [r3, #0]

		motor[i].absolutePosition = INITIAL_POSITION;
80001300:	79fa      	ldrb	r2, [r7, #7]
80001302:	4914      	ldr	r1, [pc, #80]	; (80001354 <programInit+0xe0>)
80001304:	4613      	mov	r3, r2
80001306:	005b      	lsls	r3, r3, #1
80001308:	4413      	add	r3, r2
8000130a:	011b      	lsls	r3, r3, #4
8000130c:	440b      	add	r3, r1
8000130e:	330c      	adds	r3, #12
80001310:	f240 120b 	movw	r2, #267	; 0x10b
80001314:	601a      	str	r2, [r3, #0]
		motor[i].pulseFlag = 0;
80001316:	79fa      	ldrb	r2, [r7, #7]
80001318:	490e      	ldr	r1, [pc, #56]	; (80001354 <programInit+0xe0>)
8000131a:	4613      	mov	r3, r2
8000131c:	005b      	lsls	r3, r3, #1
8000131e:	4413      	add	r3, r2
80001320:	011b      	lsls	r3, r3, #4
80001322:	440b      	add	r3, r1
80001324:	3318      	adds	r3, #24
80001326:	2200      	movs	r2, #0
80001328:	701a      	strb	r2, [r3, #0]
		motor[i].estDurationOfMovement = 0;
8000132a:	79fa      	ldrb	r2, [r7, #7]
8000132c:	4909      	ldr	r1, [pc, #36]	; (80001354 <programInit+0xe0>)
8000132e:	4613      	mov	r3, r2
80001330:	005b      	lsls	r3, r3, #1
80001332:	4413      	add	r3, r2
80001334:	011b      	lsls	r3, r3, #4
80001336:	440b      	add	r3, r1
80001338:	3324      	adds	r3, #36	; 0x24
8000133a:	f04f 0200 	mov.w	r2, #0
8000133e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
80001340:	79fb      	ldrb	r3, [r7, #7]
80001342:	3301      	adds	r3, #1
80001344:	71fb      	strb	r3, [r7, #7]
80001346:	79fb      	ldrb	r3, [r7, #7]
80001348:	2b02      	cmp	r3, #2
8000134a:	d9ba      	bls.n	800012c2 <programInit+0x4e>
	}
}
8000134c:	bf00      	nop
8000134e:	3708      	adds	r7, #8
80001350:	46bd      	mov	sp, r7
80001352:	bd80      	pop	{r7, pc}
80001354:	20000484 	.word	0x20000484
80001358:	20000444 	.word	0x20000444
8000135c:	20000400 	.word	0x20000400
80001360:	200003c0 	.word	0x200003c0
80001364:	80001145 	.word	0x80001145
80001368:	80001175 	.word	0x80001175
8000136c:	800011a5 	.word	0x800011a5
80001370:	800011d5 	.word	0x800011d5
80001374:	800011f5 	.word	0x800011f5
80001378:	80001215 	.word	0x80001215
8000137c:	20000440 	.word	0x20000440
80001380:	20000000 	.word	0x20000000

80001384 <setNextInterruptInterval>:


void setNextInterruptInterval(StepperMotor* motor)
{
80001384:	b590      	push	{r4, r7, lr}
80001386:	b083      	sub	sp, #12
80001388:	af00      	add	r7, sp, #0
8000138a:	6078      	str	r0, [r7, #4]
	if (abs(motor->targetCount) > 2*NO_OF_RAMP_STEPS)
8000138c:	687b      	ldr	r3, [r7, #4]
8000138e:	8a5b      	ldrh	r3, [r3, #18]
80001390:	b21b      	sxth	r3, r3
80001392:	2b00      	cmp	r3, #0
80001394:	bfb8      	it	lt
80001396:	425b      	neglt	r3, r3
80001398:	2b40      	cmp	r3, #64	; 0x40
8000139a:	dd53      	ble.n	80001444 <setNextInterruptInterval+0xc0>
	{
		//Calculate next delay
		if (motor->currentCount < NO_OF_RAMP_STEPS)
8000139c:	687b      	ldr	r3, [r7, #4]
8000139e:	8a1b      	ldrh	r3, [r3, #16]
800013a0:	b21b      	sxth	r3, r3
800013a2:	2b1f      	cmp	r3, #31
800013a4:	dc19      	bgt.n	800013da <setNextInterruptInterval+0x56>
		{
			motor->rampUpCount = abs(motor->currentCount);
800013a6:	687b      	ldr	r3, [r7, #4]
800013a8:	8a1b      	ldrh	r3, [r3, #16]
800013aa:	b21b      	sxth	r3, r3
800013ac:	2b00      	cmp	r3, #0
800013ae:	bfb8      	it	lt
800013b0:	425b      	neglt	r3, r3
800013b2:	b2da      	uxtb	r2, r3
800013b4:	687b      	ldr	r3, [r7, #4]
800013b6:	759a      	strb	r2, [r3, #22]
			ramp(motor->rampUpCount, motor->timerHandle, motor->scaleFactor);
800013b8:	687b      	ldr	r3, [r7, #4]
800013ba:	7d9b      	ldrb	r3, [r3, #22]
800013bc:	b2d8      	uxtb	r0, r3
800013be:	687b      	ldr	r3, [r7, #4]
800013c0:	69d9      	ldr	r1, [r3, #28]
800013c2:	687b      	ldr	r3, [r7, #4]
800013c4:	6a1b      	ldr	r3, [r3, #32]
800013c6:	461a      	mov	r2, r3
800013c8:	f000 f8be 	bl	80001548 <ramp>

			motor->rampingUp = ACTIVATED;
800013cc:	687b      	ldr	r3, [r7, #4]
800013ce:	2201      	movs	r2, #1
800013d0:	751a      	strb	r2, [r3, #20]
			motor->rampingDown = DEACTIVATED;
800013d2:	687b      	ldr	r3, [r7, #4]
800013d4:	2200      	movs	r2, #0
800013d6:	755a      	strb	r2, [r3, #21]
			ramp(motor->rampDownCount, motor->timerHandle, motor->scaleFactor);
			motor->rampingDown = ACTIVATED;
			motor->rampingUp = DEACTIVATED;
		}
	}
}
800013d8:	e0b0      	b.n	8000153c <setNextInterruptInterval+0x1b8>
		else if (motor->targetCount - motor->currentCount < NO_OF_RAMP_STEPS)
800013da:	687b      	ldr	r3, [r7, #4]
800013dc:	8a5b      	ldrh	r3, [r3, #18]
800013de:	b21b      	sxth	r3, r3
800013e0:	461a      	mov	r2, r3
800013e2:	687b      	ldr	r3, [r7, #4]
800013e4:	8a1b      	ldrh	r3, [r3, #16]
800013e6:	b21b      	sxth	r3, r3
800013e8:	1ad3      	subs	r3, r2, r3
800013ea:	2b1f      	cmp	r3, #31
800013ec:	dc1e      	bgt.n	8000142c <setNextInterruptInterval+0xa8>
			motor->rampDownCount = abs(motor->targetCount - motor->currentCount);
800013ee:	687b      	ldr	r3, [r7, #4]
800013f0:	8a5b      	ldrh	r3, [r3, #18]
800013f2:	b21b      	sxth	r3, r3
800013f4:	461a      	mov	r2, r3
800013f6:	687b      	ldr	r3, [r7, #4]
800013f8:	8a1b      	ldrh	r3, [r3, #16]
800013fa:	b21b      	sxth	r3, r3
800013fc:	1ad3      	subs	r3, r2, r3
800013fe:	2b00      	cmp	r3, #0
80001400:	bfb8      	it	lt
80001402:	425b      	neglt	r3, r3
80001404:	b2da      	uxtb	r2, r3
80001406:	687b      	ldr	r3, [r7, #4]
80001408:	75da      	strb	r2, [r3, #23]
			ramp(motor->rampDownCount, motor->timerHandle, motor->scaleFactor);
8000140a:	687b      	ldr	r3, [r7, #4]
8000140c:	7ddb      	ldrb	r3, [r3, #23]
8000140e:	b2d8      	uxtb	r0, r3
80001410:	687b      	ldr	r3, [r7, #4]
80001412:	69d9      	ldr	r1, [r3, #28]
80001414:	687b      	ldr	r3, [r7, #4]
80001416:	6a1b      	ldr	r3, [r3, #32]
80001418:	461a      	mov	r2, r3
8000141a:	f000 f895 	bl	80001548 <ramp>
			motor->rampingDown = ACTIVATED;
8000141e:	687b      	ldr	r3, [r7, #4]
80001420:	2201      	movs	r2, #1
80001422:	755a      	strb	r2, [r3, #21]
			motor->rampingUp = DEACTIVATED;
80001424:	687b      	ldr	r3, [r7, #4]
80001426:	2200      	movs	r2, #0
80001428:	751a      	strb	r2, [r3, #20]
}
8000142a:	e087      	b.n	8000153c <setNextInterruptInterval+0x1b8>
		else if (motor->targetCount == motor->currentCount)
8000142c:	687b      	ldr	r3, [r7, #4]
8000142e:	8a5b      	ldrh	r3, [r3, #18]
80001430:	b21a      	sxth	r2, r3
80001432:	687b      	ldr	r3, [r7, #4]
80001434:	8a1b      	ldrh	r3, [r3, #16]
80001436:	b21b      	sxth	r3, r3
80001438:	429a      	cmp	r2, r3
8000143a:	d17f      	bne.n	8000153c <setNextInterruptInterval+0x1b8>
			motionComplete(motor);
8000143c:	6878      	ldr	r0, [r7, #4]
8000143e:	f7ff fef9 	bl	80001234 <motionComplete>
}
80001442:	e07b      	b.n	8000153c <setNextInterruptInterval+0x1b8>
		if (motor->currentCount < (int)(abs(motor->targetCount)/2.0))
80001444:	687b      	ldr	r3, [r7, #4]
80001446:	8a1b      	ldrh	r3, [r3, #16]
80001448:	b21b      	sxth	r3, r3
8000144a:	461c      	mov	r4, r3
8000144c:	687b      	ldr	r3, [r7, #4]
8000144e:	8a5b      	ldrh	r3, [r3, #18]
80001450:	b21b      	sxth	r3, r3
80001452:	2b00      	cmp	r3, #0
80001454:	bfb8      	it	lt
80001456:	425b      	neglt	r3, r3
80001458:	4618      	mov	r0, r3
8000145a:	f7fe ffcb 	bl	800003f4 <__aeabi_i2d>
8000145e:	f04f 0200 	mov.w	r2, #0
80001462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
80001466:	f7ff f959 	bl	8000071c <__aeabi_ddiv>
8000146a:	4602      	mov	r2, r0
8000146c:	460b      	mov	r3, r1
8000146e:	4610      	mov	r0, r2
80001470:	4619      	mov	r1, r3
80001472:	f7ff fac3 	bl	800009fc <__aeabi_d2iz>
80001476:	4603      	mov	r3, r0
80001478:	429c      	cmp	r4, r3
8000147a:	da19      	bge.n	800014b0 <setNextInterruptInterval+0x12c>
			motor->rampUpCount = abs((motor->currentCount));
8000147c:	687b      	ldr	r3, [r7, #4]
8000147e:	8a1b      	ldrh	r3, [r3, #16]
80001480:	b21b      	sxth	r3, r3
80001482:	2b00      	cmp	r3, #0
80001484:	bfb8      	it	lt
80001486:	425b      	neglt	r3, r3
80001488:	b2da      	uxtb	r2, r3
8000148a:	687b      	ldr	r3, [r7, #4]
8000148c:	759a      	strb	r2, [r3, #22]
			ramp(motor->rampUpCount, motor->timerHandle, motor->scaleFactor);
8000148e:	687b      	ldr	r3, [r7, #4]
80001490:	7d9b      	ldrb	r3, [r3, #22]
80001492:	b2d8      	uxtb	r0, r3
80001494:	687b      	ldr	r3, [r7, #4]
80001496:	69d9      	ldr	r1, [r3, #28]
80001498:	687b      	ldr	r3, [r7, #4]
8000149a:	6a1b      	ldr	r3, [r3, #32]
8000149c:	461a      	mov	r2, r3
8000149e:	f000 f853 	bl	80001548 <ramp>
			motor->rampingUp = ACTIVATED;
800014a2:	687b      	ldr	r3, [r7, #4]
800014a4:	2201      	movs	r2, #1
800014a6:	751a      	strb	r2, [r3, #20]
			motor->rampingDown = DEACTIVATED;
800014a8:	687b      	ldr	r3, [r7, #4]
800014aa:	2200      	movs	r2, #0
800014ac:	755a      	strb	r2, [r3, #21]
}
800014ae:	e045      	b.n	8000153c <setNextInterruptInterval+0x1b8>
		else if (motor->targetCount == motor->currentCount)
800014b0:	687b      	ldr	r3, [r7, #4]
800014b2:	8a5b      	ldrh	r3, [r3, #18]
800014b4:	b21a      	sxth	r2, r3
800014b6:	687b      	ldr	r3, [r7, #4]
800014b8:	8a1b      	ldrh	r3, [r3, #16]
800014ba:	b21b      	sxth	r3, r3
800014bc:	429a      	cmp	r2, r3
800014be:	d103      	bne.n	800014c8 <setNextInterruptInterval+0x144>
			motionComplete(motor);
800014c0:	6878      	ldr	r0, [r7, #4]
800014c2:	f7ff feb7 	bl	80001234 <motionComplete>
}
800014c6:	e039      	b.n	8000153c <setNextInterruptInterval+0x1b8>
		else if (motor->currentCount >= (int)(abs(motor->targetCount)/2.0))
800014c8:	687b      	ldr	r3, [r7, #4]
800014ca:	8a1b      	ldrh	r3, [r3, #16]
800014cc:	b21b      	sxth	r3, r3
800014ce:	461c      	mov	r4, r3
800014d0:	687b      	ldr	r3, [r7, #4]
800014d2:	8a5b      	ldrh	r3, [r3, #18]
800014d4:	b21b      	sxth	r3, r3
800014d6:	2b00      	cmp	r3, #0
800014d8:	bfb8      	it	lt
800014da:	425b      	neglt	r3, r3
800014dc:	4618      	mov	r0, r3
800014de:	f7fe ff89 	bl	800003f4 <__aeabi_i2d>
800014e2:	f04f 0200 	mov.w	r2, #0
800014e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
800014ea:	f7ff f917 	bl	8000071c <__aeabi_ddiv>
800014ee:	4602      	mov	r2, r0
800014f0:	460b      	mov	r3, r1
800014f2:	4610      	mov	r0, r2
800014f4:	4619      	mov	r1, r3
800014f6:	f7ff fa81 	bl	800009fc <__aeabi_d2iz>
800014fa:	4603      	mov	r3, r0
800014fc:	429c      	cmp	r4, r3
800014fe:	db1d      	blt.n	8000153c <setNextInterruptInterval+0x1b8>
			motor->rampDownCount = abs((motor->targetCount - motor->currentCount));
80001500:	687b      	ldr	r3, [r7, #4]
80001502:	8a5b      	ldrh	r3, [r3, #18]
80001504:	b21b      	sxth	r3, r3
80001506:	461a      	mov	r2, r3
80001508:	687b      	ldr	r3, [r7, #4]
8000150a:	8a1b      	ldrh	r3, [r3, #16]
8000150c:	b21b      	sxth	r3, r3
8000150e:	1ad3      	subs	r3, r2, r3
80001510:	2b00      	cmp	r3, #0
80001512:	bfb8      	it	lt
80001514:	425b      	neglt	r3, r3
80001516:	b2da      	uxtb	r2, r3
80001518:	687b      	ldr	r3, [r7, #4]
8000151a:	75da      	strb	r2, [r3, #23]
			ramp(motor->rampDownCount, motor->timerHandle, motor->scaleFactor);
8000151c:	687b      	ldr	r3, [r7, #4]
8000151e:	7ddb      	ldrb	r3, [r3, #23]
80001520:	b2d8      	uxtb	r0, r3
80001522:	687b      	ldr	r3, [r7, #4]
80001524:	69d9      	ldr	r1, [r3, #28]
80001526:	687b      	ldr	r3, [r7, #4]
80001528:	6a1b      	ldr	r3, [r3, #32]
8000152a:	461a      	mov	r2, r3
8000152c:	f000 f80c 	bl	80001548 <ramp>
			motor->rampingDown = ACTIVATED;
80001530:	687b      	ldr	r3, [r7, #4]
80001532:	2201      	movs	r2, #1
80001534:	755a      	strb	r2, [r3, #21]
			motor->rampingUp = DEACTIVATED;
80001536:	687b      	ldr	r3, [r7, #4]
80001538:	2200      	movs	r2, #0
8000153a:	751a      	strb	r2, [r3, #20]
}
8000153c:	bf00      	nop
8000153e:	370c      	adds	r7, #12
80001540:	46bd      	mov	sp, r7
80001542:	bd90      	pop	{r4, r7, pc}
80001544:	0000      	movs	r0, r0
	...

80001548 <ramp>:

void ramp(uint8_t rampCount, TIM_HandleTypeDef* timerHandle, volatile float scaleFactor)
{
80001548:	b5b0      	push	{r4, r5, r7, lr}
8000154a:	b086      	sub	sp, #24
8000154c:	af00      	add	r7, sp, #0
8000154e:	4603      	mov	r3, r0
80001550:	60b9      	str	r1, [r7, #8]
80001552:	607a      	str	r2, [r7, #4]
80001554:	73fb      	strb	r3, [r7, #15]
	uint16_t nextCompareValue = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[rampCount])*scaleFactor);
80001556:	7bfb      	ldrb	r3, [r7, #15]
80001558:	4a1f      	ldr	r2, [pc, #124]	; (800015d8 <ramp+0x90>)
8000155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
8000155e:	4618      	mov	r0, r3
80001560:	f7fe ff5a 	bl	80000418 <__aeabi_f2d>
80001564:	a318      	add	r3, pc, #96	; (adr r3, 800015c8 <ramp+0x80>)
80001566:	e9d3 2300 	ldrd	r2, r3, [r3]
8000156a:	f7fe ffad 	bl	800004c8 <__aeabi_dmul>
8000156e:	4603      	mov	r3, r0
80001570:	460c      	mov	r4, r1
80001572:	4618      	mov	r0, r3
80001574:	4621      	mov	r1, r4
	uint16_t nextCompareValue = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
80001576:	a316      	add	r3, pc, #88	; (adr r3, 800015d0 <ramp+0x88>)
80001578:	e9d3 2300 	ldrd	r2, r3, [r3]
8000157c:	f7fe fdee 	bl	8000015c <__adddf3>
80001580:	4603      	mov	r3, r0
80001582:	460c      	mov	r4, r1
80001584:	4625      	mov	r5, r4
80001586:	461c      	mov	r4, r3
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[rampCount])*scaleFactor);
80001588:	687b      	ldr	r3, [r7, #4]
8000158a:	4618      	mov	r0, r3
8000158c:	f7fe ff44 	bl	80000418 <__aeabi_f2d>
80001590:	4602      	mov	r2, r0
80001592:	460b      	mov	r3, r1
80001594:	4620      	mov	r0, r4
80001596:	4629      	mov	r1, r5
80001598:	f7fe ff96 	bl	800004c8 <__aeabi_dmul>
8000159c:	4603      	mov	r3, r0
8000159e:	460c      	mov	r4, r1
	uint16_t nextCompareValue = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
800015a0:	4618      	mov	r0, r3
800015a2:	4621      	mov	r1, r4
800015a4:	f7ff fa52 	bl	80000a4c <__aeabi_d2uiz>
800015a8:	4603      	mov	r3, r0
800015aa:	82fb      	strh	r3, [r7, #22]

	__HAL_TIM_SET_AUTORELOAD(timerHandle, nextCompareValue);
800015ac:	68bb      	ldr	r3, [r7, #8]
800015ae:	681b      	ldr	r3, [r3, #0]
800015b0:	8afa      	ldrh	r2, [r7, #22]
800015b2:	62da      	str	r2, [r3, #44]	; 0x2c
800015b4:	8afa      	ldrh	r2, [r7, #22]
800015b6:	68bb      	ldr	r3, [r7, #8]
800015b8:	60da      	str	r2, [r3, #12]
}
800015ba:	bf00      	nop
800015bc:	3718      	adds	r7, #24
800015be:	46bd      	mov	sp, r7
800015c0:	bdb0      	pop	{r4, r5, r7, pc}
800015c2:	bf00      	nop
800015c4:	f3af 8000 	nop.w
800015c8:	00000000 	.word	0x00000000
800015cc:	406fa400 	.word	0x406fa400
800015d0:	00000000 	.word	0x00000000
800015d4:	403c2000 	.word	0x403c2000
800015d8:	80007a88 	.word	0x80007a88

800015dc <max>:

uint8_t max(volatile int* values)
{
800015dc:	b480      	push	{r7}
800015de:	b085      	sub	sp, #20
800015e0:	af00      	add	r7, sp, #0
800015e2:	6078      	str	r0, [r7, #4]
	uint8_t max;
	if (values[0] > values[1])
800015e4:	687b      	ldr	r3, [r7, #4]
800015e6:	681a      	ldr	r2, [r3, #0]
800015e8:	687b      	ldr	r3, [r7, #4]
800015ea:	3304      	adds	r3, #4
800015ec:	681b      	ldr	r3, [r3, #0]
800015ee:	429a      	cmp	r2, r3
800015f0:	dd02      	ble.n	800015f8 <max+0x1c>
		max = 0;
800015f2:	2300      	movs	r3, #0
800015f4:	73fb      	strb	r3, [r7, #15]
800015f6:	e001      	b.n	800015fc <max+0x20>
	else
		max = 1;
800015f8:	2301      	movs	r3, #1
800015fa:	73fb      	strb	r3, [r7, #15]
	if (values[2] > values[max])
800015fc:	687b      	ldr	r3, [r7, #4]
800015fe:	3308      	adds	r3, #8
80001600:	681a      	ldr	r2, [r3, #0]
80001602:	7bfb      	ldrb	r3, [r7, #15]
80001604:	009b      	lsls	r3, r3, #2
80001606:	6879      	ldr	r1, [r7, #4]
80001608:	440b      	add	r3, r1
8000160a:	681b      	ldr	r3, [r3, #0]
8000160c:	429a      	cmp	r2, r3
8000160e:	dd01      	ble.n	80001614 <max+0x38>
		max = 2;
80001610:	2302      	movs	r3, #2
80001612:	73fb      	strb	r3, [r7, #15]

	return max;
80001614:	7bfb      	ldrb	r3, [r7, #15]
}
80001616:	4618      	mov	r0, r3
80001618:	3714      	adds	r7, #20
8000161a:	46bd      	mov	sp, r7
8000161c:	bc80      	pop	{r7}
8000161e:	4770      	bx	lr

80001620 <setScaleFactors>:

void setScaleFactors()
{
80001620:	b590      	push	{r4, r7, lr}
80001622:	b089      	sub	sp, #36	; 0x24
80001624:	af00      	add	r7, sp, #0

	volatile int values[3] = {motor[0].estDurationOfMovement, motor[1].estDurationOfMovement, motor[2].estDurationOfMovement};
80001626:	4b4c      	ldr	r3, [pc, #304]	; (80001758 <setScaleFactors+0x138>)
80001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
8000162a:	4618      	mov	r0, r3
8000162c:	f7ff fd52 	bl	800010d4 <__aeabi_f2iz>
80001630:	4603      	mov	r3, r0
80001632:	613b      	str	r3, [r7, #16]
80001634:	4b48      	ldr	r3, [pc, #288]	; (80001758 <setScaleFactors+0x138>)
80001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
80001638:	4618      	mov	r0, r3
8000163a:	f7ff fd4b 	bl	800010d4 <__aeabi_f2iz>
8000163e:	4603      	mov	r3, r0
80001640:	617b      	str	r3, [r7, #20]
80001642:	4b45      	ldr	r3, [pc, #276]	; (80001758 <setScaleFactors+0x138>)
80001644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
80001648:	4618      	mov	r0, r3
8000164a:	f7ff fd43 	bl	800010d4 <__aeabi_f2iz>
8000164e:	4603      	mov	r3, r0
80001650:	61bb      	str	r3, [r7, #24]
80001652:	1d3b      	adds	r3, r7, #4
80001654:	f107 0210 	add.w	r2, r7, #16
80001658:	ca07      	ldmia	r2, {r0, r1, r2}
8000165a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t maxMotorIndex = max(&values[0]);
8000165e:	1d3b      	adds	r3, r7, #4
80001660:	4618      	mov	r0, r3
80001662:	f7ff ffbb 	bl	800015dc <max>
80001666:	4603      	mov	r3, r0
80001668:	77bb      	strb	r3, [r7, #30]
	 * Perform check to ensure that Timer Compare Register does not overflow after scaling.
	 * Disables scaling in such a scenario - likely when scaling factor is too large -
	 * if 65000 < Initial Period * ScalingFactor
	 */

	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
8000166a:	2300      	movs	r3, #0
8000166c:	77fb      	strb	r3, [r7, #31]
8000166e:	e05b      	b.n	80001728 <setScaleFactors+0x108>
	{
		if (motor[i].estDurationOfMovement != 0)
80001670:	7ffa      	ldrb	r2, [r7, #31]
80001672:	4939      	ldr	r1, [pc, #228]	; (80001758 <setScaleFactors+0x138>)
80001674:	4613      	mov	r3, r2
80001676:	005b      	lsls	r3, r3, #1
80001678:	4413      	add	r3, r2
8000167a:	011b      	lsls	r3, r3, #4
8000167c:	440b      	add	r3, r1
8000167e:	3324      	adds	r3, #36	; 0x24
80001680:	681b      	ldr	r3, [r3, #0]
80001682:	f04f 0100 	mov.w	r1, #0
80001686:	4618      	mov	r0, r3
80001688:	f7ff fcf2 	bl	80001070 <__aeabi_fcmpeq>
8000168c:	4603      	mov	r3, r0
8000168e:	2b00      	cmp	r3, #0
80001690:	d147      	bne.n	80001722 <setScaleFactors+0x102>
		{
			motor[i].scaleFactor = (float)motor[maxMotorIndex].estDurationOfMovement/(float)motor[i].estDurationOfMovement;
80001692:	7fba      	ldrb	r2, [r7, #30]
80001694:	4930      	ldr	r1, [pc, #192]	; (80001758 <setScaleFactors+0x138>)
80001696:	4613      	mov	r3, r2
80001698:	005b      	lsls	r3, r3, #1
8000169a:	4413      	add	r3, r2
8000169c:	011b      	lsls	r3, r3, #4
8000169e:	440b      	add	r3, r1
800016a0:	3324      	adds	r3, #36	; 0x24
800016a2:	6818      	ldr	r0, [r3, #0]
800016a4:	7ffa      	ldrb	r2, [r7, #31]
800016a6:	492c      	ldr	r1, [pc, #176]	; (80001758 <setScaleFactors+0x138>)
800016a8:	4613      	mov	r3, r2
800016aa:	005b      	lsls	r3, r3, #1
800016ac:	4413      	add	r3, r2
800016ae:	011b      	lsls	r3, r3, #4
800016b0:	440b      	add	r3, r1
800016b2:	3324      	adds	r3, #36	; 0x24
800016b4:	681b      	ldr	r3, [r3, #0]
800016b6:	7ffc      	ldrb	r4, [r7, #31]
800016b8:	4619      	mov	r1, r3
800016ba:	f7ff fbf9 	bl	80000eb0 <__aeabi_fdiv>
800016be:	4603      	mov	r3, r0
800016c0:	4619      	mov	r1, r3
800016c2:	4a25      	ldr	r2, [pc, #148]	; (80001758 <setScaleFactors+0x138>)
800016c4:	4623      	mov	r3, r4
800016c6:	005b      	lsls	r3, r3, #1
800016c8:	4423      	add	r3, r4
800016ca:	011b      	lsls	r3, r3, #4
800016cc:	4413      	add	r3, r2
800016ce:	3320      	adds	r3, #32
800016d0:	6019      	str	r1, [r3, #0]

			if ((MAX_INTERVAL/1000000.0)*(F_CPU/PRESCALER)*motor[i].scaleFactor > 65000)
800016d2:	7ffa      	ldrb	r2, [r7, #31]
800016d4:	4920      	ldr	r1, [pc, #128]	; (80001758 <setScaleFactors+0x138>)
800016d6:	4613      	mov	r3, r2
800016d8:	005b      	lsls	r3, r3, #1
800016da:	4413      	add	r3, r2
800016dc:	011b      	lsls	r3, r3, #4
800016de:	440b      	add	r3, r1
800016e0:	3320      	adds	r3, #32
800016e2:	681b      	ldr	r3, [r3, #0]
800016e4:	4618      	mov	r0, r3
800016e6:	f7fe fe97 	bl	80000418 <__aeabi_f2d>
800016ea:	a317      	add	r3, pc, #92	; (adr r3, 80001748 <setScaleFactors+0x128>)
800016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
800016f0:	f7fe feea 	bl	800004c8 <__aeabi_dmul>
800016f4:	4603      	mov	r3, r0
800016f6:	460c      	mov	r4, r1
800016f8:	4618      	mov	r0, r3
800016fa:	4621      	mov	r1, r4
800016fc:	a314      	add	r3, pc, #80	; (adr r3, 80001750 <setScaleFactors+0x130>)
800016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
80001702:	f7ff f971 	bl	800009e8 <__aeabi_dcmpgt>
80001706:	4603      	mov	r3, r0
80001708:	2b00      	cmp	r3, #0
8000170a:	d00a      	beq.n	80001722 <setScaleFactors+0x102>
				motor[i].scaleFactor = 1;
8000170c:	7ffa      	ldrb	r2, [r7, #31]
8000170e:	4912      	ldr	r1, [pc, #72]	; (80001758 <setScaleFactors+0x138>)
80001710:	4613      	mov	r3, r2
80001712:	005b      	lsls	r3, r3, #1
80001714:	4413      	add	r3, r2
80001716:	011b      	lsls	r3, r3, #4
80001718:	440b      	add	r3, r1
8000171a:	3320      	adds	r3, #32
8000171c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
80001720:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
80001722:	7ffb      	ldrb	r3, [r7, #31]
80001724:	3301      	adds	r3, #1
80001726:	77fb      	strb	r3, [r7, #31]
80001728:	7ffb      	ldrb	r3, [r7, #31]
8000172a:	2b02      	cmp	r3, #2
8000172c:	d9a0      	bls.n	80001670 <setScaleFactors+0x50>
		}
	}
	MX_TIM2_Init();
8000172e:	f000 fa3f 	bl	80001bb0 <MX_TIM2_Init>
	MX_TIM3_Init();
80001732:	f000 fac1 	bl	80001cb8 <MX_TIM3_Init>
	MX_TIM4_Init();
80001736:	f000 fb43 	bl	80001dc0 <MX_TIM4_Init>
}
8000173a:	bf00      	nop
8000173c:	3724      	adds	r7, #36	; 0x24
8000173e:	46bd      	mov	sp, r7
80001740:	bd90      	pop	{r4, r7, pc}
80001742:	bf00      	nop
80001744:	f3af 8000 	nop.w
80001748:	00000000 	.word	0x00000000
8000174c:	40719400 	.word	0x40719400
80001750:	00000000 	.word	0x00000000
80001754:	40efbd00 	.word	0x40efbd00
80001758:	20000484 	.word	0x20000484

8000175c <getDurationOfUninterruptedMovement>:

float getDurationOfUninterruptedMovement(int numOfSteps)
{
8000175c:	b5b0      	push	{r4, r5, r7, lr}
8000175e:	b084      	sub	sp, #16
80001760:	af00      	add	r7, sp, #0
80001762:	6078      	str	r0, [r7, #4]
	float duration = 0;
80001764:	f04f 0300 	mov.w	r3, #0
80001768:	60fb      	str	r3, [r7, #12]
	if (numOfSteps > 64)
8000176a:	687b      	ldr	r3, [r7, #4]
8000176c:	2b40      	cmp	r3, #64	; 0x40
8000176e:	dd3f      	ble.n	800017f0 <getDurationOfUninterruptedMovement+0x94>
	{
		duration = (2.0 * (float)TIME_CONSTANT[NO_OF_RAMP_STEPS - 1] / 1000.0) + (((float)numOfSteps - (2 *NO_OF_RAMP_STEPS)) * (float)MIN_INTERVAL/1000.0);
80001770:	f644 5317 	movw	r3, #19735	; 0x4d17
80001774:	4618      	mov	r0, r3
80001776:	f7ff fa93 	bl	80000ca0 <__aeabi_i2f>
8000177a:	4603      	mov	r3, r0
8000177c:	4618      	mov	r0, r3
8000177e:	f7fe fe4b 	bl	80000418 <__aeabi_f2d>
80001782:	4602      	mov	r2, r0
80001784:	460b      	mov	r3, r1
80001786:	f7fe fce9 	bl	8000015c <__adddf3>
8000178a:	4603      	mov	r3, r0
8000178c:	460c      	mov	r4, r1
8000178e:	4618      	mov	r0, r3
80001790:	4621      	mov	r1, r4
80001792:	f04f 0200 	mov.w	r2, #0
80001796:	4b29      	ldr	r3, [pc, #164]	; (8000183c <getDurationOfUninterruptedMovement+0xe0>)
80001798:	f7fe ffc0 	bl	8000071c <__aeabi_ddiv>
8000179c:	4603      	mov	r3, r0
8000179e:	460c      	mov	r4, r1
800017a0:	4625      	mov	r5, r4
800017a2:	461c      	mov	r4, r3
800017a4:	6878      	ldr	r0, [r7, #4]
800017a6:	f7ff fa7b 	bl	80000ca0 <__aeabi_i2f>
800017aa:	4603      	mov	r3, r0
800017ac:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
800017b0:	4618      	mov	r0, r3
800017b2:	f7ff f9bf 	bl	80000b34 <__aeabi_fsub>
800017b6:	4603      	mov	r3, r0
800017b8:	4921      	ldr	r1, [pc, #132]	; (80001840 <getDurationOfUninterruptedMovement+0xe4>)
800017ba:	4618      	mov	r0, r3
800017bc:	f7ff fac4 	bl	80000d48 <__aeabi_fmul>
800017c0:	4603      	mov	r3, r0
800017c2:	4618      	mov	r0, r3
800017c4:	f7fe fe28 	bl	80000418 <__aeabi_f2d>
800017c8:	f04f 0200 	mov.w	r2, #0
800017cc:	4b1b      	ldr	r3, [pc, #108]	; (8000183c <getDurationOfUninterruptedMovement+0xe0>)
800017ce:	f7fe ffa5 	bl	8000071c <__aeabi_ddiv>
800017d2:	4602      	mov	r2, r0
800017d4:	460b      	mov	r3, r1
800017d6:	4620      	mov	r0, r4
800017d8:	4629      	mov	r1, r5
800017da:	f7fe fcbf 	bl	8000015c <__adddf3>
800017de:	4603      	mov	r3, r0
800017e0:	460c      	mov	r4, r1
800017e2:	4618      	mov	r0, r3
800017e4:	4621      	mov	r1, r4
800017e6:	f7ff f951 	bl	80000a8c <__aeabi_d2f>
800017ea:	4603      	mov	r3, r0
800017ec:	60fb      	str	r3, [r7, #12]
800017ee:	e01f      	b.n	80001830 <getDurationOfUninterruptedMovement+0xd4>
	}
	else
	{
		duration = 2.0 * TIME_CONSTANT[(numOfSteps/2) - 1] / 1000;
800017f0:	687b      	ldr	r3, [r7, #4]
800017f2:	0fda      	lsrs	r2, r3, #31
800017f4:	4413      	add	r3, r2
800017f6:	105b      	asrs	r3, r3, #1
800017f8:	3b01      	subs	r3, #1
800017fa:	4a12      	ldr	r2, [pc, #72]	; (80001844 <getDurationOfUninterruptedMovement+0xe8>)
800017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
80001800:	4618      	mov	r0, r3
80001802:	f7fe fdf7 	bl	800003f4 <__aeabi_i2d>
80001806:	4602      	mov	r2, r0
80001808:	460b      	mov	r3, r1
8000180a:	f7fe fca7 	bl	8000015c <__adddf3>
8000180e:	4603      	mov	r3, r0
80001810:	460c      	mov	r4, r1
80001812:	4618      	mov	r0, r3
80001814:	4621      	mov	r1, r4
80001816:	f04f 0200 	mov.w	r2, #0
8000181a:	4b08      	ldr	r3, [pc, #32]	; (8000183c <getDurationOfUninterruptedMovement+0xe0>)
8000181c:	f7fe ff7e 	bl	8000071c <__aeabi_ddiv>
80001820:	4603      	mov	r3, r0
80001822:	460c      	mov	r4, r1
80001824:	4618      	mov	r0, r3
80001826:	4621      	mov	r1, r4
80001828:	f7ff f930 	bl	80000a8c <__aeabi_d2f>
8000182c:	4603      	mov	r3, r0
8000182e:	60fb      	str	r3, [r7, #12]
	}

	return duration;
80001830:	68fb      	ldr	r3, [r7, #12]
}
80001832:	4618      	mov	r0, r3
80001834:	3710      	adds	r7, #16
80001836:	46bd      	mov	sp, r7
80001838:	bdb0      	pop	{r4, r5, r7, pc}
8000183a:	bf00      	nop
8000183c:	408f4000 	.word	0x408f4000
80001840:	42c80000 	.word	0x42c80000
80001844:	80007a08 	.word	0x80007a08

80001848 <runMotor>:

void runMotor(StepperMotor* motor)
{
80001848:	b580      	push	{r7, lr}
8000184a:	b082      	sub	sp, #8
8000184c:	af00      	add	r7, sp, #0
8000184e:	6078      	str	r0, [r7, #4]
	 motor->sendPulse();
80001850:	687b      	ldr	r3, [r7, #4]
80001852:	681b      	ldr	r3, [r3, #0]
80001854:	4798      	blx	r3
	 motor->pulseFlag = 0;
80001856:	687b      	ldr	r3, [r7, #4]
80001858:	2200      	movs	r2, #0
8000185a:	761a      	strb	r2, [r3, #24]
	 motor->currentCount ++;
8000185c:	687b      	ldr	r3, [r7, #4]
8000185e:	8a1b      	ldrh	r3, [r3, #16]
80001860:	b21b      	sxth	r3, r3
80001862:	b29b      	uxth	r3, r3
80001864:	3301      	adds	r3, #1
80001866:	b29b      	uxth	r3, r3
80001868:	b21a      	sxth	r2, r3
8000186a:	687b      	ldr	r3, [r7, #4]
8000186c:	821a      	strh	r2, [r3, #16]
	 motor->absolutePosition += motor->direction;
8000186e:	687b      	ldr	r3, [r7, #4]
80001870:	7a1b      	ldrb	r3, [r3, #8]
80001872:	b25a      	sxtb	r2, r3
80001874:	687b      	ldr	r3, [r7, #4]
80001876:	68db      	ldr	r3, [r3, #12]
80001878:	441a      	add	r2, r3
8000187a:	687b      	ldr	r3, [r7, #4]
8000187c:	60da      	str	r2, [r3, #12]

	 if (motor->currentCount == motor->targetCount)
8000187e:	687b      	ldr	r3, [r7, #4]
80001880:	8a1b      	ldrh	r3, [r3, #16]
80001882:	b21a      	sxth	r2, r3
80001884:	687b      	ldr	r3, [r7, #4]
80001886:	8a5b      	ldrh	r3, [r3, #18]
80001888:	b21b      	sxth	r3, r3
8000188a:	429a      	cmp	r2, r3
8000188c:	d103      	bne.n	80001896 <runMotor+0x4e>
	 {
		 motionComplete(motor);
8000188e:	6878      	ldr	r0, [r7, #4]
80001890:	f7ff fcd0 	bl	80001234 <motionComplete>
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
			 abs(motor->targetCount - motor->currentCount) <= NO_OF_RAMP_STEPS)
	 {
		 setNextInterruptInterval(motor);
	 }
}
80001894:	e014      	b.n	800018c0 <runMotor+0x78>
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
80001896:	687b      	ldr	r3, [r7, #4]
80001898:	8a1b      	ldrh	r3, [r3, #16]
8000189a:	b21b      	sxth	r3, r3
8000189c:	2b20      	cmp	r3, #32
8000189e:	dd0c      	ble.n	800018ba <runMotor+0x72>
			 abs(motor->targetCount - motor->currentCount) <= NO_OF_RAMP_STEPS)
800018a0:	687b      	ldr	r3, [r7, #4]
800018a2:	8a5b      	ldrh	r3, [r3, #18]
800018a4:	b21b      	sxth	r3, r3
800018a6:	461a      	mov	r2, r3
800018a8:	687b      	ldr	r3, [r7, #4]
800018aa:	8a1b      	ldrh	r3, [r3, #16]
800018ac:	b21b      	sxth	r3, r3
800018ae:	1ad3      	subs	r3, r2, r3
800018b0:	2b00      	cmp	r3, #0
800018b2:	bfb8      	it	lt
800018b4:	425b      	neglt	r3, r3
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
800018b6:	2b20      	cmp	r3, #32
800018b8:	dc02      	bgt.n	800018c0 <runMotor+0x78>
		 setNextInterruptInterval(motor);
800018ba:	6878      	ldr	r0, [r7, #4]
800018bc:	f7ff fd62 	bl	80001384 <setNextInterruptInterval>
}
800018c0:	bf00      	nop
800018c2:	3708      	adds	r7, #8
800018c4:	46bd      	mov	sp, r7
800018c6:	bd80      	pop	{r7, pc}

800018c8 <copyNewCommands>:

void copyNewCommands()
{
800018c8:	b480      	push	{r7}
800018ca:	b083      	sub	sp, #12
800018cc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
800018ce:	2300      	movs	r3, #0
800018d0:	71fb      	strb	r3, [r7, #7]
800018d2:	e016      	b.n	80001902 <copyNewCommands+0x3a>
	{
		motor[i].newAbsoluteTarget = motor[i].newAbsoluteTargetUSB;
800018d4:	79f9      	ldrb	r1, [r7, #7]
800018d6:	79fa      	ldrb	r2, [r7, #7]
800018d8:	480e      	ldr	r0, [pc, #56]	; (80001914 <copyNewCommands+0x4c>)
800018da:	460b      	mov	r3, r1
800018dc:	005b      	lsls	r3, r3, #1
800018de:	440b      	add	r3, r1
800018e0:	011b      	lsls	r3, r3, #4
800018e2:	4403      	add	r3, r0
800018e4:	332c      	adds	r3, #44	; 0x2c
800018e6:	881b      	ldrh	r3, [r3, #0]
800018e8:	b218      	sxth	r0, r3
800018ea:	490a      	ldr	r1, [pc, #40]	; (80001914 <copyNewCommands+0x4c>)
800018ec:	4613      	mov	r3, r2
800018ee:	005b      	lsls	r3, r3, #1
800018f0:	4413      	add	r3, r2
800018f2:	011b      	lsls	r3, r3, #4
800018f4:	440b      	add	r3, r1
800018f6:	332a      	adds	r3, #42	; 0x2a
800018f8:	4602      	mov	r2, r0
800018fa:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
800018fc:	79fb      	ldrb	r3, [r7, #7]
800018fe:	3301      	adds	r3, #1
80001900:	71fb      	strb	r3, [r7, #7]
80001902:	79fb      	ldrb	r3, [r7, #7]
80001904:	2b02      	cmp	r3, #2
80001906:	d9e5      	bls.n	800018d4 <copyNewCommands+0xc>
	}
}
80001908:	bf00      	nop
8000190a:	370c      	adds	r7, #12
8000190c:	46bd      	mov	sp, r7
8000190e:	bc80      	pop	{r7}
80001910:	4770      	bx	lr
80001912:	bf00      	nop
80001914:	20000484 	.word	0x20000484

80001918 <configForNewCommand>:

void configForNewCommand(StepperMotor* motor)
{
80001918:	b580      	push	{r7, lr}
8000191a:	b084      	sub	sp, #16
8000191c:	af00      	add	r7, sp, #0
8000191e:	6078      	str	r0, [r7, #4]
		//Set Direction
		if (motor->absolutePosition > motor->newAbsoluteTarget)
80001920:	687b      	ldr	r3, [r7, #4]
80001922:	68db      	ldr	r3, [r3, #12]
80001924:	687a      	ldr	r2, [r7, #4]
80001926:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
80001928:	b212      	sxth	r2, r2
8000192a:	4293      	cmp	r3, r2
8000192c:	dd0c      	ble.n	80001948 <configForNewCommand+0x30>
		{
			motor->newDirection = CLOCKWISE;
8000192e:	687b      	ldr	r3, [r7, #4]
80001930:	22ff      	movs	r2, #255	; 0xff
80001932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			motor->direction = CLOCKWISE;
80001936:	687b      	ldr	r3, [r7, #4]
80001938:	22ff      	movs	r2, #255	; 0xff
8000193a:	721a      	strb	r2, [r3, #8]
			motor->setDirection(CLOCKWISE);
8000193c:	687b      	ldr	r3, [r7, #4]
8000193e:	685b      	ldr	r3, [r3, #4]
80001940:	f04f 30ff 	mov.w	r0, #4294967295
80001944:	4798      	blx	r3
80001946:	e011      	b.n	8000196c <configForNewCommand+0x54>
		}
		else if (motor->absolutePosition < motor->newAbsoluteTarget)
80001948:	687b      	ldr	r3, [r7, #4]
8000194a:	68db      	ldr	r3, [r3, #12]
8000194c:	687a      	ldr	r2, [r7, #4]
8000194e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
80001950:	b212      	sxth	r2, r2
80001952:	4293      	cmp	r3, r2
80001954:	da0a      	bge.n	8000196c <configForNewCommand+0x54>
		{
			motor->newDirection = ANTICLOCKWISE;
80001956:	687b      	ldr	r3, [r7, #4]
80001958:	2201      	movs	r2, #1
8000195a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			motor->direction = ANTICLOCKWISE;
8000195e:	687b      	ldr	r3, [r7, #4]
80001960:	2201      	movs	r2, #1
80001962:	721a      	strb	r2, [r3, #8]
			motor->setDirection(ANTICLOCKWISE);
80001964:	687b      	ldr	r3, [r7, #4]
80001966:	685b      	ldr	r3, [r3, #4]
80001968:	2001      	movs	r0, #1
8000196a:	4798      	blx	r3
		}

		//Define motion
		//Resets motor to default position if requested position is outside limits
		if ((motor->direction) * abs(motor->absolutePosition - motor->newAbsoluteTarget) +  motor->absolutePosition > ABSOLUTE_UPPER_LIMIT
8000196c:	687b      	ldr	r3, [r7, #4]
8000196e:	7a1b      	ldrb	r3, [r3, #8]
80001970:	b25b      	sxtb	r3, r3
80001972:	4619      	mov	r1, r3
80001974:	687b      	ldr	r3, [r7, #4]
80001976:	68db      	ldr	r3, [r3, #12]
80001978:	687a      	ldr	r2, [r7, #4]
8000197a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
8000197c:	b212      	sxth	r2, r2
8000197e:	1a9b      	subs	r3, r3, r2
80001980:	2b00      	cmp	r3, #0
80001982:	bfb8      	it	lt
80001984:	425b      	neglt	r3, r3
80001986:	fb03 f201 	mul.w	r2, r3, r1
8000198a:	687b      	ldr	r3, [r7, #4]
8000198c:	68db      	ldr	r3, [r3, #12]
8000198e:	4413      	add	r3, r2
80001990:	f240 2215 	movw	r2, #533	; 0x215
80001994:	4293      	cmp	r3, r2
80001996:	dc13      	bgt.n	800019c0 <configForNewCommand+0xa8>
				|| (motor->direction) * abs(motor->absolutePosition - motor->newAbsoluteTarget) +  motor->absolutePosition < ABSOLUTE_LOWER_LIMIT)
80001998:	687b      	ldr	r3, [r7, #4]
8000199a:	7a1b      	ldrb	r3, [r3, #8]
8000199c:	b25b      	sxtb	r3, r3
8000199e:	4619      	mov	r1, r3
800019a0:	687b      	ldr	r3, [r7, #4]
800019a2:	68db      	ldr	r3, [r3, #12]
800019a4:	687a      	ldr	r2, [r7, #4]
800019a6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
800019a8:	b212      	sxth	r2, r2
800019aa:	1a9b      	subs	r3, r3, r2
800019ac:	2b00      	cmp	r3, #0
800019ae:	bfb8      	it	lt
800019b0:	425b      	neglt	r3, r3
800019b2:	fb03 f201 	mul.w	r2, r3, r1
800019b6:	687b      	ldr	r3, [r7, #4]
800019b8:	68db      	ldr	r3, [r3, #12]
800019ba:	4413      	add	r3, r2
800019bc:	2b00      	cmp	r3, #0
800019be:	da03      	bge.n	800019c8 <configForNewCommand+0xb0>
		{
			motor->newAbsoluteTarget = (ABSOLUTE_UPPER_LIMIT/2) + 1;
800019c0:	687b      	ldr	r3, [r7, #4]
800019c2:	f240 120b 	movw	r2, #267	; 0x10b
800019c6:	855a      	strh	r2, [r3, #42]	; 0x2a
		}

		int16_t newTarget = abs(motor->absolutePosition - motor->newAbsoluteTarget);
800019c8:	687b      	ldr	r3, [r7, #4]
800019ca:	68db      	ldr	r3, [r3, #12]
800019cc:	687a      	ldr	r2, [r7, #4]
800019ce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
800019d0:	b212      	sxth	r2, r2
800019d2:	1a9b      	subs	r3, r3, r2
800019d4:	2b00      	cmp	r3, #0
800019d6:	bfb8      	it	lt
800019d8:	425b      	neglt	r3, r3
800019da:	81fb      	strh	r3, [r7, #14]
		motor->estDurationOfMovement = getDurationOfUninterruptedMovement(newTarget);
800019dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
800019e0:	4618      	mov	r0, r3
800019e2:	f7ff febb 	bl	8000175c <getDurationOfUninterruptedMovement>
800019e6:	4602      	mov	r2, r0
800019e8:	687b      	ldr	r3, [r7, #4]
800019ea:	625a      	str	r2, [r3, #36]	; 0x24
		motor->targetCount = newTarget;
800019ec:	687b      	ldr	r3, [r7, #4]
800019ee:	89fa      	ldrh	r2, [r7, #14]
800019f0:	825a      	strh	r2, [r3, #18]
}
800019f2:	bf00      	nop
800019f4:	3710      	adds	r7, #16
800019f6:	46bd      	mov	sp, r7
800019f8:	bd80      	pop	{r7, pc}
	...

800019fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
800019fc:	b580      	push	{r7, lr}
800019fe:	b082      	sub	sp, #8
80001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	programInit();
80001a02:	f7ff fc37 	bl	80001274 <programInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
80001a06:	f000 fc0b 	bl	80002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
80001a0a:	f000 f875 	bl	80001af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
80001a0e:	f000 fa5b 	bl	80001ec8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
80001a12:	f005 fabf 	bl	80006f94 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (newCommandAvailable == 1 && previousMotionComplete == 1)
80001a16:	4b32      	ldr	r3, [pc, #200]	; (80001ae0 <main+0xe4>)
80001a18:	781b      	ldrb	r3, [r3, #0]
80001a1a:	b2db      	uxtb	r3, r3
80001a1c:	2b01      	cmp	r3, #1
80001a1e:	d12a      	bne.n	80001a76 <main+0x7a>
80001a20:	4b30      	ldr	r3, [pc, #192]	; (80001ae4 <main+0xe8>)
80001a22:	781b      	ldrb	r3, [r3, #0]
80001a24:	b2db      	uxtb	r3, r3
80001a26:	2b01      	cmp	r3, #1
80001a28:	d125      	bne.n	80001a76 <main+0x7a>
	  {
		  	newCommandAvailable = DEACTIVATED;
80001a2a:	4b2d      	ldr	r3, [pc, #180]	; (80001ae0 <main+0xe4>)
80001a2c:	2200      	movs	r2, #0
80001a2e:	701a      	strb	r2, [r3, #0]
		  	previousMotionComplete = DEACTIVATED;
80001a30:	4b2c      	ldr	r3, [pc, #176]	; (80001ae4 <main+0xe8>)
80001a32:	2200      	movs	r2, #0
80001a34:	701a      	strb	r2, [r3, #0]

		  	copyNewCommands();
80001a36:	f7ff ff47 	bl	800018c8 <copyNewCommands>
		  	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
80001a3a:	2300      	movs	r3, #0
80001a3c:	71fb      	strb	r3, [r7, #7]
80001a3e:	e00c      	b.n	80001a5a <main+0x5e>
		  	{
		  		configForNewCommand(&motor[i]);
80001a40:	79fa      	ldrb	r2, [r7, #7]
80001a42:	4613      	mov	r3, r2
80001a44:	005b      	lsls	r3, r3, #1
80001a46:	4413      	add	r3, r2
80001a48:	011b      	lsls	r3, r3, #4
80001a4a:	4a27      	ldr	r2, [pc, #156]	; (80001ae8 <main+0xec>)
80001a4c:	4413      	add	r3, r2
80001a4e:	4618      	mov	r0, r3
80001a50:	f7ff ff62 	bl	80001918 <configForNewCommand>
		  	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
80001a54:	79fb      	ldrb	r3, [r7, #7]
80001a56:	3301      	adds	r3, #1
80001a58:	71fb      	strb	r3, [r7, #7]
80001a5a:	79fb      	ldrb	r3, [r7, #7]
80001a5c:	2b02      	cmp	r3, #2
80001a5e:	d9ef      	bls.n	80001a40 <main+0x44>
		  	}

			setScaleFactors();
80001a60:	f7ff fdde 	bl	80001620 <setScaleFactors>
			HAL_TIM_Base_Start_IT(&htim2);
80001a64:	4821      	ldr	r0, [pc, #132]	; (80001aec <main+0xf0>)
80001a66:	f002 fa82 	bl	80003f6e <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
80001a6a:	4821      	ldr	r0, [pc, #132]	; (80001af0 <main+0xf4>)
80001a6c:	f002 fa7f 	bl	80003f6e <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim4);
80001a70:	4820      	ldr	r0, [pc, #128]	; (80001af4 <main+0xf8>)
80001a72:	f002 fa7c 	bl	80003f6e <HAL_TIM_Base_Start_IT>

      }

		for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
80001a76:	2300      	movs	r3, #0
80001a78:	71bb      	strb	r3, [r7, #6]
80001a7a:	e018      	b.n	80001aae <main+0xb2>
		{
			 if (motor[i].pulseFlag == 1)
80001a7c:	79ba      	ldrb	r2, [r7, #6]
80001a7e:	491a      	ldr	r1, [pc, #104]	; (80001ae8 <main+0xec>)
80001a80:	4613      	mov	r3, r2
80001a82:	005b      	lsls	r3, r3, #1
80001a84:	4413      	add	r3, r2
80001a86:	011b      	lsls	r3, r3, #4
80001a88:	440b      	add	r3, r1
80001a8a:	3318      	adds	r3, #24
80001a8c:	781b      	ldrb	r3, [r3, #0]
80001a8e:	b2db      	uxtb	r3, r3
80001a90:	2b01      	cmp	r3, #1
80001a92:	d109      	bne.n	80001aa8 <main+0xac>
			 {
				 runMotor(&motor[i]);
80001a94:	79ba      	ldrb	r2, [r7, #6]
80001a96:	4613      	mov	r3, r2
80001a98:	005b      	lsls	r3, r3, #1
80001a9a:	4413      	add	r3, r2
80001a9c:	011b      	lsls	r3, r3, #4
80001a9e:	4a12      	ldr	r2, [pc, #72]	; (80001ae8 <main+0xec>)
80001aa0:	4413      	add	r3, r2
80001aa2:	4618      	mov	r0, r3
80001aa4:	f7ff fed0 	bl	80001848 <runMotor>
		for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
80001aa8:	79bb      	ldrb	r3, [r7, #6]
80001aaa:	3301      	adds	r3, #1
80001aac:	71bb      	strb	r3, [r7, #6]
80001aae:	79bb      	ldrb	r3, [r7, #6]
80001ab0:	2b02      	cmp	r3, #2
80001ab2:	d9e3      	bls.n	80001a7c <main+0x80>
			 }
		}

		if (motor[0].targetCount == 0 && motor[1].targetCount == 0 && motor[2].targetCount == 0)
80001ab4:	4b0c      	ldr	r3, [pc, #48]	; (80001ae8 <main+0xec>)
80001ab6:	8a5b      	ldrh	r3, [r3, #18]
80001ab8:	b21b      	sxth	r3, r3
80001aba:	2b00      	cmp	r3, #0
80001abc:	d1ab      	bne.n	80001a16 <main+0x1a>
80001abe:	4b0a      	ldr	r3, [pc, #40]	; (80001ae8 <main+0xec>)
80001ac0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
80001ac4:	b21b      	sxth	r3, r3
80001ac6:	2b00      	cmp	r3, #0
80001ac8:	d1a5      	bne.n	80001a16 <main+0x1a>
80001aca:	4b07      	ldr	r3, [pc, #28]	; (80001ae8 <main+0xec>)
80001acc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
80001ad0:	b21b      	sxth	r3, r3
80001ad2:	2b00      	cmp	r3, #0
80001ad4:	d19f      	bne.n	80001a16 <main+0x1a>
		{
			previousMotionComplete = 1;
80001ad6:	4b03      	ldr	r3, [pc, #12]	; (80001ae4 <main+0xe8>)
80001ad8:	2201      	movs	r2, #1
80001ada:	701a      	strb	r2, [r3, #0]
	  if (newCommandAvailable == 1 && previousMotionComplete == 1)
80001adc:	e79b      	b.n	80001a16 <main+0x1a>
80001ade:	bf00      	nop
80001ae0:	20000440 	.word	0x20000440
80001ae4:	20000000 	.word	0x20000000
80001ae8:	20000484 	.word	0x20000484
80001aec:	20000444 	.word	0x20000444
80001af0:	20000400 	.word	0x20000400
80001af4:	200003c0 	.word	0x200003c0

80001af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
80001af8:	b580      	push	{r7, lr}
80001afa:	b094      	sub	sp, #80	; 0x50
80001afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
80001afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
80001b02:	2228      	movs	r2, #40	; 0x28
80001b04:	2100      	movs	r1, #0
80001b06:	4618      	mov	r0, r3
80001b08:	f005 ff3a 	bl	80007980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
80001b0c:	f107 0314 	add.w	r3, r7, #20
80001b10:	2200      	movs	r2, #0
80001b12:	601a      	str	r2, [r3, #0]
80001b14:	605a      	str	r2, [r3, #4]
80001b16:	609a      	str	r2, [r3, #8]
80001b18:	60da      	str	r2, [r3, #12]
80001b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
80001b1c:	1d3b      	adds	r3, r7, #4
80001b1e:	2200      	movs	r2, #0
80001b20:	601a      	str	r2, [r3, #0]
80001b22:	605a      	str	r2, [r3, #4]
80001b24:	609a      	str	r2, [r3, #8]
80001b26:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
80001b28:	2301      	movs	r3, #1
80001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
80001b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
80001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
80001b32:	2300      	movs	r3, #0
80001b34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
80001b36:	2301      	movs	r3, #1
80001b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
80001b3a:	2302      	movs	r3, #2
80001b3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
80001b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
80001b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
80001b44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
80001b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
80001b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
80001b4e:	4618      	mov	r0, r3
80001b50:	f001 fd42 	bl	800035d8 <HAL_RCC_OscConfig>
80001b54:	4603      	mov	r3, r0
80001b56:	2b00      	cmp	r3, #0
80001b58:	d001      	beq.n	80001b5e <SystemClock_Config+0x66>
  {
    Error_Handler();
80001b5a:	f000 f9f5 	bl	80001f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
80001b5e:	230f      	movs	r3, #15
80001b60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
80001b62:	2302      	movs	r3, #2
80001b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
80001b66:	2300      	movs	r3, #0
80001b68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
80001b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
80001b6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
80001b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
80001b74:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
80001b76:	f107 0314 	add.w	r3, r7, #20
80001b7a:	2102      	movs	r1, #2
80001b7c:	4618      	mov	r0, r3
80001b7e:	f001 ffab 	bl	80003ad8 <HAL_RCC_ClockConfig>
80001b82:	4603      	mov	r3, r0
80001b84:	2b00      	cmp	r3, #0
80001b86:	d001      	beq.n	80001b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
80001b88:	f000 f9de 	bl	80001f48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
80001b8c:	2310      	movs	r3, #16
80001b8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
80001b90:	2300      	movs	r3, #0
80001b92:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
80001b94:	1d3b      	adds	r3, r7, #4
80001b96:	4618      	mov	r0, r3
80001b98:	f002 f908 	bl	80003dac <HAL_RCCEx_PeriphCLKConfig>
80001b9c:	4603      	mov	r3, r0
80001b9e:	2b00      	cmp	r3, #0
80001ba0:	d001      	beq.n	80001ba6 <SystemClock_Config+0xae>
  {
    Error_Handler();
80001ba2:	f000 f9d1 	bl	80001f48 <Error_Handler>
  }
}
80001ba6:	bf00      	nop
80001ba8:	3750      	adds	r7, #80	; 0x50
80001baa:	46bd      	mov	sp, r7
80001bac:	bd80      	pop	{r7, pc}
	...

80001bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
80001bb0:	b5b0      	push	{r4, r5, r7, lr}
80001bb2:	b086      	sub	sp, #24
80001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
80001bb6:	f107 0308 	add.w	r3, r7, #8
80001bba:	2200      	movs	r2, #0
80001bbc:	601a      	str	r2, [r3, #0]
80001bbe:	605a      	str	r2, [r3, #4]
80001bc0:	609a      	str	r2, [r3, #8]
80001bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
80001bc4:	463b      	mov	r3, r7
80001bc6:	2200      	movs	r2, #0
80001bc8:	601a      	str	r2, [r3, #0]
80001bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
80001bcc:	4b36      	ldr	r3, [pc, #216]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
80001bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PRESCALER;
80001bd4:	4b34      	ldr	r3, [pc, #208]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
80001bda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
80001bdc:	4b32      	ldr	r3, [pc, #200]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001bde:	2200      	movs	r2, #0
80001be0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[0].scaleFactor);
80001be2:	4b32      	ldr	r3, [pc, #200]	; (80001cac <MX_TIM2_Init+0xfc>)
80001be4:	4618      	mov	r0, r3
80001be6:	f7fe fc17 	bl	80000418 <__aeabi_f2d>
80001bea:	a32b      	add	r3, pc, #172	; (adr r3, 80001c98 <MX_TIM2_Init+0xe8>)
80001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
80001bf0:	f7fe fc6a 	bl	800004c8 <__aeabi_dmul>
80001bf4:	4603      	mov	r3, r0
80001bf6:	460c      	mov	r4, r1
80001bf8:	4618      	mov	r0, r3
80001bfa:	4621      	mov	r1, r4
  htim2.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
80001bfc:	a328      	add	r3, pc, #160	; (adr r3, 80001ca0 <MX_TIM2_Init+0xf0>)
80001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
80001c02:	f7fe faab 	bl	8000015c <__adddf3>
80001c06:	4603      	mov	r3, r0
80001c08:	460c      	mov	r4, r1
80001c0a:	4625      	mov	r5, r4
80001c0c:	461c      	mov	r4, r3
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[0].scaleFactor);
80001c0e:	4b28      	ldr	r3, [pc, #160]	; (80001cb0 <MX_TIM2_Init+0x100>)
80001c10:	6a1b      	ldr	r3, [r3, #32]
80001c12:	4618      	mov	r0, r3
80001c14:	f7fe fc00 	bl	80000418 <__aeabi_f2d>
80001c18:	4602      	mov	r2, r0
80001c1a:	460b      	mov	r3, r1
80001c1c:	4620      	mov	r0, r4
80001c1e:	4629      	mov	r1, r5
80001c20:	f7fe fc52 	bl	800004c8 <__aeabi_dmul>
80001c24:	4603      	mov	r3, r0
80001c26:	460c      	mov	r4, r1
  htim2.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
80001c28:	4618      	mov	r0, r3
80001c2a:	4621      	mov	r1, r4
80001c2c:	f7fe ff0e 	bl	80000a4c <__aeabi_d2uiz>
80001c30:	4603      	mov	r3, r0
80001c32:	b29b      	uxth	r3, r3
80001c34:	461a      	mov	r2, r3
80001c36:	4b1c      	ldr	r3, [pc, #112]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001c38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
80001c3a:	4b1b      	ldr	r3, [pc, #108]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001c3c:	2200      	movs	r2, #0
80001c3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
80001c40:	4b19      	ldr	r3, [pc, #100]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001c42:	2280      	movs	r2, #128	; 0x80
80001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
80001c46:	4818      	ldr	r0, [pc, #96]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001c48:	f002 f966 	bl	80003f18 <HAL_TIM_Base_Init>
80001c4c:	4603      	mov	r3, r0
80001c4e:	2b00      	cmp	r3, #0
80001c50:	d001      	beq.n	80001c56 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
80001c52:	f000 f979 	bl	80001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
80001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
80001c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
80001c5c:	f107 0308 	add.w	r3, r7, #8
80001c60:	4619      	mov	r1, r3
80001c62:	4811      	ldr	r0, [pc, #68]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001c64:	f002 faae 	bl	800041c4 <HAL_TIM_ConfigClockSource>
80001c68:	4603      	mov	r3, r0
80001c6a:	2b00      	cmp	r3, #0
80001c6c:	d001      	beq.n	80001c72 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
80001c6e:	f000 f96b 	bl	80001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
80001c72:	2300      	movs	r3, #0
80001c74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
80001c76:	2300      	movs	r3, #0
80001c78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
80001c7a:	463b      	mov	r3, r7
80001c7c:	4619      	mov	r1, r3
80001c7e:	480a      	ldr	r0, [pc, #40]	; (80001ca8 <MX_TIM2_Init+0xf8>)
80001c80:	f002 fc7c 	bl	8000457c <HAL_TIMEx_MasterConfigSynchronization>
80001c84:	4603      	mov	r3, r0
80001c86:	2b00      	cmp	r3, #0
80001c88:	d001      	beq.n	80001c8e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
80001c8a:	f000 f95d 	bl	80001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
80001c8e:	bf00      	nop
80001c90:	3718      	adds	r7, #24
80001c92:	46bd      	mov	sp, r7
80001c94:	bdb0      	pop	{r4, r5, r7, pc}
80001c96:	bf00      	nop
80001c98:	00000000 	.word	0x00000000
80001c9c:	406fa400 	.word	0x406fa400
80001ca0:	00000000 	.word	0x00000000
80001ca4:	403c2000 	.word	0x403c2000
80001ca8:	20000444 	.word	0x20000444
80001cac:	3f7fa440 	.word	0x3f7fa440
80001cb0:	20000484 	.word	0x20000484
80001cb4:	00000000 	.word	0x00000000

80001cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
80001cb8:	b5b0      	push	{r4, r5, r7, lr}
80001cba:	b086      	sub	sp, #24
80001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
80001cbe:	f107 0308 	add.w	r3, r7, #8
80001cc2:	2200      	movs	r2, #0
80001cc4:	601a      	str	r2, [r3, #0]
80001cc6:	605a      	str	r2, [r3, #4]
80001cc8:	609a      	str	r2, [r3, #8]
80001cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
80001ccc:	463b      	mov	r3, r7
80001cce:	2200      	movs	r2, #0
80001cd0:	601a      	str	r2, [r3, #0]
80001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
80001cd4:	4b36      	ldr	r3, [pc, #216]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001cd6:	4a37      	ldr	r2, [pc, #220]	; (80001db4 <MX_TIM3_Init+0xfc>)
80001cd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PRESCALER;
80001cda:	4b35      	ldr	r3, [pc, #212]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
80001ce0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
80001ce2:	4b33      	ldr	r3, [pc, #204]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001ce4:	2200      	movs	r2, #0
80001ce6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[1].scaleFactor);
80001ce8:	4b33      	ldr	r3, [pc, #204]	; (80001db8 <MX_TIM3_Init+0x100>)
80001cea:	4618      	mov	r0, r3
80001cec:	f7fe fb94 	bl	80000418 <__aeabi_f2d>
80001cf0:	a32b      	add	r3, pc, #172	; (adr r3, 80001da0 <MX_TIM3_Init+0xe8>)
80001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
80001cf6:	f7fe fbe7 	bl	800004c8 <__aeabi_dmul>
80001cfa:	4603      	mov	r3, r0
80001cfc:	460c      	mov	r4, r1
80001cfe:	4618      	mov	r0, r3
80001d00:	4621      	mov	r1, r4
  htim3.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
80001d02:	a329      	add	r3, pc, #164	; (adr r3, 80001da8 <MX_TIM3_Init+0xf0>)
80001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
80001d08:	f7fe fa28 	bl	8000015c <__adddf3>
80001d0c:	4603      	mov	r3, r0
80001d0e:	460c      	mov	r4, r1
80001d10:	4625      	mov	r5, r4
80001d12:	461c      	mov	r4, r3
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[1].scaleFactor);
80001d14:	4b29      	ldr	r3, [pc, #164]	; (80001dbc <MX_TIM3_Init+0x104>)
80001d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
80001d18:	4618      	mov	r0, r3
80001d1a:	f7fe fb7d 	bl	80000418 <__aeabi_f2d>
80001d1e:	4602      	mov	r2, r0
80001d20:	460b      	mov	r3, r1
80001d22:	4620      	mov	r0, r4
80001d24:	4629      	mov	r1, r5
80001d26:	f7fe fbcf 	bl	800004c8 <__aeabi_dmul>
80001d2a:	4603      	mov	r3, r0
80001d2c:	460c      	mov	r4, r1
  htim3.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
80001d2e:	4618      	mov	r0, r3
80001d30:	4621      	mov	r1, r4
80001d32:	f7fe fe8b 	bl	80000a4c <__aeabi_d2uiz>
80001d36:	4603      	mov	r3, r0
80001d38:	b29b      	uxth	r3, r3
80001d3a:	461a      	mov	r2, r3
80001d3c:	4b1c      	ldr	r3, [pc, #112]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001d3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
80001d40:	4b1b      	ldr	r3, [pc, #108]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001d42:	2200      	movs	r2, #0
80001d44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
80001d46:	4b1a      	ldr	r3, [pc, #104]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001d48:	2280      	movs	r2, #128	; 0x80
80001d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
80001d4c:	4818      	ldr	r0, [pc, #96]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001d4e:	f002 f8e3 	bl	80003f18 <HAL_TIM_Base_Init>
80001d52:	4603      	mov	r3, r0
80001d54:	2b00      	cmp	r3, #0
80001d56:	d001      	beq.n	80001d5c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
80001d58:	f000 f8f6 	bl	80001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
80001d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
80001d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
80001d62:	f107 0308 	add.w	r3, r7, #8
80001d66:	4619      	mov	r1, r3
80001d68:	4811      	ldr	r0, [pc, #68]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001d6a:	f002 fa2b 	bl	800041c4 <HAL_TIM_ConfigClockSource>
80001d6e:	4603      	mov	r3, r0
80001d70:	2b00      	cmp	r3, #0
80001d72:	d001      	beq.n	80001d78 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
80001d74:	f000 f8e8 	bl	80001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
80001d78:	2300      	movs	r3, #0
80001d7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
80001d7c:	2300      	movs	r3, #0
80001d7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
80001d80:	463b      	mov	r3, r7
80001d82:	4619      	mov	r1, r3
80001d84:	480a      	ldr	r0, [pc, #40]	; (80001db0 <MX_TIM3_Init+0xf8>)
80001d86:	f002 fbf9 	bl	8000457c <HAL_TIMEx_MasterConfigSynchronization>
80001d8a:	4603      	mov	r3, r0
80001d8c:	2b00      	cmp	r3, #0
80001d8e:	d001      	beq.n	80001d94 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
80001d90:	f000 f8da 	bl	80001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
80001d94:	bf00      	nop
80001d96:	3718      	adds	r7, #24
80001d98:	46bd      	mov	sp, r7
80001d9a:	bdb0      	pop	{r4, r5, r7, pc}
80001d9c:	f3af 8000 	nop.w
80001da0:	00000000 	.word	0x00000000
80001da4:	406fa400 	.word	0x406fa400
80001da8:	00000000 	.word	0x00000000
80001dac:	403c2000 	.word	0x403c2000
80001db0:	20000400 	.word	0x20000400
80001db4:	40000400 	.word	0x40000400
80001db8:	3f7fa440 	.word	0x3f7fa440
80001dbc:	20000484 	.word	0x20000484

80001dc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
80001dc0:	b5b0      	push	{r4, r5, r7, lr}
80001dc2:	b086      	sub	sp, #24
80001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
80001dc6:	f107 0308 	add.w	r3, r7, #8
80001dca:	2200      	movs	r2, #0
80001dcc:	601a      	str	r2, [r3, #0]
80001dce:	605a      	str	r2, [r3, #4]
80001dd0:	609a      	str	r2, [r3, #8]
80001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
80001dd4:	463b      	mov	r3, r7
80001dd6:	2200      	movs	r2, #0
80001dd8:	601a      	str	r2, [r3, #0]
80001dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
80001ddc:	4b36      	ldr	r3, [pc, #216]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001dde:	4a37      	ldr	r2, [pc, #220]	; (80001ebc <MX_TIM4_Init+0xfc>)
80001de0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = PRESCALER;
80001de2:	4b35      	ldr	r3, [pc, #212]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001de4:	f44f 7280 	mov.w	r2, #256	; 0x100
80001de8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
80001dea:	4b33      	ldr	r3, [pc, #204]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001dec:	2200      	movs	r2, #0
80001dee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[2].scaleFactor);
80001df0:	4b33      	ldr	r3, [pc, #204]	; (80001ec0 <MX_TIM4_Init+0x100>)
80001df2:	4618      	mov	r0, r3
80001df4:	f7fe fb10 	bl	80000418 <__aeabi_f2d>
80001df8:	a32b      	add	r3, pc, #172	; (adr r3, 80001ea8 <MX_TIM4_Init+0xe8>)
80001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
80001dfe:	f7fe fb63 	bl	800004c8 <__aeabi_dmul>
80001e02:	4603      	mov	r3, r0
80001e04:	460c      	mov	r4, r1
80001e06:	4618      	mov	r0, r3
80001e08:	4621      	mov	r1, r4
  htim4.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
80001e0a:	a329      	add	r3, pc, #164	; (adr r3, 80001eb0 <MX_TIM4_Init+0xf0>)
80001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
80001e10:	f7fe f9a4 	bl	8000015c <__adddf3>
80001e14:	4603      	mov	r3, r0
80001e16:	460c      	mov	r4, r1
80001e18:	4625      	mov	r5, r4
80001e1a:	461c      	mov	r4, r3
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*cosine[1])*motor[2].scaleFactor);
80001e1c:	4b29      	ldr	r3, [pc, #164]	; (80001ec4 <MX_TIM4_Init+0x104>)
80001e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
80001e22:	4618      	mov	r0, r3
80001e24:	f7fe faf8 	bl	80000418 <__aeabi_f2d>
80001e28:	4602      	mov	r2, r0
80001e2a:	460b      	mov	r3, r1
80001e2c:	4620      	mov	r0, r4
80001e2e:	4629      	mov	r1, r5
80001e30:	f7fe fb4a 	bl	800004c8 <__aeabi_dmul>
80001e34:	4603      	mov	r3, r0
80001e36:	460c      	mov	r4, r1
  htim4.Init.Period = (uint16_t)(((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
80001e38:	4618      	mov	r0, r3
80001e3a:	4621      	mov	r1, r4
80001e3c:	f7fe fe06 	bl	80000a4c <__aeabi_d2uiz>
80001e40:	4603      	mov	r3, r0
80001e42:	b29b      	uxth	r3, r3
80001e44:	461a      	mov	r2, r3
80001e46:	4b1c      	ldr	r3, [pc, #112]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001e48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
80001e4a:	4b1b      	ldr	r3, [pc, #108]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001e4c:	2200      	movs	r2, #0
80001e4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
80001e50:	4b19      	ldr	r3, [pc, #100]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001e52:	2280      	movs	r2, #128	; 0x80
80001e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
80001e56:	4818      	ldr	r0, [pc, #96]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001e58:	f002 f85e 	bl	80003f18 <HAL_TIM_Base_Init>
80001e5c:	4603      	mov	r3, r0
80001e5e:	2b00      	cmp	r3, #0
80001e60:	d001      	beq.n	80001e66 <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
80001e62:	f000 f871 	bl	80001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
80001e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
80001e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
80001e6c:	f107 0308 	add.w	r3, r7, #8
80001e70:	4619      	mov	r1, r3
80001e72:	4811      	ldr	r0, [pc, #68]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001e74:	f002 f9a6 	bl	800041c4 <HAL_TIM_ConfigClockSource>
80001e78:	4603      	mov	r3, r0
80001e7a:	2b00      	cmp	r3, #0
80001e7c:	d001      	beq.n	80001e82 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
80001e7e:	f000 f863 	bl	80001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
80001e82:	2300      	movs	r3, #0
80001e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
80001e86:	2300      	movs	r3, #0
80001e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
80001e8a:	463b      	mov	r3, r7
80001e8c:	4619      	mov	r1, r3
80001e8e:	480a      	ldr	r0, [pc, #40]	; (80001eb8 <MX_TIM4_Init+0xf8>)
80001e90:	f002 fb74 	bl	8000457c <HAL_TIMEx_MasterConfigSynchronization>
80001e94:	4603      	mov	r3, r0
80001e96:	2b00      	cmp	r3, #0
80001e98:	d001      	beq.n	80001e9e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
80001e9a:	f000 f855 	bl	80001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
80001e9e:	bf00      	nop
80001ea0:	3718      	adds	r7, #24
80001ea2:	46bd      	mov	sp, r7
80001ea4:	bdb0      	pop	{r4, r5, r7, pc}
80001ea6:	bf00      	nop
80001ea8:	00000000 	.word	0x00000000
80001eac:	406fa400 	.word	0x406fa400
80001eb0:	00000000 	.word	0x00000000
80001eb4:	403c2000 	.word	0x403c2000
80001eb8:	200003c0 	.word	0x200003c0
80001ebc:	40000800 	.word	0x40000800
80001ec0:	3f7fa440 	.word	0x3f7fa440
80001ec4:	20000484 	.word	0x20000484

80001ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
80001ec8:	b580      	push	{r7, lr}
80001eca:	b086      	sub	sp, #24
80001ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
80001ece:	f107 0308 	add.w	r3, r7, #8
80001ed2:	2200      	movs	r2, #0
80001ed4:	601a      	str	r2, [r3, #0]
80001ed6:	605a      	str	r2, [r3, #4]
80001ed8:	609a      	str	r2, [r3, #8]
80001eda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
80001edc:	4b18      	ldr	r3, [pc, #96]	; (80001f40 <MX_GPIO_Init+0x78>)
80001ede:	699b      	ldr	r3, [r3, #24]
80001ee0:	4a17      	ldr	r2, [pc, #92]	; (80001f40 <MX_GPIO_Init+0x78>)
80001ee2:	f043 0320 	orr.w	r3, r3, #32
80001ee6:	6193      	str	r3, [r2, #24]
80001ee8:	4b15      	ldr	r3, [pc, #84]	; (80001f40 <MX_GPIO_Init+0x78>)
80001eea:	699b      	ldr	r3, [r3, #24]
80001eec:	f003 0320 	and.w	r3, r3, #32
80001ef0:	607b      	str	r3, [r7, #4]
80001ef2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
80001ef4:	4b12      	ldr	r3, [pc, #72]	; (80001f40 <MX_GPIO_Init+0x78>)
80001ef6:	699b      	ldr	r3, [r3, #24]
80001ef8:	4a11      	ldr	r2, [pc, #68]	; (80001f40 <MX_GPIO_Init+0x78>)
80001efa:	f043 0304 	orr.w	r3, r3, #4
80001efe:	6193      	str	r3, [r2, #24]
80001f00:	4b0f      	ldr	r3, [pc, #60]	; (80001f40 <MX_GPIO_Init+0x78>)
80001f02:	699b      	ldr	r3, [r3, #24]
80001f04:	f003 0304 	and.w	r3, r3, #4
80001f08:	603b      	str	r3, [r7, #0]
80001f0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
80001f0c:	2200      	movs	r2, #0
80001f0e:	f240 71ff 	movw	r1, #2047	; 0x7ff
80001f12:	480c      	ldr	r0, [pc, #48]	; (80001f44 <MX_GPIO_Init+0x7c>)
80001f14:	f000 fc4e 	bl	800027b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
80001f18:	f240 73ff 	movw	r3, #2047	; 0x7ff
80001f1c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
80001f1e:	2301      	movs	r3, #1
80001f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
80001f22:	2300      	movs	r3, #0
80001f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
80001f26:	2302      	movs	r3, #2
80001f28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
80001f2a:	f107 0308 	add.w	r3, r7, #8
80001f2e:	4619      	mov	r1, r3
80001f30:	4804      	ldr	r0, [pc, #16]	; (80001f44 <MX_GPIO_Init+0x7c>)
80001f32:	f000 fae5 	bl	80002500 <HAL_GPIO_Init>

}
80001f36:	bf00      	nop
80001f38:	3718      	adds	r7, #24
80001f3a:	46bd      	mov	sp, r7
80001f3c:	bd80      	pop	{r7, pc}
80001f3e:	bf00      	nop
80001f40:	40021000 	.word	0x40021000
80001f44:	40010800 	.word	0x40010800

80001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
80001f48:	b480      	push	{r7}
80001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
80001f4c:	bf00      	nop
80001f4e:	46bd      	mov	sp, r7
80001f50:	bc80      	pop	{r7}
80001f52:	4770      	bx	lr

80001f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
80001f54:	b480      	push	{r7}
80001f56:	b085      	sub	sp, #20
80001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
80001f5a:	4b15      	ldr	r3, [pc, #84]	; (80001fb0 <HAL_MspInit+0x5c>)
80001f5c:	699b      	ldr	r3, [r3, #24]
80001f5e:	4a14      	ldr	r2, [pc, #80]	; (80001fb0 <HAL_MspInit+0x5c>)
80001f60:	f043 0301 	orr.w	r3, r3, #1
80001f64:	6193      	str	r3, [r2, #24]
80001f66:	4b12      	ldr	r3, [pc, #72]	; (80001fb0 <HAL_MspInit+0x5c>)
80001f68:	699b      	ldr	r3, [r3, #24]
80001f6a:	f003 0301 	and.w	r3, r3, #1
80001f6e:	60bb      	str	r3, [r7, #8]
80001f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
80001f72:	4b0f      	ldr	r3, [pc, #60]	; (80001fb0 <HAL_MspInit+0x5c>)
80001f74:	69db      	ldr	r3, [r3, #28]
80001f76:	4a0e      	ldr	r2, [pc, #56]	; (80001fb0 <HAL_MspInit+0x5c>)
80001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
80001f7c:	61d3      	str	r3, [r2, #28]
80001f7e:	4b0c      	ldr	r3, [pc, #48]	; (80001fb0 <HAL_MspInit+0x5c>)
80001f80:	69db      	ldr	r3, [r3, #28]
80001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
80001f86:	607b      	str	r3, [r7, #4]
80001f88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
80001f8a:	4b0a      	ldr	r3, [pc, #40]	; (80001fb4 <HAL_MspInit+0x60>)
80001f8c:	685b      	ldr	r3, [r3, #4]
80001f8e:	60fb      	str	r3, [r7, #12]
80001f90:	68fb      	ldr	r3, [r7, #12]
80001f92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
80001f96:	60fb      	str	r3, [r7, #12]
80001f98:	68fb      	ldr	r3, [r7, #12]
80001f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
80001f9e:	60fb      	str	r3, [r7, #12]
80001fa0:	4a04      	ldr	r2, [pc, #16]	; (80001fb4 <HAL_MspInit+0x60>)
80001fa2:	68fb      	ldr	r3, [r7, #12]
80001fa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
80001fa6:	bf00      	nop
80001fa8:	3714      	adds	r7, #20
80001faa:	46bd      	mov	sp, r7
80001fac:	bc80      	pop	{r7}
80001fae:	4770      	bx	lr
80001fb0:	40021000 	.word	0x40021000
80001fb4:	40010000 	.word	0x40010000

80001fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
80001fb8:	b580      	push	{r7, lr}
80001fba:	b086      	sub	sp, #24
80001fbc:	af00      	add	r7, sp, #0
80001fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
80001fc0:	687b      	ldr	r3, [r7, #4]
80001fc2:	681b      	ldr	r3, [r3, #0]
80001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
80001fc8:	d114      	bne.n	80001ff4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
80001fca:	4b26      	ldr	r3, [pc, #152]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
80001fcc:	69db      	ldr	r3, [r3, #28]
80001fce:	4a25      	ldr	r2, [pc, #148]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
80001fd0:	f043 0301 	orr.w	r3, r3, #1
80001fd4:	61d3      	str	r3, [r2, #28]
80001fd6:	4b23      	ldr	r3, [pc, #140]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
80001fd8:	69db      	ldr	r3, [r3, #28]
80001fda:	f003 0301 	and.w	r3, r3, #1
80001fde:	617b      	str	r3, [r7, #20]
80001fe0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
80001fe2:	2200      	movs	r2, #0
80001fe4:	2100      	movs	r1, #0
80001fe6:	201c      	movs	r0, #28
80001fe8:	f000 fa53 	bl	80002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
80001fec:	201c      	movs	r0, #28
80001fee:	f000 fa6c 	bl	800024ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
80001ff2:	e032      	b.n	8000205a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
80001ff4:	687b      	ldr	r3, [r7, #4]
80001ff6:	681b      	ldr	r3, [r3, #0]
80001ff8:	4a1b      	ldr	r2, [pc, #108]	; (80002068 <HAL_TIM_Base_MspInit+0xb0>)
80001ffa:	4293      	cmp	r3, r2
80001ffc:	d114      	bne.n	80002028 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
80001ffe:	4b19      	ldr	r3, [pc, #100]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
80002000:	69db      	ldr	r3, [r3, #28]
80002002:	4a18      	ldr	r2, [pc, #96]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
80002004:	f043 0302 	orr.w	r3, r3, #2
80002008:	61d3      	str	r3, [r2, #28]
8000200a:	4b16      	ldr	r3, [pc, #88]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
8000200c:	69db      	ldr	r3, [r3, #28]
8000200e:	f003 0302 	and.w	r3, r3, #2
80002012:	613b      	str	r3, [r7, #16]
80002014:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
80002016:	2200      	movs	r2, #0
80002018:	2100      	movs	r1, #0
8000201a:	201d      	movs	r0, #29
8000201c:	f000 fa39 	bl	80002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
80002020:	201d      	movs	r0, #29
80002022:	f000 fa52 	bl	800024ca <HAL_NVIC_EnableIRQ>
}
80002026:	e018      	b.n	8000205a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
80002028:	687b      	ldr	r3, [r7, #4]
8000202a:	681b      	ldr	r3, [r3, #0]
8000202c:	4a0f      	ldr	r2, [pc, #60]	; (8000206c <HAL_TIM_Base_MspInit+0xb4>)
8000202e:	4293      	cmp	r3, r2
80002030:	d113      	bne.n	8000205a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
80002032:	4b0c      	ldr	r3, [pc, #48]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
80002034:	69db      	ldr	r3, [r3, #28]
80002036:	4a0b      	ldr	r2, [pc, #44]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
80002038:	f043 0304 	orr.w	r3, r3, #4
8000203c:	61d3      	str	r3, [r2, #28]
8000203e:	4b09      	ldr	r3, [pc, #36]	; (80002064 <HAL_TIM_Base_MspInit+0xac>)
80002040:	69db      	ldr	r3, [r3, #28]
80002042:	f003 0304 	and.w	r3, r3, #4
80002046:	60fb      	str	r3, [r7, #12]
80002048:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
8000204a:	2200      	movs	r2, #0
8000204c:	2100      	movs	r1, #0
8000204e:	201e      	movs	r0, #30
80002050:	f000 fa1f 	bl	80002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
80002054:	201e      	movs	r0, #30
80002056:	f000 fa38 	bl	800024ca <HAL_NVIC_EnableIRQ>
}
8000205a:	bf00      	nop
8000205c:	3718      	adds	r7, #24
8000205e:	46bd      	mov	sp, r7
80002060:	bd80      	pop	{r7, pc}
80002062:	bf00      	nop
80002064:	40021000 	.word	0x40021000
80002068:	40000400 	.word	0x40000400
8000206c:	40000800 	.word	0x40000800

80002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
80002070:	b480      	push	{r7}
80002072:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
80002074:	bf00      	nop
80002076:	46bd      	mov	sp, r7
80002078:	bc80      	pop	{r7}
8000207a:	4770      	bx	lr

8000207c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
8000207c:	b480      	push	{r7}
8000207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
80002080:	e7fe      	b.n	80002080 <HardFault_Handler+0x4>

80002082 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
80002082:	b480      	push	{r7}
80002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
80002086:	e7fe      	b.n	80002086 <MemManage_Handler+0x4>

80002088 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
80002088:	b480      	push	{r7}
8000208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
8000208c:	e7fe      	b.n	8000208c <BusFault_Handler+0x4>

8000208e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
8000208e:	b480      	push	{r7}
80002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
80002092:	e7fe      	b.n	80002092 <UsageFault_Handler+0x4>

80002094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
80002094:	b480      	push	{r7}
80002096:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
80002098:	bf00      	nop
8000209a:	46bd      	mov	sp, r7
8000209c:	bc80      	pop	{r7}
8000209e:	4770      	bx	lr

800020a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
800020a0:	b480      	push	{r7}
800020a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
800020a4:	bf00      	nop
800020a6:	46bd      	mov	sp, r7
800020a8:	bc80      	pop	{r7}
800020aa:	4770      	bx	lr

800020ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
800020ac:	b480      	push	{r7}
800020ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
800020b0:	bf00      	nop
800020b2:	46bd      	mov	sp, r7
800020b4:	bc80      	pop	{r7}
800020b6:	4770      	bx	lr

800020b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
800020b8:	b580      	push	{r7, lr}
800020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
800020bc:	f000 f8f6 	bl	800022ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
800020c0:	bf00      	nop
800020c2:	bd80      	pop	{r7, pc}

800020c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
800020c4:	b580      	push	{r7, lr}
800020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
800020c8:	4802      	ldr	r0, [pc, #8]	; (800020d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
800020ca:	f000 fcaa 	bl	80002a22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
800020ce:	bf00      	nop
800020d0:	bd80      	pop	{r7, pc}
800020d2:	bf00      	nop
800020d4:	200011c0 	.word	0x200011c0

800020d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
800020d8:	b580      	push	{r7, lr}
800020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
800020dc:	4807      	ldr	r0, [pc, #28]	; (800020fc <TIM2_IRQHandler+0x24>)
800020de:	f001 ff69 	bl	80003fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //
  if (motor[0].currentCount < motor[0].targetCount)
800020e2:	4b07      	ldr	r3, [pc, #28]	; (80002100 <TIM2_IRQHandler+0x28>)
800020e4:	8a1b      	ldrh	r3, [r3, #16]
800020e6:	b21a      	sxth	r2, r3
800020e8:	4b05      	ldr	r3, [pc, #20]	; (80002100 <TIM2_IRQHandler+0x28>)
800020ea:	8a5b      	ldrh	r3, [r3, #18]
800020ec:	b21b      	sxth	r3, r3
800020ee:	429a      	cmp	r2, r3
800020f0:	da02      	bge.n	800020f8 <TIM2_IRQHandler+0x20>
  {
	  motor[0].pulseFlag = 1;
800020f2:	4b03      	ldr	r3, [pc, #12]	; (80002100 <TIM2_IRQHandler+0x28>)
800020f4:	2201      	movs	r2, #1
800020f6:	761a      	strb	r2, [r3, #24]
  }

  /* USER CODE END TIM2_IRQn 1 */
}
800020f8:	bf00      	nop
800020fa:	bd80      	pop	{r7, pc}
800020fc:	20000444 	.word	0x20000444
80002100:	20000484 	.word	0x20000484

80002104 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
80002104:	b580      	push	{r7, lr}
80002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
80002108:	4809      	ldr	r0, [pc, #36]	; (80002130 <TIM3_IRQHandler+0x2c>)
8000210a:	f001 ff53 	bl	80003fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  if (motor[1].currentCount < motor[1].targetCount)
8000210e:	4b09      	ldr	r3, [pc, #36]	; (80002134 <TIM3_IRQHandler+0x30>)
80002110:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
80002114:	b21a      	sxth	r2, r3
80002116:	4b07      	ldr	r3, [pc, #28]	; (80002134 <TIM3_IRQHandler+0x30>)
80002118:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
8000211c:	b21b      	sxth	r3, r3
8000211e:	429a      	cmp	r2, r3
80002120:	da03      	bge.n	8000212a <TIM3_IRQHandler+0x26>
  {
	  motor[1].pulseFlag = 1;
80002122:	4b04      	ldr	r3, [pc, #16]	; (80002134 <TIM3_IRQHandler+0x30>)
80002124:	2201      	movs	r2, #1
80002126:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  }
  /* USER CODE END TIM3_IRQn 1 */
}
8000212a:	bf00      	nop
8000212c:	bd80      	pop	{r7, pc}
8000212e:	bf00      	nop
80002130:	20000400 	.word	0x20000400
80002134:	20000484 	.word	0x20000484

80002138 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
80002138:	b580      	push	{r7, lr}
8000213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
8000213c:	4809      	ldr	r0, [pc, #36]	; (80002164 <TIM4_IRQHandler+0x2c>)
8000213e:	f001 ff39 	bl	80003fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  if (motor[2].currentCount != motor[2].targetCount)
80002142:	4b09      	ldr	r3, [pc, #36]	; (80002168 <TIM4_IRQHandler+0x30>)
80002144:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
80002148:	b21a      	sxth	r2, r3
8000214a:	4b07      	ldr	r3, [pc, #28]	; (80002168 <TIM4_IRQHandler+0x30>)
8000214c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
80002150:	b21b      	sxth	r3, r3
80002152:	429a      	cmp	r2, r3
80002154:	d003      	beq.n	8000215e <TIM4_IRQHandler+0x26>
  {
	  motor[2].pulseFlag = 1;
80002156:	4b04      	ldr	r3, [pc, #16]	; (80002168 <TIM4_IRQHandler+0x30>)
80002158:	2201      	movs	r2, #1
8000215a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  }
  /* USER CODE END TIM4_IRQn 1 */
}
8000215e:	bf00      	nop
80002160:	bd80      	pop	{r7, pc}
80002162:	bf00      	nop
80002164:	200003c0 	.word	0x200003c0
80002168:	20000484 	.word	0x20000484

8000216c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
8000216c:	b480      	push	{r7}
8000216e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
80002170:	4b15      	ldr	r3, [pc, #84]	; (800021c8 <SystemInit+0x5c>)
80002172:	681b      	ldr	r3, [r3, #0]
80002174:	4a14      	ldr	r2, [pc, #80]	; (800021c8 <SystemInit+0x5c>)
80002176:	f043 0301 	orr.w	r3, r3, #1
8000217a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
8000217c:	4b12      	ldr	r3, [pc, #72]	; (800021c8 <SystemInit+0x5c>)
8000217e:	685a      	ldr	r2, [r3, #4]
80002180:	4911      	ldr	r1, [pc, #68]	; (800021c8 <SystemInit+0x5c>)
80002182:	4b12      	ldr	r3, [pc, #72]	; (800021cc <SystemInit+0x60>)
80002184:	4013      	ands	r3, r2
80002186:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
80002188:	4b0f      	ldr	r3, [pc, #60]	; (800021c8 <SystemInit+0x5c>)
8000218a:	681b      	ldr	r3, [r3, #0]
8000218c:	4a0e      	ldr	r2, [pc, #56]	; (800021c8 <SystemInit+0x5c>)
8000218e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
80002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
80002196:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
80002198:	4b0b      	ldr	r3, [pc, #44]	; (800021c8 <SystemInit+0x5c>)
8000219a:	681b      	ldr	r3, [r3, #0]
8000219c:	4a0a      	ldr	r2, [pc, #40]	; (800021c8 <SystemInit+0x5c>)
8000219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
800021a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
800021a4:	4b08      	ldr	r3, [pc, #32]	; (800021c8 <SystemInit+0x5c>)
800021a6:	685b      	ldr	r3, [r3, #4]
800021a8:	4a07      	ldr	r2, [pc, #28]	; (800021c8 <SystemInit+0x5c>)
800021aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
800021ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
800021b0:	4b05      	ldr	r3, [pc, #20]	; (800021c8 <SystemInit+0x5c>)
800021b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
800021b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
800021b8:	4b05      	ldr	r3, [pc, #20]	; (800021d0 <SystemInit+0x64>)
800021ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
800021be:	609a      	str	r2, [r3, #8]
#endif 
}
800021c0:	bf00      	nop
800021c2:	46bd      	mov	sp, r7
800021c4:	bc80      	pop	{r7}
800021c6:	4770      	bx	lr
800021c8:	40021000 	.word	0x40021000
800021cc:	f8ff0000 	.word	0xf8ff0000
800021d0:	e000ed00 	.word	0xe000ed00

800021d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
800021d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
800021d6:	e003      	b.n	800021e0 <LoopCopyDataInit>

800021d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
800021d8:	4b0b      	ldr	r3, [pc, #44]	; (80002208 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
800021da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
800021dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
800021de:	3104      	adds	r1, #4

800021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
800021e0:	480a      	ldr	r0, [pc, #40]	; (8000220c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
800021e2:	4b0b      	ldr	r3, [pc, #44]	; (80002210 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
800021e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
800021e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
800021e8:	d3f6      	bcc.n	800021d8 <CopyDataInit>
  ldr r2, =_sbss
800021ea:	4a0a      	ldr	r2, [pc, #40]	; (80002214 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
800021ec:	e002      	b.n	800021f4 <LoopFillZerobss>

800021ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
800021ee:	2300      	movs	r3, #0
  str r3, [r2], #4
800021f0:	f842 3b04 	str.w	r3, [r2], #4

800021f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
800021f4:	4b08      	ldr	r3, [pc, #32]	; (80002218 <LoopFillZerobss+0x24>)
  cmp r2, r3
800021f6:	429a      	cmp	r2, r3
  bcc FillZerobss
800021f8:	d3f9      	bcc.n	800021ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
800021fa:	f7ff ffb7 	bl	8000216c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
800021fe:	f005 fb9b 	bl	80007938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
80002202:	f7ff fbfb 	bl	800019fc <main>
  bx lr
80002206:	4770      	bx	lr
  ldr r3, =_sidata
80002208:	80007b20 	.word	0x80007b20
  ldr r0, =_sdata
8000220c:	20000000 	.word	0x20000000
  ldr r3, =_edata
80002210:	20000180 	.word	0x20000180
  ldr r2, =_sbss
80002214:	20000180 	.word	0x20000180
  ldr r3, = _ebss
80002218:	2000142c 	.word	0x2000142c

8000221c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
8000221c:	e7fe      	b.n	8000221c <ADC1_2_IRQHandler>
	...

80002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
80002220:	b580      	push	{r7, lr}
80002222:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
80002224:	4b08      	ldr	r3, [pc, #32]	; (80002248 <HAL_Init+0x28>)
80002226:	681b      	ldr	r3, [r3, #0]
80002228:	4a07      	ldr	r2, [pc, #28]	; (80002248 <HAL_Init+0x28>)
8000222a:	f043 0310 	orr.w	r3, r3, #16
8000222e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
80002230:	2003      	movs	r0, #3
80002232:	f000 f923 	bl	8000247c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
80002236:	2000      	movs	r0, #0
80002238:	f000 f808 	bl	8000224c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
8000223c:	f7ff fe8a 	bl	80001f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
80002240:	2300      	movs	r3, #0
}
80002242:	4618      	mov	r0, r3
80002244:	bd80      	pop	{r7, pc}
80002246:	bf00      	nop
80002248:	40022000 	.word	0x40022000

8000224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
8000224c:	b580      	push	{r7, lr}
8000224e:	b082      	sub	sp, #8
80002250:	af00      	add	r7, sp, #0
80002252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
80002254:	4b12      	ldr	r3, [pc, #72]	; (800022a0 <HAL_InitTick+0x54>)
80002256:	681a      	ldr	r2, [r3, #0]
80002258:	4b12      	ldr	r3, [pc, #72]	; (800022a4 <HAL_InitTick+0x58>)
8000225a:	781b      	ldrb	r3, [r3, #0]
8000225c:	4619      	mov	r1, r3
8000225e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
80002262:	fbb3 f3f1 	udiv	r3, r3, r1
80002266:	fbb2 f3f3 	udiv	r3, r2, r3
8000226a:	4618      	mov	r0, r3
8000226c:	f000 f93b 	bl	800024e6 <HAL_SYSTICK_Config>
80002270:	4603      	mov	r3, r0
80002272:	2b00      	cmp	r3, #0
80002274:	d001      	beq.n	8000227a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
80002276:	2301      	movs	r3, #1
80002278:	e00e      	b.n	80002298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
8000227a:	687b      	ldr	r3, [r7, #4]
8000227c:	2b0f      	cmp	r3, #15
8000227e:	d80a      	bhi.n	80002296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
80002280:	2200      	movs	r2, #0
80002282:	6879      	ldr	r1, [r7, #4]
80002284:	f04f 30ff 	mov.w	r0, #4294967295
80002288:	f000 f903 	bl	80002492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
8000228c:	4a06      	ldr	r2, [pc, #24]	; (800022a8 <HAL_InitTick+0x5c>)
8000228e:	687b      	ldr	r3, [r7, #4]
80002290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
80002292:	2300      	movs	r3, #0
80002294:	e000      	b.n	80002298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
80002296:	2301      	movs	r3, #1
}
80002298:	4618      	mov	r0, r3
8000229a:	3708      	adds	r7, #8
8000229c:	46bd      	mov	sp, r7
8000229e:	bd80      	pop	{r7, pc}
800022a0:	20000004 	.word	0x20000004
800022a4:	2000000c 	.word	0x2000000c
800022a8:	20000008 	.word	0x20000008

800022ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
800022ac:	b480      	push	{r7}
800022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
800022b0:	4b05      	ldr	r3, [pc, #20]	; (800022c8 <HAL_IncTick+0x1c>)
800022b2:	781b      	ldrb	r3, [r3, #0]
800022b4:	461a      	mov	r2, r3
800022b6:	4b05      	ldr	r3, [pc, #20]	; (800022cc <HAL_IncTick+0x20>)
800022b8:	681b      	ldr	r3, [r3, #0]
800022ba:	4413      	add	r3, r2
800022bc:	4a03      	ldr	r2, [pc, #12]	; (800022cc <HAL_IncTick+0x20>)
800022be:	6013      	str	r3, [r2, #0]
}
800022c0:	bf00      	nop
800022c2:	46bd      	mov	sp, r7
800022c4:	bc80      	pop	{r7}
800022c6:	4770      	bx	lr
800022c8:	2000000c 	.word	0x2000000c
800022cc:	20000514 	.word	0x20000514

800022d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
800022d0:	b480      	push	{r7}
800022d2:	af00      	add	r7, sp, #0
  return uwTick;
800022d4:	4b02      	ldr	r3, [pc, #8]	; (800022e0 <HAL_GetTick+0x10>)
800022d6:	681b      	ldr	r3, [r3, #0]
}
800022d8:	4618      	mov	r0, r3
800022da:	46bd      	mov	sp, r7
800022dc:	bc80      	pop	{r7}
800022de:	4770      	bx	lr
800022e0:	20000514 	.word	0x20000514

800022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
800022e4:	b480      	push	{r7}
800022e6:	b085      	sub	sp, #20
800022e8:	af00      	add	r7, sp, #0
800022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
800022ec:	687b      	ldr	r3, [r7, #4]
800022ee:	f003 0307 	and.w	r3, r3, #7
800022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
800022f4:	4b0c      	ldr	r3, [pc, #48]	; (80002328 <__NVIC_SetPriorityGrouping+0x44>)
800022f6:	68db      	ldr	r3, [r3, #12]
800022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
800022fa:	68ba      	ldr	r2, [r7, #8]
800022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
80002300:	4013      	ands	r3, r2
80002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
80002304:	68fb      	ldr	r3, [r7, #12]
80002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
80002308:	68bb      	ldr	r3, [r7, #8]
8000230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
8000230c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
80002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
80002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
80002316:	4a04      	ldr	r2, [pc, #16]	; (80002328 <__NVIC_SetPriorityGrouping+0x44>)
80002318:	68bb      	ldr	r3, [r7, #8]
8000231a:	60d3      	str	r3, [r2, #12]
}
8000231c:	bf00      	nop
8000231e:	3714      	adds	r7, #20
80002320:	46bd      	mov	sp, r7
80002322:	bc80      	pop	{r7}
80002324:	4770      	bx	lr
80002326:	bf00      	nop
80002328:	e000ed00 	.word	0xe000ed00

8000232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
8000232c:	b480      	push	{r7}
8000232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
80002330:	4b04      	ldr	r3, [pc, #16]	; (80002344 <__NVIC_GetPriorityGrouping+0x18>)
80002332:	68db      	ldr	r3, [r3, #12]
80002334:	0a1b      	lsrs	r3, r3, #8
80002336:	f003 0307 	and.w	r3, r3, #7
}
8000233a:	4618      	mov	r0, r3
8000233c:	46bd      	mov	sp, r7
8000233e:	bc80      	pop	{r7}
80002340:	4770      	bx	lr
80002342:	bf00      	nop
80002344:	e000ed00 	.word	0xe000ed00

80002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
80002348:	b480      	push	{r7}
8000234a:	b083      	sub	sp, #12
8000234c:	af00      	add	r7, sp, #0
8000234e:	4603      	mov	r3, r0
80002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
80002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
80002356:	2b00      	cmp	r3, #0
80002358:	db0b      	blt.n	80002372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
8000235a:	79fb      	ldrb	r3, [r7, #7]
8000235c:	f003 021f 	and.w	r2, r3, #31
80002360:	4906      	ldr	r1, [pc, #24]	; (8000237c <__NVIC_EnableIRQ+0x34>)
80002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
80002366:	095b      	lsrs	r3, r3, #5
80002368:	2001      	movs	r0, #1
8000236a:	fa00 f202 	lsl.w	r2, r0, r2
8000236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
80002372:	bf00      	nop
80002374:	370c      	adds	r7, #12
80002376:	46bd      	mov	sp, r7
80002378:	bc80      	pop	{r7}
8000237a:	4770      	bx	lr
8000237c:	e000e100 	.word	0xe000e100

80002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
80002380:	b480      	push	{r7}
80002382:	b083      	sub	sp, #12
80002384:	af00      	add	r7, sp, #0
80002386:	4603      	mov	r3, r0
80002388:	6039      	str	r1, [r7, #0]
8000238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
8000238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
80002390:	2b00      	cmp	r3, #0
80002392:	db0a      	blt.n	800023aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
80002394:	683b      	ldr	r3, [r7, #0]
80002396:	b2da      	uxtb	r2, r3
80002398:	490c      	ldr	r1, [pc, #48]	; (800023cc <__NVIC_SetPriority+0x4c>)
8000239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
8000239e:	0112      	lsls	r2, r2, #4
800023a0:	b2d2      	uxtb	r2, r2
800023a2:	440b      	add	r3, r1
800023a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
800023a8:	e00a      	b.n	800023c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
800023aa:	683b      	ldr	r3, [r7, #0]
800023ac:	b2da      	uxtb	r2, r3
800023ae:	4908      	ldr	r1, [pc, #32]	; (800023d0 <__NVIC_SetPriority+0x50>)
800023b0:	79fb      	ldrb	r3, [r7, #7]
800023b2:	f003 030f 	and.w	r3, r3, #15
800023b6:	3b04      	subs	r3, #4
800023b8:	0112      	lsls	r2, r2, #4
800023ba:	b2d2      	uxtb	r2, r2
800023bc:	440b      	add	r3, r1
800023be:	761a      	strb	r2, [r3, #24]
}
800023c0:	bf00      	nop
800023c2:	370c      	adds	r7, #12
800023c4:	46bd      	mov	sp, r7
800023c6:	bc80      	pop	{r7}
800023c8:	4770      	bx	lr
800023ca:	bf00      	nop
800023cc:	e000e100 	.word	0xe000e100
800023d0:	e000ed00 	.word	0xe000ed00

800023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
800023d4:	b480      	push	{r7}
800023d6:	b089      	sub	sp, #36	; 0x24
800023d8:	af00      	add	r7, sp, #0
800023da:	60f8      	str	r0, [r7, #12]
800023dc:	60b9      	str	r1, [r7, #8]
800023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
800023e0:	68fb      	ldr	r3, [r7, #12]
800023e2:	f003 0307 	and.w	r3, r3, #7
800023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
800023e8:	69fb      	ldr	r3, [r7, #28]
800023ea:	f1c3 0307 	rsb	r3, r3, #7
800023ee:	2b04      	cmp	r3, #4
800023f0:	bf28      	it	cs
800023f2:	2304      	movcs	r3, #4
800023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
800023f6:	69fb      	ldr	r3, [r7, #28]
800023f8:	3304      	adds	r3, #4
800023fa:	2b06      	cmp	r3, #6
800023fc:	d902      	bls.n	80002404 <NVIC_EncodePriority+0x30>
800023fe:	69fb      	ldr	r3, [r7, #28]
80002400:	3b03      	subs	r3, #3
80002402:	e000      	b.n	80002406 <NVIC_EncodePriority+0x32>
80002404:	2300      	movs	r3, #0
80002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
80002408:	f04f 32ff 	mov.w	r2, #4294967295
8000240c:	69bb      	ldr	r3, [r7, #24]
8000240e:	fa02 f303 	lsl.w	r3, r2, r3
80002412:	43da      	mvns	r2, r3
80002414:	68bb      	ldr	r3, [r7, #8]
80002416:	401a      	ands	r2, r3
80002418:	697b      	ldr	r3, [r7, #20]
8000241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
8000241c:	f04f 31ff 	mov.w	r1, #4294967295
80002420:	697b      	ldr	r3, [r7, #20]
80002422:	fa01 f303 	lsl.w	r3, r1, r3
80002426:	43d9      	mvns	r1, r3
80002428:	687b      	ldr	r3, [r7, #4]
8000242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
8000242c:	4313      	orrs	r3, r2
         );
}
8000242e:	4618      	mov	r0, r3
80002430:	3724      	adds	r7, #36	; 0x24
80002432:	46bd      	mov	sp, r7
80002434:	bc80      	pop	{r7}
80002436:	4770      	bx	lr

80002438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
80002438:	b580      	push	{r7, lr}
8000243a:	b082      	sub	sp, #8
8000243c:	af00      	add	r7, sp, #0
8000243e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
80002440:	687b      	ldr	r3, [r7, #4]
80002442:	3b01      	subs	r3, #1
80002444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
80002448:	d301      	bcc.n	8000244e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
8000244a:	2301      	movs	r3, #1
8000244c:	e00f      	b.n	8000246e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
8000244e:	4a0a      	ldr	r2, [pc, #40]	; (80002478 <SysTick_Config+0x40>)
80002450:	687b      	ldr	r3, [r7, #4]
80002452:	3b01      	subs	r3, #1
80002454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
80002456:	210f      	movs	r1, #15
80002458:	f04f 30ff 	mov.w	r0, #4294967295
8000245c:	f7ff ff90 	bl	80002380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
80002460:	4b05      	ldr	r3, [pc, #20]	; (80002478 <SysTick_Config+0x40>)
80002462:	2200      	movs	r2, #0
80002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
80002466:	4b04      	ldr	r3, [pc, #16]	; (80002478 <SysTick_Config+0x40>)
80002468:	2207      	movs	r2, #7
8000246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
8000246c:	2300      	movs	r3, #0
}
8000246e:	4618      	mov	r0, r3
80002470:	3708      	adds	r7, #8
80002472:	46bd      	mov	sp, r7
80002474:	bd80      	pop	{r7, pc}
80002476:	bf00      	nop
80002478:	e000e010 	.word	0xe000e010

8000247c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
8000247c:	b580      	push	{r7, lr}
8000247e:	b082      	sub	sp, #8
80002480:	af00      	add	r7, sp, #0
80002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
80002484:	6878      	ldr	r0, [r7, #4]
80002486:	f7ff ff2d 	bl	800022e4 <__NVIC_SetPriorityGrouping>
}
8000248a:	bf00      	nop
8000248c:	3708      	adds	r7, #8
8000248e:	46bd      	mov	sp, r7
80002490:	bd80      	pop	{r7, pc}

80002492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
80002492:	b580      	push	{r7, lr}
80002494:	b086      	sub	sp, #24
80002496:	af00      	add	r7, sp, #0
80002498:	4603      	mov	r3, r0
8000249a:	60b9      	str	r1, [r7, #8]
8000249c:	607a      	str	r2, [r7, #4]
8000249e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
800024a0:	2300      	movs	r3, #0
800024a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
800024a4:	f7ff ff42 	bl	8000232c <__NVIC_GetPriorityGrouping>
800024a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
800024aa:	687a      	ldr	r2, [r7, #4]
800024ac:	68b9      	ldr	r1, [r7, #8]
800024ae:	6978      	ldr	r0, [r7, #20]
800024b0:	f7ff ff90 	bl	800023d4 <NVIC_EncodePriority>
800024b4:	4602      	mov	r2, r0
800024b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
800024ba:	4611      	mov	r1, r2
800024bc:	4618      	mov	r0, r3
800024be:	f7ff ff5f 	bl	80002380 <__NVIC_SetPriority>
}
800024c2:	bf00      	nop
800024c4:	3718      	adds	r7, #24
800024c6:	46bd      	mov	sp, r7
800024c8:	bd80      	pop	{r7, pc}

800024ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
800024ca:	b580      	push	{r7, lr}
800024cc:	b082      	sub	sp, #8
800024ce:	af00      	add	r7, sp, #0
800024d0:	4603      	mov	r3, r0
800024d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
800024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
800024d8:	4618      	mov	r0, r3
800024da:	f7ff ff35 	bl	80002348 <__NVIC_EnableIRQ>
}
800024de:	bf00      	nop
800024e0:	3708      	adds	r7, #8
800024e2:	46bd      	mov	sp, r7
800024e4:	bd80      	pop	{r7, pc}

800024e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
800024e6:	b580      	push	{r7, lr}
800024e8:	b082      	sub	sp, #8
800024ea:	af00      	add	r7, sp, #0
800024ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
800024ee:	6878      	ldr	r0, [r7, #4]
800024f0:	f7ff ffa2 	bl	80002438 <SysTick_Config>
800024f4:	4603      	mov	r3, r0
}
800024f6:	4618      	mov	r0, r3
800024f8:	3708      	adds	r7, #8
800024fa:	46bd      	mov	sp, r7
800024fc:	bd80      	pop	{r7, pc}
	...

80002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
80002500:	b480      	push	{r7}
80002502:	b08b      	sub	sp, #44	; 0x2c
80002504:	af00      	add	r7, sp, #0
80002506:	6078      	str	r0, [r7, #4]
80002508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
8000250a:	2300      	movs	r3, #0
8000250c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
8000250e:	2300      	movs	r3, #0
80002510:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
80002512:	e127      	b.n	80002764 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
80002514:	2201      	movs	r2, #1
80002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
80002518:	fa02 f303 	lsl.w	r3, r2, r3
8000251c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
8000251e:	683b      	ldr	r3, [r7, #0]
80002520:	681b      	ldr	r3, [r3, #0]
80002522:	69fa      	ldr	r2, [r7, #28]
80002524:	4013      	ands	r3, r2
80002526:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
80002528:	69ba      	ldr	r2, [r7, #24]
8000252a:	69fb      	ldr	r3, [r7, #28]
8000252c:	429a      	cmp	r2, r3
8000252e:	f040 8116 	bne.w	8000275e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
80002532:	683b      	ldr	r3, [r7, #0]
80002534:	685b      	ldr	r3, [r3, #4]
80002536:	2b12      	cmp	r3, #18
80002538:	d034      	beq.n	800025a4 <HAL_GPIO_Init+0xa4>
8000253a:	2b12      	cmp	r3, #18
8000253c:	d80d      	bhi.n	8000255a <HAL_GPIO_Init+0x5a>
8000253e:	2b02      	cmp	r3, #2
80002540:	d02b      	beq.n	8000259a <HAL_GPIO_Init+0x9a>
80002542:	2b02      	cmp	r3, #2
80002544:	d804      	bhi.n	80002550 <HAL_GPIO_Init+0x50>
80002546:	2b00      	cmp	r3, #0
80002548:	d031      	beq.n	800025ae <HAL_GPIO_Init+0xae>
8000254a:	2b01      	cmp	r3, #1
8000254c:	d01c      	beq.n	80002588 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
8000254e:	e048      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
80002550:	2b03      	cmp	r3, #3
80002552:	d043      	beq.n	800025dc <HAL_GPIO_Init+0xdc>
80002554:	2b11      	cmp	r3, #17
80002556:	d01b      	beq.n	80002590 <HAL_GPIO_Init+0x90>
          break;
80002558:	e043      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
8000255a:	4a89      	ldr	r2, [pc, #548]	; (80002780 <HAL_GPIO_Init+0x280>)
8000255c:	4293      	cmp	r3, r2
8000255e:	d026      	beq.n	800025ae <HAL_GPIO_Init+0xae>
80002560:	4a87      	ldr	r2, [pc, #540]	; (80002780 <HAL_GPIO_Init+0x280>)
80002562:	4293      	cmp	r3, r2
80002564:	d806      	bhi.n	80002574 <HAL_GPIO_Init+0x74>
80002566:	4a87      	ldr	r2, [pc, #540]	; (80002784 <HAL_GPIO_Init+0x284>)
80002568:	4293      	cmp	r3, r2
8000256a:	d020      	beq.n	800025ae <HAL_GPIO_Init+0xae>
8000256c:	4a86      	ldr	r2, [pc, #536]	; (80002788 <HAL_GPIO_Init+0x288>)
8000256e:	4293      	cmp	r3, r2
80002570:	d01d      	beq.n	800025ae <HAL_GPIO_Init+0xae>
          break;
80002572:	e036      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
80002574:	4a85      	ldr	r2, [pc, #532]	; (8000278c <HAL_GPIO_Init+0x28c>)
80002576:	4293      	cmp	r3, r2
80002578:	d019      	beq.n	800025ae <HAL_GPIO_Init+0xae>
8000257a:	4a85      	ldr	r2, [pc, #532]	; (80002790 <HAL_GPIO_Init+0x290>)
8000257c:	4293      	cmp	r3, r2
8000257e:	d016      	beq.n	800025ae <HAL_GPIO_Init+0xae>
80002580:	4a84      	ldr	r2, [pc, #528]	; (80002794 <HAL_GPIO_Init+0x294>)
80002582:	4293      	cmp	r3, r2
80002584:	d013      	beq.n	800025ae <HAL_GPIO_Init+0xae>
          break;
80002586:	e02c      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
80002588:	683b      	ldr	r3, [r7, #0]
8000258a:	68db      	ldr	r3, [r3, #12]
8000258c:	623b      	str	r3, [r7, #32]
          break;
8000258e:	e028      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
80002590:	683b      	ldr	r3, [r7, #0]
80002592:	68db      	ldr	r3, [r3, #12]
80002594:	3304      	adds	r3, #4
80002596:	623b      	str	r3, [r7, #32]
          break;
80002598:	e023      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
8000259a:	683b      	ldr	r3, [r7, #0]
8000259c:	68db      	ldr	r3, [r3, #12]
8000259e:	3308      	adds	r3, #8
800025a0:	623b      	str	r3, [r7, #32]
          break;
800025a2:	e01e      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
800025a4:	683b      	ldr	r3, [r7, #0]
800025a6:	68db      	ldr	r3, [r3, #12]
800025a8:	330c      	adds	r3, #12
800025aa:	623b      	str	r3, [r7, #32]
          break;
800025ac:	e019      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
800025ae:	683b      	ldr	r3, [r7, #0]
800025b0:	689b      	ldr	r3, [r3, #8]
800025b2:	2b00      	cmp	r3, #0
800025b4:	d102      	bne.n	800025bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
800025b6:	2304      	movs	r3, #4
800025b8:	623b      	str	r3, [r7, #32]
          break;
800025ba:	e012      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
800025bc:	683b      	ldr	r3, [r7, #0]
800025be:	689b      	ldr	r3, [r3, #8]
800025c0:	2b01      	cmp	r3, #1
800025c2:	d105      	bne.n	800025d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
800025c4:	2308      	movs	r3, #8
800025c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
800025c8:	687b      	ldr	r3, [r7, #4]
800025ca:	69fa      	ldr	r2, [r7, #28]
800025cc:	611a      	str	r2, [r3, #16]
          break;
800025ce:	e008      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
800025d0:	2308      	movs	r3, #8
800025d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
800025d4:	687b      	ldr	r3, [r7, #4]
800025d6:	69fa      	ldr	r2, [r7, #28]
800025d8:	615a      	str	r2, [r3, #20]
          break;
800025da:	e002      	b.n	800025e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
800025dc:	2300      	movs	r3, #0
800025de:	623b      	str	r3, [r7, #32]
          break;
800025e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
800025e2:	69bb      	ldr	r3, [r7, #24]
800025e4:	2bff      	cmp	r3, #255	; 0xff
800025e6:	d801      	bhi.n	800025ec <HAL_GPIO_Init+0xec>
800025e8:	687b      	ldr	r3, [r7, #4]
800025ea:	e001      	b.n	800025f0 <HAL_GPIO_Init+0xf0>
800025ec:	687b      	ldr	r3, [r7, #4]
800025ee:	3304      	adds	r3, #4
800025f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
800025f2:	69bb      	ldr	r3, [r7, #24]
800025f4:	2bff      	cmp	r3, #255	; 0xff
800025f6:	d802      	bhi.n	800025fe <HAL_GPIO_Init+0xfe>
800025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
800025fa:	009b      	lsls	r3, r3, #2
800025fc:	e002      	b.n	80002604 <HAL_GPIO_Init+0x104>
800025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
80002600:	3b08      	subs	r3, #8
80002602:	009b      	lsls	r3, r3, #2
80002604:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
80002606:	697b      	ldr	r3, [r7, #20]
80002608:	681a      	ldr	r2, [r3, #0]
8000260a:	210f      	movs	r1, #15
8000260c:	693b      	ldr	r3, [r7, #16]
8000260e:	fa01 f303 	lsl.w	r3, r1, r3
80002612:	43db      	mvns	r3, r3
80002614:	401a      	ands	r2, r3
80002616:	6a39      	ldr	r1, [r7, #32]
80002618:	693b      	ldr	r3, [r7, #16]
8000261a:	fa01 f303 	lsl.w	r3, r1, r3
8000261e:	431a      	orrs	r2, r3
80002620:	697b      	ldr	r3, [r7, #20]
80002622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
80002624:	683b      	ldr	r3, [r7, #0]
80002626:	685b      	ldr	r3, [r3, #4]
80002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
8000262c:	2b00      	cmp	r3, #0
8000262e:	f000 8096 	beq.w	8000275e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
80002632:	4b59      	ldr	r3, [pc, #356]	; (80002798 <HAL_GPIO_Init+0x298>)
80002634:	699b      	ldr	r3, [r3, #24]
80002636:	4a58      	ldr	r2, [pc, #352]	; (80002798 <HAL_GPIO_Init+0x298>)
80002638:	f043 0301 	orr.w	r3, r3, #1
8000263c:	6193      	str	r3, [r2, #24]
8000263e:	4b56      	ldr	r3, [pc, #344]	; (80002798 <HAL_GPIO_Init+0x298>)
80002640:	699b      	ldr	r3, [r3, #24]
80002642:	f003 0301 	and.w	r3, r3, #1
80002646:	60bb      	str	r3, [r7, #8]
80002648:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
8000264a:	4a54      	ldr	r2, [pc, #336]	; (8000279c <HAL_GPIO_Init+0x29c>)
8000264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
8000264e:	089b      	lsrs	r3, r3, #2
80002650:	3302      	adds	r3, #2
80002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
80002656:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
80002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
8000265a:	f003 0303 	and.w	r3, r3, #3
8000265e:	009b      	lsls	r3, r3, #2
80002660:	220f      	movs	r2, #15
80002662:	fa02 f303 	lsl.w	r3, r2, r3
80002666:	43db      	mvns	r3, r3
80002668:	68fa      	ldr	r2, [r7, #12]
8000266a:	4013      	ands	r3, r2
8000266c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
8000266e:	687b      	ldr	r3, [r7, #4]
80002670:	4a4b      	ldr	r2, [pc, #300]	; (800027a0 <HAL_GPIO_Init+0x2a0>)
80002672:	4293      	cmp	r3, r2
80002674:	d013      	beq.n	8000269e <HAL_GPIO_Init+0x19e>
80002676:	687b      	ldr	r3, [r7, #4]
80002678:	4a4a      	ldr	r2, [pc, #296]	; (800027a4 <HAL_GPIO_Init+0x2a4>)
8000267a:	4293      	cmp	r3, r2
8000267c:	d00d      	beq.n	8000269a <HAL_GPIO_Init+0x19a>
8000267e:	687b      	ldr	r3, [r7, #4]
80002680:	4a49      	ldr	r2, [pc, #292]	; (800027a8 <HAL_GPIO_Init+0x2a8>)
80002682:	4293      	cmp	r3, r2
80002684:	d007      	beq.n	80002696 <HAL_GPIO_Init+0x196>
80002686:	687b      	ldr	r3, [r7, #4]
80002688:	4a48      	ldr	r2, [pc, #288]	; (800027ac <HAL_GPIO_Init+0x2ac>)
8000268a:	4293      	cmp	r3, r2
8000268c:	d101      	bne.n	80002692 <HAL_GPIO_Init+0x192>
8000268e:	2303      	movs	r3, #3
80002690:	e006      	b.n	800026a0 <HAL_GPIO_Init+0x1a0>
80002692:	2304      	movs	r3, #4
80002694:	e004      	b.n	800026a0 <HAL_GPIO_Init+0x1a0>
80002696:	2302      	movs	r3, #2
80002698:	e002      	b.n	800026a0 <HAL_GPIO_Init+0x1a0>
8000269a:	2301      	movs	r3, #1
8000269c:	e000      	b.n	800026a0 <HAL_GPIO_Init+0x1a0>
8000269e:	2300      	movs	r3, #0
800026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
800026a2:	f002 0203 	and.w	r2, r2, #3
800026a6:	0092      	lsls	r2, r2, #2
800026a8:	4093      	lsls	r3, r2
800026aa:	68fa      	ldr	r2, [r7, #12]
800026ac:	4313      	orrs	r3, r2
800026ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
800026b0:	493a      	ldr	r1, [pc, #232]	; (8000279c <HAL_GPIO_Init+0x29c>)
800026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
800026b4:	089b      	lsrs	r3, r3, #2
800026b6:	3302      	adds	r3, #2
800026b8:	68fa      	ldr	r2, [r7, #12]
800026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
800026be:	683b      	ldr	r3, [r7, #0]
800026c0:	685b      	ldr	r3, [r3, #4]
800026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
800026c6:	2b00      	cmp	r3, #0
800026c8:	d006      	beq.n	800026d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
800026ca:	4b39      	ldr	r3, [pc, #228]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
800026cc:	681a      	ldr	r2, [r3, #0]
800026ce:	4938      	ldr	r1, [pc, #224]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
800026d0:	69bb      	ldr	r3, [r7, #24]
800026d2:	4313      	orrs	r3, r2
800026d4:	600b      	str	r3, [r1, #0]
800026d6:	e006      	b.n	800026e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
800026d8:	4b35      	ldr	r3, [pc, #212]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
800026da:	681a      	ldr	r2, [r3, #0]
800026dc:	69bb      	ldr	r3, [r7, #24]
800026de:	43db      	mvns	r3, r3
800026e0:	4933      	ldr	r1, [pc, #204]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
800026e2:	4013      	ands	r3, r2
800026e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
800026e6:	683b      	ldr	r3, [r7, #0]
800026e8:	685b      	ldr	r3, [r3, #4]
800026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
800026ee:	2b00      	cmp	r3, #0
800026f0:	d006      	beq.n	80002700 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
800026f2:	4b2f      	ldr	r3, [pc, #188]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
800026f4:	685a      	ldr	r2, [r3, #4]
800026f6:	492e      	ldr	r1, [pc, #184]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
800026f8:	69bb      	ldr	r3, [r7, #24]
800026fa:	4313      	orrs	r3, r2
800026fc:	604b      	str	r3, [r1, #4]
800026fe:	e006      	b.n	8000270e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
80002700:	4b2b      	ldr	r3, [pc, #172]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
80002702:	685a      	ldr	r2, [r3, #4]
80002704:	69bb      	ldr	r3, [r7, #24]
80002706:	43db      	mvns	r3, r3
80002708:	4929      	ldr	r1, [pc, #164]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
8000270a:	4013      	ands	r3, r2
8000270c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
8000270e:	683b      	ldr	r3, [r7, #0]
80002710:	685b      	ldr	r3, [r3, #4]
80002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
80002716:	2b00      	cmp	r3, #0
80002718:	d006      	beq.n	80002728 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
8000271a:	4b25      	ldr	r3, [pc, #148]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
8000271c:	689a      	ldr	r2, [r3, #8]
8000271e:	4924      	ldr	r1, [pc, #144]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
80002720:	69bb      	ldr	r3, [r7, #24]
80002722:	4313      	orrs	r3, r2
80002724:	608b      	str	r3, [r1, #8]
80002726:	e006      	b.n	80002736 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
80002728:	4b21      	ldr	r3, [pc, #132]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
8000272a:	689a      	ldr	r2, [r3, #8]
8000272c:	69bb      	ldr	r3, [r7, #24]
8000272e:	43db      	mvns	r3, r3
80002730:	491f      	ldr	r1, [pc, #124]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
80002732:	4013      	ands	r3, r2
80002734:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
80002736:	683b      	ldr	r3, [r7, #0]
80002738:	685b      	ldr	r3, [r3, #4]
8000273a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
8000273e:	2b00      	cmp	r3, #0
80002740:	d006      	beq.n	80002750 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
80002742:	4b1b      	ldr	r3, [pc, #108]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
80002744:	68da      	ldr	r2, [r3, #12]
80002746:	491a      	ldr	r1, [pc, #104]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
80002748:	69bb      	ldr	r3, [r7, #24]
8000274a:	4313      	orrs	r3, r2
8000274c:	60cb      	str	r3, [r1, #12]
8000274e:	e006      	b.n	8000275e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
80002750:	4b17      	ldr	r3, [pc, #92]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
80002752:	68da      	ldr	r2, [r3, #12]
80002754:	69bb      	ldr	r3, [r7, #24]
80002756:	43db      	mvns	r3, r3
80002758:	4915      	ldr	r1, [pc, #84]	; (800027b0 <HAL_GPIO_Init+0x2b0>)
8000275a:	4013      	ands	r3, r2
8000275c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
8000275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
80002760:	3301      	adds	r3, #1
80002762:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
80002764:	683b      	ldr	r3, [r7, #0]
80002766:	681a      	ldr	r2, [r3, #0]
80002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
8000276a:	fa22 f303 	lsr.w	r3, r2, r3
8000276e:	2b00      	cmp	r3, #0
80002770:	f47f aed0 	bne.w	80002514 <HAL_GPIO_Init+0x14>
  }
}
80002774:	bf00      	nop
80002776:	372c      	adds	r7, #44	; 0x2c
80002778:	46bd      	mov	sp, r7
8000277a:	bc80      	pop	{r7}
8000277c:	4770      	bx	lr
8000277e:	bf00      	nop
80002780:	10210000 	.word	0x10210000
80002784:	10110000 	.word	0x10110000
80002788:	10120000 	.word	0x10120000
8000278c:	10310000 	.word	0x10310000
80002790:	10320000 	.word	0x10320000
80002794:	10220000 	.word	0x10220000
80002798:	40021000 	.word	0x40021000
8000279c:	40010000 	.word	0x40010000
800027a0:	40010800 	.word	0x40010800
800027a4:	40010c00 	.word	0x40010c00
800027a8:	40011000 	.word	0x40011000
800027ac:	40011400 	.word	0x40011400
800027b0:	40010400 	.word	0x40010400

800027b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
800027b4:	b480      	push	{r7}
800027b6:	b083      	sub	sp, #12
800027b8:	af00      	add	r7, sp, #0
800027ba:	6078      	str	r0, [r7, #4]
800027bc:	460b      	mov	r3, r1
800027be:	807b      	strh	r3, [r7, #2]
800027c0:	4613      	mov	r3, r2
800027c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
800027c4:	787b      	ldrb	r3, [r7, #1]
800027c6:	2b00      	cmp	r3, #0
800027c8:	d003      	beq.n	800027d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
800027ca:	887a      	ldrh	r2, [r7, #2]
800027cc:	687b      	ldr	r3, [r7, #4]
800027ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
800027d0:	e003      	b.n	800027da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
800027d2:	887b      	ldrh	r3, [r7, #2]
800027d4:	041a      	lsls	r2, r3, #16
800027d6:	687b      	ldr	r3, [r7, #4]
800027d8:	611a      	str	r2, [r3, #16]
}
800027da:	bf00      	nop
800027dc:	370c      	adds	r7, #12
800027de:	46bd      	mov	sp, r7
800027e0:	bc80      	pop	{r7}
800027e2:	4770      	bx	lr

800027e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
800027e4:	b480      	push	{r7}
800027e6:	b083      	sub	sp, #12
800027e8:	af00      	add	r7, sp, #0
800027ea:	6078      	str	r0, [r7, #4]
800027ec:	460b      	mov	r3, r1
800027ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
800027f0:	687b      	ldr	r3, [r7, #4]
800027f2:	68da      	ldr	r2, [r3, #12]
800027f4:	887b      	ldrh	r3, [r7, #2]
800027f6:	4013      	ands	r3, r2
800027f8:	2b00      	cmp	r3, #0
800027fa:	d003      	beq.n	80002804 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
800027fc:	887a      	ldrh	r2, [r7, #2]
800027fe:	687b      	ldr	r3, [r7, #4]
80002800:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
80002802:	e002      	b.n	8000280a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
80002804:	887a      	ldrh	r2, [r7, #2]
80002806:	687b      	ldr	r3, [r7, #4]
80002808:	611a      	str	r2, [r3, #16]
}
8000280a:	bf00      	nop
8000280c:	370c      	adds	r7, #12
8000280e:	46bd      	mov	sp, r7
80002810:	bc80      	pop	{r7}
80002812:	4770      	bx	lr

80002814 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
80002814:	b5f0      	push	{r4, r5, r6, r7, lr}
80002816:	b08b      	sub	sp, #44	; 0x2c
80002818:	af06      	add	r7, sp, #24
8000281a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
8000281c:	687b      	ldr	r3, [r7, #4]
8000281e:	2b00      	cmp	r3, #0
80002820:	d101      	bne.n	80002826 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
80002822:	2301      	movs	r3, #1
80002824:	e0d3      	b.n	800029ce <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
80002826:	687b      	ldr	r3, [r7, #4]
80002828:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
8000282c:	b2db      	uxtb	r3, r3
8000282e:	2b00      	cmp	r3, #0
80002830:	d106      	bne.n	80002840 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
80002832:	687b      	ldr	r3, [r7, #4]
80002834:	2200      	movs	r2, #0
80002836:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
8000283a:	6878      	ldr	r0, [r7, #4]
8000283c:	f004 fdde 	bl	800073fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
80002840:	687b      	ldr	r3, [r7, #4]
80002842:	2203      	movs	r2, #3
80002844:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
80002848:	687b      	ldr	r3, [r7, #4]
8000284a:	681b      	ldr	r3, [r3, #0]
8000284c:	4618      	mov	r0, r3
8000284e:	f001 ff12 	bl	80004676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
80002852:	687b      	ldr	r3, [r7, #4]
80002854:	681b      	ldr	r3, [r3, #0]
80002856:	603b      	str	r3, [r7, #0]
80002858:	687e      	ldr	r6, [r7, #4]
8000285a:	466d      	mov	r5, sp
8000285c:	f106 0410 	add.w	r4, r6, #16
80002860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
80002862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
80002864:	6823      	ldr	r3, [r4, #0]
80002866:	602b      	str	r3, [r5, #0]
80002868:	1d33      	adds	r3, r6, #4
8000286a:	cb0e      	ldmia	r3, {r1, r2, r3}
8000286c:	6838      	ldr	r0, [r7, #0]
8000286e:	f001 fedb 	bl	80004628 <USB_CoreInit>
80002872:	4603      	mov	r3, r0
80002874:	2b00      	cmp	r3, #0
80002876:	d005      	beq.n	80002884 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
80002878:	687b      	ldr	r3, [r7, #4]
8000287a:	2202      	movs	r2, #2
8000287c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
80002880:	2301      	movs	r3, #1
80002882:	e0a4      	b.n	800029ce <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
80002884:	687b      	ldr	r3, [r7, #4]
80002886:	681b      	ldr	r3, [r3, #0]
80002888:	2100      	movs	r1, #0
8000288a:	4618      	mov	r0, r3
8000288c:	f001 ff0f 	bl	800046ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
80002890:	2300      	movs	r3, #0
80002892:	73fb      	strb	r3, [r7, #15]
80002894:	e035      	b.n	80002902 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
80002896:	7bfb      	ldrb	r3, [r7, #15]
80002898:	687a      	ldr	r2, [r7, #4]
8000289a:	015b      	lsls	r3, r3, #5
8000289c:	4413      	add	r3, r2
8000289e:	3329      	adds	r3, #41	; 0x29
800028a0:	2201      	movs	r2, #1
800028a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
800028a4:	7bfb      	ldrb	r3, [r7, #15]
800028a6:	687a      	ldr	r2, [r7, #4]
800028a8:	015b      	lsls	r3, r3, #5
800028aa:	4413      	add	r3, r2
800028ac:	3328      	adds	r3, #40	; 0x28
800028ae:	7bfa      	ldrb	r2, [r7, #15]
800028b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
800028b2:	7bfb      	ldrb	r3, [r7, #15]
800028b4:	7bfa      	ldrb	r2, [r7, #15]
800028b6:	b291      	uxth	r1, r2
800028b8:	687a      	ldr	r2, [r7, #4]
800028ba:	015b      	lsls	r3, r3, #5
800028bc:	4413      	add	r3, r2
800028be:	3336      	adds	r3, #54	; 0x36
800028c0:	460a      	mov	r2, r1
800028c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
800028c4:	7bfb      	ldrb	r3, [r7, #15]
800028c6:	687a      	ldr	r2, [r7, #4]
800028c8:	015b      	lsls	r3, r3, #5
800028ca:	4413      	add	r3, r2
800028cc:	332b      	adds	r3, #43	; 0x2b
800028ce:	2200      	movs	r2, #0
800028d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
800028d2:	7bfb      	ldrb	r3, [r7, #15]
800028d4:	687a      	ldr	r2, [r7, #4]
800028d6:	015b      	lsls	r3, r3, #5
800028d8:	4413      	add	r3, r2
800028da:	3338      	adds	r3, #56	; 0x38
800028dc:	2200      	movs	r2, #0
800028de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
800028e0:	7bfb      	ldrb	r3, [r7, #15]
800028e2:	687a      	ldr	r2, [r7, #4]
800028e4:	015b      	lsls	r3, r3, #5
800028e6:	4413      	add	r3, r2
800028e8:	333c      	adds	r3, #60	; 0x3c
800028ea:	2200      	movs	r2, #0
800028ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
800028ee:	7bfb      	ldrb	r3, [r7, #15]
800028f0:	687a      	ldr	r2, [r7, #4]
800028f2:	3302      	adds	r3, #2
800028f4:	015b      	lsls	r3, r3, #5
800028f6:	4413      	add	r3, r2
800028f8:	2200      	movs	r2, #0
800028fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
800028fc:	7bfb      	ldrb	r3, [r7, #15]
800028fe:	3301      	adds	r3, #1
80002900:	73fb      	strb	r3, [r7, #15]
80002902:	7bfa      	ldrb	r2, [r7, #15]
80002904:	687b      	ldr	r3, [r7, #4]
80002906:	685b      	ldr	r3, [r3, #4]
80002908:	429a      	cmp	r2, r3
8000290a:	d3c4      	bcc.n	80002896 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
8000290c:	2300      	movs	r3, #0
8000290e:	73fb      	strb	r3, [r7, #15]
80002910:	e031      	b.n	80002976 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
80002912:	7bfb      	ldrb	r3, [r7, #15]
80002914:	687a      	ldr	r2, [r7, #4]
80002916:	015b      	lsls	r3, r3, #5
80002918:	4413      	add	r3, r2
8000291a:	f203 1329 	addw	r3, r3, #297	; 0x129
8000291e:	2200      	movs	r2, #0
80002920:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
80002922:	7bfb      	ldrb	r3, [r7, #15]
80002924:	687a      	ldr	r2, [r7, #4]
80002926:	015b      	lsls	r3, r3, #5
80002928:	4413      	add	r3, r2
8000292a:	f503 7394 	add.w	r3, r3, #296	; 0x128
8000292e:	7bfa      	ldrb	r2, [r7, #15]
80002930:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
80002932:	7bfb      	ldrb	r3, [r7, #15]
80002934:	687a      	ldr	r2, [r7, #4]
80002936:	015b      	lsls	r3, r3, #5
80002938:	4413      	add	r3, r2
8000293a:	f203 132b 	addw	r3, r3, #299	; 0x12b
8000293e:	2200      	movs	r2, #0
80002940:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
80002942:	7bfb      	ldrb	r3, [r7, #15]
80002944:	687a      	ldr	r2, [r7, #4]
80002946:	015b      	lsls	r3, r3, #5
80002948:	4413      	add	r3, r2
8000294a:	f503 739c 	add.w	r3, r3, #312	; 0x138
8000294e:	2200      	movs	r2, #0
80002950:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
80002952:	7bfb      	ldrb	r3, [r7, #15]
80002954:	687a      	ldr	r2, [r7, #4]
80002956:	015b      	lsls	r3, r3, #5
80002958:	4413      	add	r3, r2
8000295a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
8000295e:	2200      	movs	r2, #0
80002960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
80002962:	7bfb      	ldrb	r3, [r7, #15]
80002964:	687a      	ldr	r2, [r7, #4]
80002966:	330a      	adds	r3, #10
80002968:	015b      	lsls	r3, r3, #5
8000296a:	4413      	add	r3, r2
8000296c:	2200      	movs	r2, #0
8000296e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
80002970:	7bfb      	ldrb	r3, [r7, #15]
80002972:	3301      	adds	r3, #1
80002974:	73fb      	strb	r3, [r7, #15]
80002976:	7bfa      	ldrb	r2, [r7, #15]
80002978:	687b      	ldr	r3, [r7, #4]
8000297a:	685b      	ldr	r3, [r3, #4]
8000297c:	429a      	cmp	r2, r3
8000297e:	d3c8      	bcc.n	80002912 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
80002980:	687b      	ldr	r3, [r7, #4]
80002982:	681b      	ldr	r3, [r3, #0]
80002984:	603b      	str	r3, [r7, #0]
80002986:	687e      	ldr	r6, [r7, #4]
80002988:	466d      	mov	r5, sp
8000298a:	f106 0410 	add.w	r4, r6, #16
8000298e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
80002990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
80002992:	6823      	ldr	r3, [r4, #0]
80002994:	602b      	str	r3, [r5, #0]
80002996:	1d33      	adds	r3, r6, #4
80002998:	cb0e      	ldmia	r3, {r1, r2, r3}
8000299a:	6838      	ldr	r0, [r7, #0]
8000299c:	f001 fe93 	bl	800046c6 <USB_DevInit>
800029a0:	4603      	mov	r3, r0
800029a2:	2b00      	cmp	r3, #0
800029a4:	d005      	beq.n	800029b2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
800029a6:	687b      	ldr	r3, [r7, #4]
800029a8:	2202      	movs	r2, #2
800029aa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
800029ae:	2301      	movs	r3, #1
800029b0:	e00d      	b.n	800029ce <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
800029b2:	687b      	ldr	r3, [r7, #4]
800029b4:	2200      	movs	r2, #0
800029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
800029ba:	687b      	ldr	r3, [r7, #4]
800029bc:	2201      	movs	r2, #1
800029be:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
800029c2:	687b      	ldr	r3, [r7, #4]
800029c4:	681b      	ldr	r3, [r3, #0]
800029c6:	4618      	mov	r0, r3
800029c8:	f002 fed1 	bl	8000576e <USB_DevDisconnect>

  return HAL_OK;
800029cc:	2300      	movs	r3, #0
}
800029ce:	4618      	mov	r0, r3
800029d0:	3714      	adds	r7, #20
800029d2:	46bd      	mov	sp, r7
800029d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

800029d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
800029d6:	b580      	push	{r7, lr}
800029d8:	b082      	sub	sp, #8
800029da:	af00      	add	r7, sp, #0
800029dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
800029de:	687b      	ldr	r3, [r7, #4]
800029e0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
800029e4:	2b01      	cmp	r3, #1
800029e6:	d101      	bne.n	800029ec <HAL_PCD_Start+0x16>
800029e8:	2302      	movs	r3, #2
800029ea:	e016      	b.n	80002a1a <HAL_PCD_Start+0x44>
800029ec:	687b      	ldr	r3, [r7, #4]
800029ee:	2201      	movs	r2, #1
800029f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
800029f4:	2101      	movs	r1, #1
800029f6:	6878      	ldr	r0, [r7, #4]
800029f8:	f004 ff67 	bl	800078ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
800029fc:	687b      	ldr	r3, [r7, #4]
800029fe:	681b      	ldr	r3, [r3, #0]
80002a00:	4618      	mov	r0, r3
80002a02:	f002 feaa 	bl	8000575a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
80002a06:	687b      	ldr	r3, [r7, #4]
80002a08:	681b      	ldr	r3, [r3, #0]
80002a0a:	4618      	mov	r0, r3
80002a0c:	f001 fe1c 	bl	80004648 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
80002a10:	687b      	ldr	r3, [r7, #4]
80002a12:	2200      	movs	r2, #0
80002a14:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
80002a18:	2300      	movs	r3, #0
}
80002a1a:	4618      	mov	r0, r3
80002a1c:	3708      	adds	r7, #8
80002a1e:	46bd      	mov	sp, r7
80002a20:	bd80      	pop	{r7, pc}

80002a22 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
80002a22:	b580      	push	{r7, lr}
80002a24:	b082      	sub	sp, #8
80002a26:	af00      	add	r7, sp, #0
80002a28:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
80002a2a:	687b      	ldr	r3, [r7, #4]
80002a2c:	681b      	ldr	r3, [r3, #0]
80002a2e:	4618      	mov	r0, r3
80002a30:	f002 fea7 	bl	80005782 <USB_ReadInterrupts>
80002a34:	4603      	mov	r3, r0
80002a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
80002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
80002a3e:	d102      	bne.n	80002a46 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
80002a40:	6878      	ldr	r0, [r7, #4]
80002a42:	f000 faf3 	bl	8000302c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
80002a46:	687b      	ldr	r3, [r7, #4]
80002a48:	681b      	ldr	r3, [r3, #0]
80002a4a:	4618      	mov	r0, r3
80002a4c:	f002 fe99 	bl	80005782 <USB_ReadInterrupts>
80002a50:	4603      	mov	r3, r0
80002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
80002a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
80002a5a:	d112      	bne.n	80002a82 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
80002a5c:	687b      	ldr	r3, [r7, #4]
80002a5e:	681b      	ldr	r3, [r3, #0]
80002a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80002a64:	b29a      	uxth	r2, r3
80002a66:	687b      	ldr	r3, [r7, #4]
80002a68:	681b      	ldr	r3, [r3, #0]
80002a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
80002a6e:	b292      	uxth	r2, r2
80002a70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
80002a74:	6878      	ldr	r0, [r7, #4]
80002a76:	f004 fd36 	bl	800074e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
80002a7a:	2100      	movs	r1, #0
80002a7c:	6878      	ldr	r0, [r7, #4]
80002a7e:	f000 f8de 	bl	80002c3e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
80002a82:	687b      	ldr	r3, [r7, #4]
80002a84:	681b      	ldr	r3, [r3, #0]
80002a86:	4618      	mov	r0, r3
80002a88:	f002 fe7b 	bl	80005782 <USB_ReadInterrupts>
80002a8c:	4603      	mov	r3, r0
80002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80002a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
80002a96:	d10b      	bne.n	80002ab0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
80002a98:	687b      	ldr	r3, [r7, #4]
80002a9a:	681b      	ldr	r3, [r3, #0]
80002a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80002aa0:	b29a      	uxth	r2, r3
80002aa2:	687b      	ldr	r3, [r7, #4]
80002aa4:	681b      	ldr	r3, [r3, #0]
80002aa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
80002aaa:	b292      	uxth	r2, r2
80002aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
80002ab0:	687b      	ldr	r3, [r7, #4]
80002ab2:	681b      	ldr	r3, [r3, #0]
80002ab4:	4618      	mov	r0, r3
80002ab6:	f002 fe64 	bl	80005782 <USB_ReadInterrupts>
80002aba:	4603      	mov	r3, r0
80002abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
80002ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
80002ac4:	d10b      	bne.n	80002ade <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
80002ac6:	687b      	ldr	r3, [r7, #4]
80002ac8:	681b      	ldr	r3, [r3, #0]
80002aca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80002ace:	b29a      	uxth	r2, r3
80002ad0:	687b      	ldr	r3, [r7, #4]
80002ad2:	681b      	ldr	r3, [r3, #0]
80002ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
80002ad8:	b292      	uxth	r2, r2
80002ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
80002ade:	687b      	ldr	r3, [r7, #4]
80002ae0:	681b      	ldr	r3, [r3, #0]
80002ae2:	4618      	mov	r0, r3
80002ae4:	f002 fe4d 	bl	80005782 <USB_ReadInterrupts>
80002ae8:	4603      	mov	r3, r0
80002aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
80002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
80002af2:	d126      	bne.n	80002b42 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
80002af4:	687b      	ldr	r3, [r7, #4]
80002af6:	681b      	ldr	r3, [r3, #0]
80002af8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
80002afc:	b29a      	uxth	r2, r3
80002afe:	687b      	ldr	r3, [r7, #4]
80002b00:	681b      	ldr	r3, [r3, #0]
80002b02:	f022 0204 	bic.w	r2, r2, #4
80002b06:	b292      	uxth	r2, r2
80002b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
80002b0c:	687b      	ldr	r3, [r7, #4]
80002b0e:	681b      	ldr	r3, [r3, #0]
80002b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
80002b14:	b29a      	uxth	r2, r3
80002b16:	687b      	ldr	r3, [r7, #4]
80002b18:	681b      	ldr	r3, [r3, #0]
80002b1a:	f022 0208 	bic.w	r2, r2, #8
80002b1e:	b292      	uxth	r2, r2
80002b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
80002b24:	6878      	ldr	r0, [r7, #4]
80002b26:	f004 fd17 	bl	80007558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
80002b2a:	687b      	ldr	r3, [r7, #4]
80002b2c:	681b      	ldr	r3, [r3, #0]
80002b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80002b32:	b29a      	uxth	r2, r3
80002b34:	687b      	ldr	r3, [r7, #4]
80002b36:	681b      	ldr	r3, [r3, #0]
80002b38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
80002b3c:	b292      	uxth	r2, r2
80002b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
80002b42:	687b      	ldr	r3, [r7, #4]
80002b44:	681b      	ldr	r3, [r3, #0]
80002b46:	4618      	mov	r0, r3
80002b48:	f002 fe1b 	bl	80005782 <USB_ReadInterrupts>
80002b4c:	4603      	mov	r3, r0
80002b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
80002b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
80002b56:	d13d      	bne.n	80002bd4 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
80002b58:	687b      	ldr	r3, [r7, #4]
80002b5a:	681b      	ldr	r3, [r3, #0]
80002b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
80002b60:	b29a      	uxth	r2, r3
80002b62:	687b      	ldr	r3, [r7, #4]
80002b64:	681b      	ldr	r3, [r3, #0]
80002b66:	f042 0208 	orr.w	r2, r2, #8
80002b6a:	b292      	uxth	r2, r2
80002b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
80002b70:	687b      	ldr	r3, [r7, #4]
80002b72:	681b      	ldr	r3, [r3, #0]
80002b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80002b78:	b29a      	uxth	r2, r3
80002b7a:	687b      	ldr	r3, [r7, #4]
80002b7c:	681b      	ldr	r3, [r3, #0]
80002b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
80002b82:	b292      	uxth	r2, r2
80002b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
80002b88:	687b      	ldr	r3, [r7, #4]
80002b8a:	681b      	ldr	r3, [r3, #0]
80002b8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
80002b90:	b29a      	uxth	r2, r3
80002b92:	687b      	ldr	r3, [r7, #4]
80002b94:	681b      	ldr	r3, [r3, #0]
80002b96:	f042 0204 	orr.w	r2, r2, #4
80002b9a:	b292      	uxth	r2, r2
80002b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
80002ba0:	687b      	ldr	r3, [r7, #4]
80002ba2:	681b      	ldr	r3, [r3, #0]
80002ba4:	4618      	mov	r0, r3
80002ba6:	f002 fdec 	bl	80005782 <USB_ReadInterrupts>
80002baa:	4603      	mov	r3, r0
80002bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
80002bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
80002bb4:	d10b      	bne.n	80002bce <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
80002bb6:	687b      	ldr	r3, [r7, #4]
80002bb8:	681b      	ldr	r3, [r3, #0]
80002bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80002bbe:	b29a      	uxth	r2, r3
80002bc0:	687b      	ldr	r3, [r7, #4]
80002bc2:	681b      	ldr	r3, [r3, #0]
80002bc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
80002bc8:	b292      	uxth	r2, r2
80002bca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
80002bce:	6878      	ldr	r0, [r7, #4]
80002bd0:	f004 fca8 	bl	80007524 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
80002bd4:	687b      	ldr	r3, [r7, #4]
80002bd6:	681b      	ldr	r3, [r3, #0]
80002bd8:	4618      	mov	r0, r3
80002bda:	f002 fdd2 	bl	80005782 <USB_ReadInterrupts>
80002bde:	4603      	mov	r3, r0
80002be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
80002be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
80002be8:	d10e      	bne.n	80002c08 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
80002bea:	687b      	ldr	r3, [r7, #4]
80002bec:	681b      	ldr	r3, [r3, #0]
80002bee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80002bf2:	b29a      	uxth	r2, r3
80002bf4:	687b      	ldr	r3, [r7, #4]
80002bf6:	681b      	ldr	r3, [r3, #0]
80002bf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
80002bfc:	b292      	uxth	r2, r2
80002bfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
80002c02:	6878      	ldr	r0, [r7, #4]
80002c04:	f004 fc61 	bl	800074ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
80002c08:	687b      	ldr	r3, [r7, #4]
80002c0a:	681b      	ldr	r3, [r3, #0]
80002c0c:	4618      	mov	r0, r3
80002c0e:	f002 fdb8 	bl	80005782 <USB_ReadInterrupts>
80002c12:	4603      	mov	r3, r0
80002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
80002c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
80002c1c:	d10b      	bne.n	80002c36 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
80002c1e:	687b      	ldr	r3, [r7, #4]
80002c20:	681b      	ldr	r3, [r3, #0]
80002c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80002c26:	b29a      	uxth	r2, r3
80002c28:	687b      	ldr	r3, [r7, #4]
80002c2a:	681b      	ldr	r3, [r3, #0]
80002c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
80002c30:	b292      	uxth	r2, r2
80002c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
80002c36:	bf00      	nop
80002c38:	3708      	adds	r7, #8
80002c3a:	46bd      	mov	sp, r7
80002c3c:	bd80      	pop	{r7, pc}

80002c3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
80002c3e:	b580      	push	{r7, lr}
80002c40:	b082      	sub	sp, #8
80002c42:	af00      	add	r7, sp, #0
80002c44:	6078      	str	r0, [r7, #4]
80002c46:	460b      	mov	r3, r1
80002c48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
80002c4a:	687b      	ldr	r3, [r7, #4]
80002c4c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
80002c50:	2b01      	cmp	r3, #1
80002c52:	d101      	bne.n	80002c58 <HAL_PCD_SetAddress+0x1a>
80002c54:	2302      	movs	r3, #2
80002c56:	e013      	b.n	80002c80 <HAL_PCD_SetAddress+0x42>
80002c58:	687b      	ldr	r3, [r7, #4]
80002c5a:	2201      	movs	r2, #1
80002c5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
80002c60:	687b      	ldr	r3, [r7, #4]
80002c62:	78fa      	ldrb	r2, [r7, #3]
80002c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
80002c68:	687b      	ldr	r3, [r7, #4]
80002c6a:	681b      	ldr	r3, [r3, #0]
80002c6c:	78fa      	ldrb	r2, [r7, #3]
80002c6e:	4611      	mov	r1, r2
80002c70:	4618      	mov	r0, r3
80002c72:	f002 fd5f 	bl	80005734 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
80002c76:	687b      	ldr	r3, [r7, #4]
80002c78:	2200      	movs	r2, #0
80002c7a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
80002c7e:	2300      	movs	r3, #0
}
80002c80:	4618      	mov	r0, r3
80002c82:	3708      	adds	r7, #8
80002c84:	46bd      	mov	sp, r7
80002c86:	bd80      	pop	{r7, pc}

80002c88 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
80002c88:	b580      	push	{r7, lr}
80002c8a:	b084      	sub	sp, #16
80002c8c:	af00      	add	r7, sp, #0
80002c8e:	6078      	str	r0, [r7, #4]
80002c90:	4608      	mov	r0, r1
80002c92:	4611      	mov	r1, r2
80002c94:	461a      	mov	r2, r3
80002c96:	4603      	mov	r3, r0
80002c98:	70fb      	strb	r3, [r7, #3]
80002c9a:	460b      	mov	r3, r1
80002c9c:	803b      	strh	r3, [r7, #0]
80002c9e:	4613      	mov	r3, r2
80002ca0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
80002ca2:	2300      	movs	r3, #0
80002ca4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
80002ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
80002caa:	2b00      	cmp	r3, #0
80002cac:	da0b      	bge.n	80002cc6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
80002cae:	78fb      	ldrb	r3, [r7, #3]
80002cb0:	f003 0307 	and.w	r3, r3, #7
80002cb4:	015b      	lsls	r3, r3, #5
80002cb6:	3328      	adds	r3, #40	; 0x28
80002cb8:	687a      	ldr	r2, [r7, #4]
80002cba:	4413      	add	r3, r2
80002cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
80002cbe:	68fb      	ldr	r3, [r7, #12]
80002cc0:	2201      	movs	r2, #1
80002cc2:	705a      	strb	r2, [r3, #1]
80002cc4:	e00b      	b.n	80002cde <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
80002cc6:	78fb      	ldrb	r3, [r7, #3]
80002cc8:	f003 0307 	and.w	r3, r3, #7
80002ccc:	015b      	lsls	r3, r3, #5
80002cce:	f503 7394 	add.w	r3, r3, #296	; 0x128
80002cd2:	687a      	ldr	r2, [r7, #4]
80002cd4:	4413      	add	r3, r2
80002cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
80002cd8:	68fb      	ldr	r3, [r7, #12]
80002cda:	2200      	movs	r2, #0
80002cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
80002cde:	78fb      	ldrb	r3, [r7, #3]
80002ce0:	f003 0307 	and.w	r3, r3, #7
80002ce4:	b2da      	uxtb	r2, r3
80002ce6:	68fb      	ldr	r3, [r7, #12]
80002ce8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
80002cea:	883a      	ldrh	r2, [r7, #0]
80002cec:	68fb      	ldr	r3, [r7, #12]
80002cee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
80002cf0:	68fb      	ldr	r3, [r7, #12]
80002cf2:	78ba      	ldrb	r2, [r7, #2]
80002cf4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
80002cf6:	68fb      	ldr	r3, [r7, #12]
80002cf8:	785b      	ldrb	r3, [r3, #1]
80002cfa:	2b00      	cmp	r3, #0
80002cfc:	d004      	beq.n	80002d08 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
80002cfe:	68fb      	ldr	r3, [r7, #12]
80002d00:	781b      	ldrb	r3, [r3, #0]
80002d02:	b29a      	uxth	r2, r3
80002d04:	68fb      	ldr	r3, [r7, #12]
80002d06:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
80002d08:	78bb      	ldrb	r3, [r7, #2]
80002d0a:	2b02      	cmp	r3, #2
80002d0c:	d102      	bne.n	80002d14 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
80002d0e:	68fb      	ldr	r3, [r7, #12]
80002d10:	2200      	movs	r2, #0
80002d12:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
80002d14:	687b      	ldr	r3, [r7, #4]
80002d16:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
80002d1a:	2b01      	cmp	r3, #1
80002d1c:	d101      	bne.n	80002d22 <HAL_PCD_EP_Open+0x9a>
80002d1e:	2302      	movs	r3, #2
80002d20:	e00e      	b.n	80002d40 <HAL_PCD_EP_Open+0xb8>
80002d22:	687b      	ldr	r3, [r7, #4]
80002d24:	2201      	movs	r2, #1
80002d26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
80002d2a:	687b      	ldr	r3, [r7, #4]
80002d2c:	681b      	ldr	r3, [r3, #0]
80002d2e:	68f9      	ldr	r1, [r7, #12]
80002d30:	4618      	mov	r0, r3
80002d32:	f001 fced 	bl	80004710 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
80002d36:	687b      	ldr	r3, [r7, #4]
80002d38:	2200      	movs	r2, #0
80002d3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
80002d3e:	7afb      	ldrb	r3, [r7, #11]
}
80002d40:	4618      	mov	r0, r3
80002d42:	3710      	adds	r7, #16
80002d44:	46bd      	mov	sp, r7
80002d46:	bd80      	pop	{r7, pc}

80002d48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
80002d48:	b580      	push	{r7, lr}
80002d4a:	b084      	sub	sp, #16
80002d4c:	af00      	add	r7, sp, #0
80002d4e:	6078      	str	r0, [r7, #4]
80002d50:	460b      	mov	r3, r1
80002d52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
80002d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
80002d58:	2b00      	cmp	r3, #0
80002d5a:	da0b      	bge.n	80002d74 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
80002d5c:	78fb      	ldrb	r3, [r7, #3]
80002d5e:	f003 0307 	and.w	r3, r3, #7
80002d62:	015b      	lsls	r3, r3, #5
80002d64:	3328      	adds	r3, #40	; 0x28
80002d66:	687a      	ldr	r2, [r7, #4]
80002d68:	4413      	add	r3, r2
80002d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
80002d6c:	68fb      	ldr	r3, [r7, #12]
80002d6e:	2201      	movs	r2, #1
80002d70:	705a      	strb	r2, [r3, #1]
80002d72:	e00b      	b.n	80002d8c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
80002d74:	78fb      	ldrb	r3, [r7, #3]
80002d76:	f003 0307 	and.w	r3, r3, #7
80002d7a:	015b      	lsls	r3, r3, #5
80002d7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
80002d80:	687a      	ldr	r2, [r7, #4]
80002d82:	4413      	add	r3, r2
80002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
80002d86:	68fb      	ldr	r3, [r7, #12]
80002d88:	2200      	movs	r2, #0
80002d8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
80002d8c:	78fb      	ldrb	r3, [r7, #3]
80002d8e:	f003 0307 	and.w	r3, r3, #7
80002d92:	b2da      	uxtb	r2, r3
80002d94:	68fb      	ldr	r3, [r7, #12]
80002d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
80002d98:	687b      	ldr	r3, [r7, #4]
80002d9a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
80002d9e:	2b01      	cmp	r3, #1
80002da0:	d101      	bne.n	80002da6 <HAL_PCD_EP_Close+0x5e>
80002da2:	2302      	movs	r3, #2
80002da4:	e00e      	b.n	80002dc4 <HAL_PCD_EP_Close+0x7c>
80002da6:	687b      	ldr	r3, [r7, #4]
80002da8:	2201      	movs	r2, #1
80002daa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
80002dae:	687b      	ldr	r3, [r7, #4]
80002db0:	681b      	ldr	r3, [r3, #0]
80002db2:	68f9      	ldr	r1, [r7, #12]
80002db4:	4618      	mov	r0, r3
80002db6:	f001 ff99 	bl	80004cec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
80002dba:	687b      	ldr	r3, [r7, #4]
80002dbc:	2200      	movs	r2, #0
80002dbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
80002dc2:	2300      	movs	r3, #0
}
80002dc4:	4618      	mov	r0, r3
80002dc6:	3710      	adds	r7, #16
80002dc8:	46bd      	mov	sp, r7
80002dca:	bd80      	pop	{r7, pc}

80002dcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
80002dcc:	b580      	push	{r7, lr}
80002dce:	b086      	sub	sp, #24
80002dd0:	af00      	add	r7, sp, #0
80002dd2:	60f8      	str	r0, [r7, #12]
80002dd4:	607a      	str	r2, [r7, #4]
80002dd6:	603b      	str	r3, [r7, #0]
80002dd8:	460b      	mov	r3, r1
80002dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
80002ddc:	7afb      	ldrb	r3, [r7, #11]
80002dde:	f003 0307 	and.w	r3, r3, #7
80002de2:	015b      	lsls	r3, r3, #5
80002de4:	f503 7394 	add.w	r3, r3, #296	; 0x128
80002de8:	68fa      	ldr	r2, [r7, #12]
80002dea:	4413      	add	r3, r2
80002dec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
80002dee:	697b      	ldr	r3, [r7, #20]
80002df0:	687a      	ldr	r2, [r7, #4]
80002df2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
80002df4:	697b      	ldr	r3, [r7, #20]
80002df6:	683a      	ldr	r2, [r7, #0]
80002df8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
80002dfa:	697b      	ldr	r3, [r7, #20]
80002dfc:	2200      	movs	r2, #0
80002dfe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
80002e00:	697b      	ldr	r3, [r7, #20]
80002e02:	2200      	movs	r2, #0
80002e04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
80002e06:	7afb      	ldrb	r3, [r7, #11]
80002e08:	f003 0307 	and.w	r3, r3, #7
80002e0c:	b2da      	uxtb	r2, r3
80002e0e:	697b      	ldr	r3, [r7, #20]
80002e10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
80002e12:	7afb      	ldrb	r3, [r7, #11]
80002e14:	f003 0307 	and.w	r3, r3, #7
80002e18:	2b00      	cmp	r3, #0
80002e1a:	d106      	bne.n	80002e2a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
80002e1c:	68fb      	ldr	r3, [r7, #12]
80002e1e:	681b      	ldr	r3, [r3, #0]
80002e20:	6979      	ldr	r1, [r7, #20]
80002e22:	4618      	mov	r0, r3
80002e24:	f002 f8f8 	bl	80005018 <USB_EPStartXfer>
80002e28:	e005      	b.n	80002e36 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
80002e2a:	68fb      	ldr	r3, [r7, #12]
80002e2c:	681b      	ldr	r3, [r3, #0]
80002e2e:	6979      	ldr	r1, [r7, #20]
80002e30:	4618      	mov	r0, r3
80002e32:	f002 f8f1 	bl	80005018 <USB_EPStartXfer>
  }

  return HAL_OK;
80002e36:	2300      	movs	r3, #0
}
80002e38:	4618      	mov	r0, r3
80002e3a:	3718      	adds	r7, #24
80002e3c:	46bd      	mov	sp, r7
80002e3e:	bd80      	pop	{r7, pc}

80002e40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
80002e40:	b480      	push	{r7}
80002e42:	b083      	sub	sp, #12
80002e44:	af00      	add	r7, sp, #0
80002e46:	6078      	str	r0, [r7, #4]
80002e48:	460b      	mov	r3, r1
80002e4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
80002e4c:	78fb      	ldrb	r3, [r7, #3]
80002e4e:	f003 0307 	and.w	r3, r3, #7
80002e52:	687a      	ldr	r2, [r7, #4]
80002e54:	330a      	adds	r3, #10
80002e56:	015b      	lsls	r3, r3, #5
80002e58:	4413      	add	r3, r2
80002e5a:	3304      	adds	r3, #4
80002e5c:	681b      	ldr	r3, [r3, #0]
}
80002e5e:	4618      	mov	r0, r3
80002e60:	370c      	adds	r7, #12
80002e62:	46bd      	mov	sp, r7
80002e64:	bc80      	pop	{r7}
80002e66:	4770      	bx	lr

80002e68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
80002e68:	b580      	push	{r7, lr}
80002e6a:	b086      	sub	sp, #24
80002e6c:	af00      	add	r7, sp, #0
80002e6e:	60f8      	str	r0, [r7, #12]
80002e70:	607a      	str	r2, [r7, #4]
80002e72:	603b      	str	r3, [r7, #0]
80002e74:	460b      	mov	r3, r1
80002e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
80002e78:	7afb      	ldrb	r3, [r7, #11]
80002e7a:	f003 0307 	and.w	r3, r3, #7
80002e7e:	015b      	lsls	r3, r3, #5
80002e80:	3328      	adds	r3, #40	; 0x28
80002e82:	68fa      	ldr	r2, [r7, #12]
80002e84:	4413      	add	r3, r2
80002e86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
80002e88:	697b      	ldr	r3, [r7, #20]
80002e8a:	687a      	ldr	r2, [r7, #4]
80002e8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
80002e8e:	697b      	ldr	r3, [r7, #20]
80002e90:	683a      	ldr	r2, [r7, #0]
80002e92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
80002e94:	697b      	ldr	r3, [r7, #20]
80002e96:	2200      	movs	r2, #0
80002e98:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
80002e9a:	697b      	ldr	r3, [r7, #20]
80002e9c:	2201      	movs	r2, #1
80002e9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
80002ea0:	7afb      	ldrb	r3, [r7, #11]
80002ea2:	f003 0307 	and.w	r3, r3, #7
80002ea6:	b2da      	uxtb	r2, r3
80002ea8:	697b      	ldr	r3, [r7, #20]
80002eaa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
80002eac:	7afb      	ldrb	r3, [r7, #11]
80002eae:	f003 0307 	and.w	r3, r3, #7
80002eb2:	2b00      	cmp	r3, #0
80002eb4:	d106      	bne.n	80002ec4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
80002eb6:	68fb      	ldr	r3, [r7, #12]
80002eb8:	681b      	ldr	r3, [r3, #0]
80002eba:	6979      	ldr	r1, [r7, #20]
80002ebc:	4618      	mov	r0, r3
80002ebe:	f002 f8ab 	bl	80005018 <USB_EPStartXfer>
80002ec2:	e005      	b.n	80002ed0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
80002ec4:	68fb      	ldr	r3, [r7, #12]
80002ec6:	681b      	ldr	r3, [r3, #0]
80002ec8:	6979      	ldr	r1, [r7, #20]
80002eca:	4618      	mov	r0, r3
80002ecc:	f002 f8a4 	bl	80005018 <USB_EPStartXfer>
  }

  return HAL_OK;
80002ed0:	2300      	movs	r3, #0
}
80002ed2:	4618      	mov	r0, r3
80002ed4:	3718      	adds	r7, #24
80002ed6:	46bd      	mov	sp, r7
80002ed8:	bd80      	pop	{r7, pc}

80002eda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
80002eda:	b580      	push	{r7, lr}
80002edc:	b084      	sub	sp, #16
80002ede:	af00      	add	r7, sp, #0
80002ee0:	6078      	str	r0, [r7, #4]
80002ee2:	460b      	mov	r3, r1
80002ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
80002ee6:	78fb      	ldrb	r3, [r7, #3]
80002ee8:	f003 0207 	and.w	r2, r3, #7
80002eec:	687b      	ldr	r3, [r7, #4]
80002eee:	685b      	ldr	r3, [r3, #4]
80002ef0:	429a      	cmp	r2, r3
80002ef2:	d901      	bls.n	80002ef8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
80002ef4:	2301      	movs	r3, #1
80002ef6:	e046      	b.n	80002f86 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
80002ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
80002efc:	2b00      	cmp	r3, #0
80002efe:	da0b      	bge.n	80002f18 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
80002f00:	78fb      	ldrb	r3, [r7, #3]
80002f02:	f003 0307 	and.w	r3, r3, #7
80002f06:	015b      	lsls	r3, r3, #5
80002f08:	3328      	adds	r3, #40	; 0x28
80002f0a:	687a      	ldr	r2, [r7, #4]
80002f0c:	4413      	add	r3, r2
80002f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
80002f10:	68fb      	ldr	r3, [r7, #12]
80002f12:	2201      	movs	r2, #1
80002f14:	705a      	strb	r2, [r3, #1]
80002f16:	e009      	b.n	80002f2c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
80002f18:	78fb      	ldrb	r3, [r7, #3]
80002f1a:	015b      	lsls	r3, r3, #5
80002f1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
80002f20:	687a      	ldr	r2, [r7, #4]
80002f22:	4413      	add	r3, r2
80002f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
80002f26:	68fb      	ldr	r3, [r7, #12]
80002f28:	2200      	movs	r2, #0
80002f2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
80002f2c:	68fb      	ldr	r3, [r7, #12]
80002f2e:	2201      	movs	r2, #1
80002f30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
80002f32:	78fb      	ldrb	r3, [r7, #3]
80002f34:	f003 0307 	and.w	r3, r3, #7
80002f38:	b2da      	uxtb	r2, r3
80002f3a:	68fb      	ldr	r3, [r7, #12]
80002f3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
80002f3e:	687b      	ldr	r3, [r7, #4]
80002f40:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
80002f44:	2b01      	cmp	r3, #1
80002f46:	d101      	bne.n	80002f4c <HAL_PCD_EP_SetStall+0x72>
80002f48:	2302      	movs	r3, #2
80002f4a:	e01c      	b.n	80002f86 <HAL_PCD_EP_SetStall+0xac>
80002f4c:	687b      	ldr	r3, [r7, #4]
80002f4e:	2201      	movs	r2, #1
80002f50:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
80002f54:	687b      	ldr	r3, [r7, #4]
80002f56:	681b      	ldr	r3, [r3, #0]
80002f58:	68f9      	ldr	r1, [r7, #12]
80002f5a:	4618      	mov	r0, r3
80002f5c:	f002 fb14 	bl	80005588 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
80002f60:	78fb      	ldrb	r3, [r7, #3]
80002f62:	f003 0307 	and.w	r3, r3, #7
80002f66:	2b00      	cmp	r3, #0
80002f68:	d108      	bne.n	80002f7c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
80002f6a:	687b      	ldr	r3, [r7, #4]
80002f6c:	681a      	ldr	r2, [r3, #0]
80002f6e:	687b      	ldr	r3, [r7, #4]
80002f70:	f503 730c 	add.w	r3, r3, #560	; 0x230
80002f74:	4619      	mov	r1, r3
80002f76:	4610      	mov	r0, r2
80002f78:	f002 fc12 	bl	800057a0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
80002f7c:	687b      	ldr	r3, [r7, #4]
80002f7e:	2200      	movs	r2, #0
80002f80:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
80002f84:	2300      	movs	r3, #0
}
80002f86:	4618      	mov	r0, r3
80002f88:	3710      	adds	r7, #16
80002f8a:	46bd      	mov	sp, r7
80002f8c:	bd80      	pop	{r7, pc}

80002f8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
80002f8e:	b580      	push	{r7, lr}
80002f90:	b084      	sub	sp, #16
80002f92:	af00      	add	r7, sp, #0
80002f94:	6078      	str	r0, [r7, #4]
80002f96:	460b      	mov	r3, r1
80002f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
80002f9a:	78fb      	ldrb	r3, [r7, #3]
80002f9c:	f003 020f 	and.w	r2, r3, #15
80002fa0:	687b      	ldr	r3, [r7, #4]
80002fa2:	685b      	ldr	r3, [r3, #4]
80002fa4:	429a      	cmp	r2, r3
80002fa6:	d901      	bls.n	80002fac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
80002fa8:	2301      	movs	r3, #1
80002faa:	e03a      	b.n	80003022 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
80002fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
80002fb0:	2b00      	cmp	r3, #0
80002fb2:	da0b      	bge.n	80002fcc <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
80002fb4:	78fb      	ldrb	r3, [r7, #3]
80002fb6:	f003 0307 	and.w	r3, r3, #7
80002fba:	015b      	lsls	r3, r3, #5
80002fbc:	3328      	adds	r3, #40	; 0x28
80002fbe:	687a      	ldr	r2, [r7, #4]
80002fc0:	4413      	add	r3, r2
80002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
80002fc4:	68fb      	ldr	r3, [r7, #12]
80002fc6:	2201      	movs	r2, #1
80002fc8:	705a      	strb	r2, [r3, #1]
80002fca:	e00b      	b.n	80002fe4 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
80002fcc:	78fb      	ldrb	r3, [r7, #3]
80002fce:	f003 0307 	and.w	r3, r3, #7
80002fd2:	015b      	lsls	r3, r3, #5
80002fd4:	f503 7394 	add.w	r3, r3, #296	; 0x128
80002fd8:	687a      	ldr	r2, [r7, #4]
80002fda:	4413      	add	r3, r2
80002fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
80002fde:	68fb      	ldr	r3, [r7, #12]
80002fe0:	2200      	movs	r2, #0
80002fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
80002fe4:	68fb      	ldr	r3, [r7, #12]
80002fe6:	2200      	movs	r2, #0
80002fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
80002fea:	78fb      	ldrb	r3, [r7, #3]
80002fec:	f003 0307 	and.w	r3, r3, #7
80002ff0:	b2da      	uxtb	r2, r3
80002ff2:	68fb      	ldr	r3, [r7, #12]
80002ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
80002ff6:	687b      	ldr	r3, [r7, #4]
80002ff8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
80002ffc:	2b01      	cmp	r3, #1
80002ffe:	d101      	bne.n	80003004 <HAL_PCD_EP_ClrStall+0x76>
80003000:	2302      	movs	r3, #2
80003002:	e00e      	b.n	80003022 <HAL_PCD_EP_ClrStall+0x94>
80003004:	687b      	ldr	r3, [r7, #4]
80003006:	2201      	movs	r2, #1
80003008:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
8000300c:	687b      	ldr	r3, [r7, #4]
8000300e:	681b      	ldr	r3, [r3, #0]
80003010:	68f9      	ldr	r1, [r7, #12]
80003012:	4618      	mov	r0, r3
80003014:	f002 fafa 	bl	8000560c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
80003018:	687b      	ldr	r3, [r7, #4]
8000301a:	2200      	movs	r2, #0
8000301c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
80003020:	2300      	movs	r3, #0
}
80003022:	4618      	mov	r0, r3
80003024:	3710      	adds	r7, #16
80003026:	46bd      	mov	sp, r7
80003028:	bd80      	pop	{r7, pc}
	...

8000302c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
8000302c:	b590      	push	{r4, r7, lr}
8000302e:	b089      	sub	sp, #36	; 0x24
80003030:	af00      	add	r7, sp, #0
80003032:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
80003034:	e282      	b.n	8000353c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
80003036:	687b      	ldr	r3, [r7, #4]
80003038:	681b      	ldr	r3, [r3, #0]
8000303a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
8000303e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
80003040:	8afb      	ldrh	r3, [r7, #22]
80003042:	b2db      	uxtb	r3, r3
80003044:	f003 030f 	and.w	r3, r3, #15
80003048:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
8000304a:	7d7b      	ldrb	r3, [r7, #21]
8000304c:	2b00      	cmp	r3, #0
8000304e:	f040 8142 	bne.w	800032d6 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
80003052:	8afb      	ldrh	r3, [r7, #22]
80003054:	f003 0310 	and.w	r3, r3, #16
80003058:	2b00      	cmp	r3, #0
8000305a:	d151      	bne.n	80003100 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
8000305c:	687b      	ldr	r3, [r7, #4]
8000305e:	681b      	ldr	r3, [r3, #0]
80003060:	881b      	ldrh	r3, [r3, #0]
80003062:	b29b      	uxth	r3, r3
80003064:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
80003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
8000306c:	b29c      	uxth	r4, r3
8000306e:	687b      	ldr	r3, [r7, #4]
80003070:	681a      	ldr	r2, [r3, #0]
80003072:	ea6f 4344 	mvn.w	r3, r4, lsl #17
80003076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
8000307a:	b29b      	uxth	r3, r3
8000307c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
8000307e:	687b      	ldr	r3, [r7, #4]
80003080:	3328      	adds	r3, #40	; 0x28
80003082:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
80003084:	687b      	ldr	r3, [r7, #4]
80003086:	681b      	ldr	r3, [r3, #0]
80003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
8000308c:	b29b      	uxth	r3, r3
8000308e:	461a      	mov	r2, r3
80003090:	68fb      	ldr	r3, [r7, #12]
80003092:	781b      	ldrb	r3, [r3, #0]
80003094:	00db      	lsls	r3, r3, #3
80003096:	4413      	add	r3, r2
80003098:	3302      	adds	r3, #2
8000309a:	005b      	lsls	r3, r3, #1
8000309c:	687a      	ldr	r2, [r7, #4]
8000309e:	6812      	ldr	r2, [r2, #0]
800030a0:	4413      	add	r3, r2
800030a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
800030a6:	881b      	ldrh	r3, [r3, #0]
800030a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
800030ac:	68fb      	ldr	r3, [r7, #12]
800030ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
800030b0:	68fb      	ldr	r3, [r7, #12]
800030b2:	695a      	ldr	r2, [r3, #20]
800030b4:	68fb      	ldr	r3, [r7, #12]
800030b6:	69db      	ldr	r3, [r3, #28]
800030b8:	441a      	add	r2, r3
800030ba:	68fb      	ldr	r3, [r7, #12]
800030bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
800030be:	2100      	movs	r1, #0
800030c0:	6878      	ldr	r0, [r7, #4]
800030c2:	f004 f9eb 	bl	8000749c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
800030c6:	687b      	ldr	r3, [r7, #4]
800030c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
800030cc:	b2db      	uxtb	r3, r3
800030ce:	2b00      	cmp	r3, #0
800030d0:	f000 8234 	beq.w	8000353c <PCD_EP_ISR_Handler+0x510>
800030d4:	68fb      	ldr	r3, [r7, #12]
800030d6:	699b      	ldr	r3, [r3, #24]
800030d8:	2b00      	cmp	r3, #0
800030da:	f040 822f 	bne.w	8000353c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
800030de:	687b      	ldr	r3, [r7, #4]
800030e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
800030e4:	b2db      	uxtb	r3, r3
800030e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
800030ea:	b2da      	uxtb	r2, r3
800030ec:	687b      	ldr	r3, [r7, #4]
800030ee:	681b      	ldr	r3, [r3, #0]
800030f0:	b292      	uxth	r2, r2
800030f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
800030f6:	687b      	ldr	r3, [r7, #4]
800030f8:	2200      	movs	r2, #0
800030fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
800030fe:	e21d      	b.n	8000353c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
80003100:	687b      	ldr	r3, [r7, #4]
80003102:	f503 7394 	add.w	r3, r3, #296	; 0x128
80003106:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
80003108:	687b      	ldr	r3, [r7, #4]
8000310a:	681b      	ldr	r3, [r3, #0]
8000310c:	881b      	ldrh	r3, [r3, #0]
8000310e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
80003110:	8a7b      	ldrh	r3, [r7, #18]
80003112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
80003116:	2b00      	cmp	r3, #0
80003118:	d033      	beq.n	80003182 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
8000311a:	687b      	ldr	r3, [r7, #4]
8000311c:	681b      	ldr	r3, [r3, #0]
8000311e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80003122:	b29b      	uxth	r3, r3
80003124:	461a      	mov	r2, r3
80003126:	68fb      	ldr	r3, [r7, #12]
80003128:	781b      	ldrb	r3, [r3, #0]
8000312a:	00db      	lsls	r3, r3, #3
8000312c:	4413      	add	r3, r2
8000312e:	3306      	adds	r3, #6
80003130:	005b      	lsls	r3, r3, #1
80003132:	687a      	ldr	r2, [r7, #4]
80003134:	6812      	ldr	r2, [r2, #0]
80003136:	4413      	add	r3, r2
80003138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
8000313c:	881b      	ldrh	r3, [r3, #0]
8000313e:	f3c3 0209 	ubfx	r2, r3, #0, #10
80003142:	68fb      	ldr	r3, [r7, #12]
80003144:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
80003146:	687b      	ldr	r3, [r7, #4]
80003148:	6818      	ldr	r0, [r3, #0]
8000314a:	687b      	ldr	r3, [r7, #4]
8000314c:	f503 710c 	add.w	r1, r3, #560	; 0x230
80003150:	68fb      	ldr	r3, [r7, #12]
80003152:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
80003154:	68fb      	ldr	r3, [r7, #12]
80003156:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
80003158:	b29b      	uxth	r3, r3
8000315a:	f002 fb70 	bl	8000583e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
8000315e:	687b      	ldr	r3, [r7, #4]
80003160:	681b      	ldr	r3, [r3, #0]
80003162:	881b      	ldrh	r3, [r3, #0]
80003164:	b29a      	uxth	r2, r3
80003166:	f640 738f 	movw	r3, #3983	; 0xf8f
8000316a:	4013      	ands	r3, r2
8000316c:	b29c      	uxth	r4, r3
8000316e:	687b      	ldr	r3, [r7, #4]
80003170:	681b      	ldr	r3, [r3, #0]
80003172:	f044 0280 	orr.w	r2, r4, #128	; 0x80
80003176:	b292      	uxth	r2, r2
80003178:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
8000317a:	6878      	ldr	r0, [r7, #4]
8000317c:	f004 f964 	bl	80007448 <HAL_PCD_SetupStageCallback>
80003180:	e1dc      	b.n	8000353c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
80003182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
80003186:	2b00      	cmp	r3, #0
80003188:	f280 81d8 	bge.w	8000353c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
8000318c:	687b      	ldr	r3, [r7, #4]
8000318e:	681b      	ldr	r3, [r3, #0]
80003190:	881b      	ldrh	r3, [r3, #0]
80003192:	b29a      	uxth	r2, r3
80003194:	f640 738f 	movw	r3, #3983	; 0xf8f
80003198:	4013      	ands	r3, r2
8000319a:	b29c      	uxth	r4, r3
8000319c:	687b      	ldr	r3, [r7, #4]
8000319e:	681b      	ldr	r3, [r3, #0]
800031a0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
800031a4:	b292      	uxth	r2, r2
800031a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
800031a8:	687b      	ldr	r3, [r7, #4]
800031aa:	681b      	ldr	r3, [r3, #0]
800031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
800031b0:	b29b      	uxth	r3, r3
800031b2:	461a      	mov	r2, r3
800031b4:	68fb      	ldr	r3, [r7, #12]
800031b6:	781b      	ldrb	r3, [r3, #0]
800031b8:	00db      	lsls	r3, r3, #3
800031ba:	4413      	add	r3, r2
800031bc:	3306      	adds	r3, #6
800031be:	005b      	lsls	r3, r3, #1
800031c0:	687a      	ldr	r2, [r7, #4]
800031c2:	6812      	ldr	r2, [r2, #0]
800031c4:	4413      	add	r3, r2
800031c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
800031ca:	881b      	ldrh	r3, [r3, #0]
800031cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
800031d0:	68fb      	ldr	r3, [r7, #12]
800031d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
800031d4:	68fb      	ldr	r3, [r7, #12]
800031d6:	69db      	ldr	r3, [r3, #28]
800031d8:	2b00      	cmp	r3, #0
800031da:	d019      	beq.n	80003210 <PCD_EP_ISR_Handler+0x1e4>
800031dc:	68fb      	ldr	r3, [r7, #12]
800031de:	695b      	ldr	r3, [r3, #20]
800031e0:	2b00      	cmp	r3, #0
800031e2:	d015      	beq.n	80003210 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
800031e4:	687b      	ldr	r3, [r7, #4]
800031e6:	6818      	ldr	r0, [r3, #0]
800031e8:	68fb      	ldr	r3, [r7, #12]
800031ea:	6959      	ldr	r1, [r3, #20]
800031ec:	68fb      	ldr	r3, [r7, #12]
800031ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
800031f0:	68fb      	ldr	r3, [r7, #12]
800031f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
800031f4:	b29b      	uxth	r3, r3
800031f6:	f002 fb22 	bl	8000583e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
800031fa:	68fb      	ldr	r3, [r7, #12]
800031fc:	695a      	ldr	r2, [r3, #20]
800031fe:	68fb      	ldr	r3, [r7, #12]
80003200:	69db      	ldr	r3, [r3, #28]
80003202:	441a      	add	r2, r3
80003204:	68fb      	ldr	r3, [r7, #12]
80003206:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
80003208:	2100      	movs	r1, #0
8000320a:	6878      	ldr	r0, [r7, #4]
8000320c:	f004 f92e 	bl	8000746c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
80003210:	687b      	ldr	r3, [r7, #4]
80003212:	681b      	ldr	r3, [r3, #0]
80003214:	461c      	mov	r4, r3
80003216:	687b      	ldr	r3, [r7, #4]
80003218:	681b      	ldr	r3, [r3, #0]
8000321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
8000321e:	b29b      	uxth	r3, r3
80003220:	441c      	add	r4, r3
80003222:	f204 430c 	addw	r3, r4, #1036	; 0x40c
80003226:	461c      	mov	r4, r3
80003228:	68fb      	ldr	r3, [r7, #12]
8000322a:	691b      	ldr	r3, [r3, #16]
8000322c:	2b00      	cmp	r3, #0
8000322e:	d10e      	bne.n	8000324e <PCD_EP_ISR_Handler+0x222>
80003230:	8823      	ldrh	r3, [r4, #0]
80003232:	b29b      	uxth	r3, r3
80003234:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
80003238:	b29b      	uxth	r3, r3
8000323a:	8023      	strh	r3, [r4, #0]
8000323c:	8823      	ldrh	r3, [r4, #0]
8000323e:	b29b      	uxth	r3, r3
80003240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
80003244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
80003248:	b29b      	uxth	r3, r3
8000324a:	8023      	strh	r3, [r4, #0]
8000324c:	e02d      	b.n	800032aa <PCD_EP_ISR_Handler+0x27e>
8000324e:	68fb      	ldr	r3, [r7, #12]
80003250:	691b      	ldr	r3, [r3, #16]
80003252:	2b3e      	cmp	r3, #62	; 0x3e
80003254:	d812      	bhi.n	8000327c <PCD_EP_ISR_Handler+0x250>
80003256:	68fb      	ldr	r3, [r7, #12]
80003258:	691b      	ldr	r3, [r3, #16]
8000325a:	085b      	lsrs	r3, r3, #1
8000325c:	61bb      	str	r3, [r7, #24]
8000325e:	68fb      	ldr	r3, [r7, #12]
80003260:	691b      	ldr	r3, [r3, #16]
80003262:	f003 0301 	and.w	r3, r3, #1
80003266:	2b00      	cmp	r3, #0
80003268:	d002      	beq.n	80003270 <PCD_EP_ISR_Handler+0x244>
8000326a:	69bb      	ldr	r3, [r7, #24]
8000326c:	3301      	adds	r3, #1
8000326e:	61bb      	str	r3, [r7, #24]
80003270:	69bb      	ldr	r3, [r7, #24]
80003272:	b29b      	uxth	r3, r3
80003274:	029b      	lsls	r3, r3, #10
80003276:	b29b      	uxth	r3, r3
80003278:	8023      	strh	r3, [r4, #0]
8000327a:	e016      	b.n	800032aa <PCD_EP_ISR_Handler+0x27e>
8000327c:	68fb      	ldr	r3, [r7, #12]
8000327e:	691b      	ldr	r3, [r3, #16]
80003280:	095b      	lsrs	r3, r3, #5
80003282:	61bb      	str	r3, [r7, #24]
80003284:	68fb      	ldr	r3, [r7, #12]
80003286:	691b      	ldr	r3, [r3, #16]
80003288:	f003 031f 	and.w	r3, r3, #31
8000328c:	2b00      	cmp	r3, #0
8000328e:	d102      	bne.n	80003296 <PCD_EP_ISR_Handler+0x26a>
80003290:	69bb      	ldr	r3, [r7, #24]
80003292:	3b01      	subs	r3, #1
80003294:	61bb      	str	r3, [r7, #24]
80003296:	69bb      	ldr	r3, [r7, #24]
80003298:	b29b      	uxth	r3, r3
8000329a:	029b      	lsls	r3, r3, #10
8000329c:	b29b      	uxth	r3, r3
8000329e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
800032a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
800032a6:	b29b      	uxth	r3, r3
800032a8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
800032aa:	687b      	ldr	r3, [r7, #4]
800032ac:	681b      	ldr	r3, [r3, #0]
800032ae:	881b      	ldrh	r3, [r3, #0]
800032b0:	b29b      	uxth	r3, r3
800032b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
800032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800032ba:	b29c      	uxth	r4, r3
800032bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
800032c0:	b29c      	uxth	r4, r3
800032c2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
800032c6:	b29c      	uxth	r4, r3
800032c8:	687b      	ldr	r3, [r7, #4]
800032ca:	681a      	ldr	r2, [r3, #0]
800032cc:	4ba2      	ldr	r3, [pc, #648]	; (80003558 <PCD_EP_ISR_Handler+0x52c>)
800032ce:	4323      	orrs	r3, r4
800032d0:	b29b      	uxth	r3, r3
800032d2:	8013      	strh	r3, [r2, #0]
800032d4:	e132      	b.n	8000353c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
800032d6:	687b      	ldr	r3, [r7, #4]
800032d8:	681b      	ldr	r3, [r3, #0]
800032da:	461a      	mov	r2, r3
800032dc:	7d7b      	ldrb	r3, [r7, #21]
800032de:	009b      	lsls	r3, r3, #2
800032e0:	4413      	add	r3, r2
800032e2:	881b      	ldrh	r3, [r3, #0]
800032e4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
800032e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
800032ea:	2b00      	cmp	r3, #0
800032ec:	f280 80d1 	bge.w	80003492 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
800032f0:	687b      	ldr	r3, [r7, #4]
800032f2:	681b      	ldr	r3, [r3, #0]
800032f4:	461a      	mov	r2, r3
800032f6:	7d7b      	ldrb	r3, [r7, #21]
800032f8:	009b      	lsls	r3, r3, #2
800032fa:	4413      	add	r3, r2
800032fc:	881b      	ldrh	r3, [r3, #0]
800032fe:	b29a      	uxth	r2, r3
80003300:	f640 738f 	movw	r3, #3983	; 0xf8f
80003304:	4013      	ands	r3, r2
80003306:	b29c      	uxth	r4, r3
80003308:	687b      	ldr	r3, [r7, #4]
8000330a:	681b      	ldr	r3, [r3, #0]
8000330c:	461a      	mov	r2, r3
8000330e:	7d7b      	ldrb	r3, [r7, #21]
80003310:	009b      	lsls	r3, r3, #2
80003312:	4413      	add	r3, r2
80003314:	f044 0280 	orr.w	r2, r4, #128	; 0x80
80003318:	b292      	uxth	r2, r2
8000331a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
8000331c:	7d7b      	ldrb	r3, [r7, #21]
8000331e:	015b      	lsls	r3, r3, #5
80003320:	f503 7394 	add.w	r3, r3, #296	; 0x128
80003324:	687a      	ldr	r2, [r7, #4]
80003326:	4413      	add	r3, r2
80003328:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
8000332a:	68fb      	ldr	r3, [r7, #12]
8000332c:	7b1b      	ldrb	r3, [r3, #12]
8000332e:	2b00      	cmp	r3, #0
80003330:	d121      	bne.n	80003376 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
80003332:	687b      	ldr	r3, [r7, #4]
80003334:	681b      	ldr	r3, [r3, #0]
80003336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
8000333a:	b29b      	uxth	r3, r3
8000333c:	461a      	mov	r2, r3
8000333e:	68fb      	ldr	r3, [r7, #12]
80003340:	781b      	ldrb	r3, [r3, #0]
80003342:	00db      	lsls	r3, r3, #3
80003344:	4413      	add	r3, r2
80003346:	3306      	adds	r3, #6
80003348:	005b      	lsls	r3, r3, #1
8000334a:	687a      	ldr	r2, [r7, #4]
8000334c:	6812      	ldr	r2, [r2, #0]
8000334e:	4413      	add	r3, r2
80003350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
80003354:	881b      	ldrh	r3, [r3, #0]
80003356:	f3c3 0309 	ubfx	r3, r3, #0, #10
8000335a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
8000335c:	8bfb      	ldrh	r3, [r7, #30]
8000335e:	2b00      	cmp	r3, #0
80003360:	d072      	beq.n	80003448 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
80003362:	687b      	ldr	r3, [r7, #4]
80003364:	6818      	ldr	r0, [r3, #0]
80003366:	68fb      	ldr	r3, [r7, #12]
80003368:	6959      	ldr	r1, [r3, #20]
8000336a:	68fb      	ldr	r3, [r7, #12]
8000336c:	88da      	ldrh	r2, [r3, #6]
8000336e:	8bfb      	ldrh	r3, [r7, #30]
80003370:	f002 fa65 	bl	8000583e <USB_ReadPMA>
80003374:	e068      	b.n	80003448 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
80003376:	687b      	ldr	r3, [r7, #4]
80003378:	681b      	ldr	r3, [r3, #0]
8000337a:	461a      	mov	r2, r3
8000337c:	68fb      	ldr	r3, [r7, #12]
8000337e:	781b      	ldrb	r3, [r3, #0]
80003380:	009b      	lsls	r3, r3, #2
80003382:	4413      	add	r3, r2
80003384:	881b      	ldrh	r3, [r3, #0]
80003386:	b29b      	uxth	r3, r3
80003388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
8000338c:	2b00      	cmp	r3, #0
8000338e:	d021      	beq.n	800033d4 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
80003390:	687b      	ldr	r3, [r7, #4]
80003392:	681b      	ldr	r3, [r3, #0]
80003394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80003398:	b29b      	uxth	r3, r3
8000339a:	461a      	mov	r2, r3
8000339c:	68fb      	ldr	r3, [r7, #12]
8000339e:	781b      	ldrb	r3, [r3, #0]
800033a0:	00db      	lsls	r3, r3, #3
800033a2:	4413      	add	r3, r2
800033a4:	3302      	adds	r3, #2
800033a6:	005b      	lsls	r3, r3, #1
800033a8:	687a      	ldr	r2, [r7, #4]
800033aa:	6812      	ldr	r2, [r2, #0]
800033ac:	4413      	add	r3, r2
800033ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
800033b2:	881b      	ldrh	r3, [r3, #0]
800033b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
800033b8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
800033ba:	8bfb      	ldrh	r3, [r7, #30]
800033bc:	2b00      	cmp	r3, #0
800033be:	d02a      	beq.n	80003416 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
800033c0:	687b      	ldr	r3, [r7, #4]
800033c2:	6818      	ldr	r0, [r3, #0]
800033c4:	68fb      	ldr	r3, [r7, #12]
800033c6:	6959      	ldr	r1, [r3, #20]
800033c8:	68fb      	ldr	r3, [r7, #12]
800033ca:	891a      	ldrh	r2, [r3, #8]
800033cc:	8bfb      	ldrh	r3, [r7, #30]
800033ce:	f002 fa36 	bl	8000583e <USB_ReadPMA>
800033d2:	e020      	b.n	80003416 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
800033d4:	687b      	ldr	r3, [r7, #4]
800033d6:	681b      	ldr	r3, [r3, #0]
800033d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
800033dc:	b29b      	uxth	r3, r3
800033de:	461a      	mov	r2, r3
800033e0:	68fb      	ldr	r3, [r7, #12]
800033e2:	781b      	ldrb	r3, [r3, #0]
800033e4:	00db      	lsls	r3, r3, #3
800033e6:	4413      	add	r3, r2
800033e8:	3306      	adds	r3, #6
800033ea:	005b      	lsls	r3, r3, #1
800033ec:	687a      	ldr	r2, [r7, #4]
800033ee:	6812      	ldr	r2, [r2, #0]
800033f0:	4413      	add	r3, r2
800033f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
800033f6:	881b      	ldrh	r3, [r3, #0]
800033f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
800033fc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
800033fe:	8bfb      	ldrh	r3, [r7, #30]
80003400:	2b00      	cmp	r3, #0
80003402:	d008      	beq.n	80003416 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
80003404:	687b      	ldr	r3, [r7, #4]
80003406:	6818      	ldr	r0, [r3, #0]
80003408:	68fb      	ldr	r3, [r7, #12]
8000340a:	6959      	ldr	r1, [r3, #20]
8000340c:	68fb      	ldr	r3, [r7, #12]
8000340e:	895a      	ldrh	r2, [r3, #10]
80003410:	8bfb      	ldrh	r3, [r7, #30]
80003412:	f002 fa14 	bl	8000583e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
80003416:	687b      	ldr	r3, [r7, #4]
80003418:	681b      	ldr	r3, [r3, #0]
8000341a:	461a      	mov	r2, r3
8000341c:	68fb      	ldr	r3, [r7, #12]
8000341e:	781b      	ldrb	r3, [r3, #0]
80003420:	009b      	lsls	r3, r3, #2
80003422:	4413      	add	r3, r2
80003424:	881b      	ldrh	r3, [r3, #0]
80003426:	b29b      	uxth	r3, r3
80003428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
8000342c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80003430:	b29c      	uxth	r4, r3
80003432:	687b      	ldr	r3, [r7, #4]
80003434:	681b      	ldr	r3, [r3, #0]
80003436:	461a      	mov	r2, r3
80003438:	68fb      	ldr	r3, [r7, #12]
8000343a:	781b      	ldrb	r3, [r3, #0]
8000343c:	009b      	lsls	r3, r3, #2
8000343e:	441a      	add	r2, r3
80003440:	4b46      	ldr	r3, [pc, #280]	; (8000355c <PCD_EP_ISR_Handler+0x530>)
80003442:	4323      	orrs	r3, r4
80003444:	b29b      	uxth	r3, r3
80003446:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
80003448:	68fb      	ldr	r3, [r7, #12]
8000344a:	69da      	ldr	r2, [r3, #28]
8000344c:	8bfb      	ldrh	r3, [r7, #30]
8000344e:	441a      	add	r2, r3
80003450:	68fb      	ldr	r3, [r7, #12]
80003452:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
80003454:	68fb      	ldr	r3, [r7, #12]
80003456:	695a      	ldr	r2, [r3, #20]
80003458:	8bfb      	ldrh	r3, [r7, #30]
8000345a:	441a      	add	r2, r3
8000345c:	68fb      	ldr	r3, [r7, #12]
8000345e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
80003460:	68fb      	ldr	r3, [r7, #12]
80003462:	699b      	ldr	r3, [r3, #24]
80003464:	2b00      	cmp	r3, #0
80003466:	d004      	beq.n	80003472 <PCD_EP_ISR_Handler+0x446>
80003468:	8bfa      	ldrh	r2, [r7, #30]
8000346a:	68fb      	ldr	r3, [r7, #12]
8000346c:	691b      	ldr	r3, [r3, #16]
8000346e:	429a      	cmp	r2, r3
80003470:	d206      	bcs.n	80003480 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
80003472:	68fb      	ldr	r3, [r7, #12]
80003474:	781b      	ldrb	r3, [r3, #0]
80003476:	4619      	mov	r1, r3
80003478:	6878      	ldr	r0, [r7, #4]
8000347a:	f003 fff7 	bl	8000746c <HAL_PCD_DataOutStageCallback>
8000347e:	e008      	b.n	80003492 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
80003480:	68fb      	ldr	r3, [r7, #12]
80003482:	7819      	ldrb	r1, [r3, #0]
80003484:	68fb      	ldr	r3, [r7, #12]
80003486:	695a      	ldr	r2, [r3, #20]
80003488:	68fb      	ldr	r3, [r7, #12]
8000348a:	699b      	ldr	r3, [r3, #24]
8000348c:	6878      	ldr	r0, [r7, #4]
8000348e:	f7ff fc9d 	bl	80002dcc <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
80003492:	8a7b      	ldrh	r3, [r7, #18]
80003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
80003498:	2b00      	cmp	r3, #0
8000349a:	d04f      	beq.n	8000353c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
8000349c:	7d7b      	ldrb	r3, [r7, #21]
8000349e:	015b      	lsls	r3, r3, #5
800034a0:	3328      	adds	r3, #40	; 0x28
800034a2:	687a      	ldr	r2, [r7, #4]
800034a4:	4413      	add	r3, r2
800034a6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
800034a8:	687b      	ldr	r3, [r7, #4]
800034aa:	681b      	ldr	r3, [r3, #0]
800034ac:	461a      	mov	r2, r3
800034ae:	7d7b      	ldrb	r3, [r7, #21]
800034b0:	009b      	lsls	r3, r3, #2
800034b2:	4413      	add	r3, r2
800034b4:	881b      	ldrh	r3, [r3, #0]
800034b6:	b29b      	uxth	r3, r3
800034b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
800034bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800034c0:	b29c      	uxth	r4, r3
800034c2:	687b      	ldr	r3, [r7, #4]
800034c4:	681b      	ldr	r3, [r3, #0]
800034c6:	461a      	mov	r2, r3
800034c8:	7d7b      	ldrb	r3, [r7, #21]
800034ca:	009b      	lsls	r3, r3, #2
800034cc:	441a      	add	r2, r3
800034ce:	ea6f 4344 	mvn.w	r3, r4, lsl #17
800034d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
800034d6:	b29b      	uxth	r3, r3
800034d8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
800034da:	687b      	ldr	r3, [r7, #4]
800034dc:	681b      	ldr	r3, [r3, #0]
800034de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
800034e2:	b29b      	uxth	r3, r3
800034e4:	461a      	mov	r2, r3
800034e6:	68fb      	ldr	r3, [r7, #12]
800034e8:	781b      	ldrb	r3, [r3, #0]
800034ea:	00db      	lsls	r3, r3, #3
800034ec:	4413      	add	r3, r2
800034ee:	3302      	adds	r3, #2
800034f0:	005b      	lsls	r3, r3, #1
800034f2:	687a      	ldr	r2, [r7, #4]
800034f4:	6812      	ldr	r2, [r2, #0]
800034f6:	4413      	add	r3, r2
800034f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
800034fc:	881b      	ldrh	r3, [r3, #0]
800034fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
80003502:	68fb      	ldr	r3, [r7, #12]
80003504:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
80003506:	68fb      	ldr	r3, [r7, #12]
80003508:	695a      	ldr	r2, [r3, #20]
8000350a:	68fb      	ldr	r3, [r7, #12]
8000350c:	69db      	ldr	r3, [r3, #28]
8000350e:	441a      	add	r2, r3
80003510:	68fb      	ldr	r3, [r7, #12]
80003512:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
80003514:	68fb      	ldr	r3, [r7, #12]
80003516:	699b      	ldr	r3, [r3, #24]
80003518:	2b00      	cmp	r3, #0
8000351a:	d106      	bne.n	8000352a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
8000351c:	68fb      	ldr	r3, [r7, #12]
8000351e:	781b      	ldrb	r3, [r3, #0]
80003520:	4619      	mov	r1, r3
80003522:	6878      	ldr	r0, [r7, #4]
80003524:	f003 ffba 	bl	8000749c <HAL_PCD_DataInStageCallback>
80003528:	e008      	b.n	8000353c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
8000352a:	68fb      	ldr	r3, [r7, #12]
8000352c:	7819      	ldrb	r1, [r3, #0]
8000352e:	68fb      	ldr	r3, [r7, #12]
80003530:	695a      	ldr	r2, [r3, #20]
80003532:	68fb      	ldr	r3, [r7, #12]
80003534:	699b      	ldr	r3, [r3, #24]
80003536:	6878      	ldr	r0, [r7, #4]
80003538:	f7ff fc96 	bl	80002e68 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
8000353c:	687b      	ldr	r3, [r7, #4]
8000353e:	681b      	ldr	r3, [r3, #0]
80003540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80003544:	b29b      	uxth	r3, r3
80003546:	b21b      	sxth	r3, r3
80003548:	2b00      	cmp	r3, #0
8000354a:	f6ff ad74 	blt.w	80003036 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
8000354e:	2300      	movs	r3, #0
}
80003550:	4618      	mov	r0, r3
80003552:	3724      	adds	r7, #36	; 0x24
80003554:	46bd      	mov	sp, r7
80003556:	bd90      	pop	{r4, r7, pc}
80003558:	ffff8080 	.word	0xffff8080
8000355c:	ffff80c0 	.word	0xffff80c0

80003560 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
80003560:	b480      	push	{r7}
80003562:	b087      	sub	sp, #28
80003564:	af00      	add	r7, sp, #0
80003566:	60f8      	str	r0, [r7, #12]
80003568:	607b      	str	r3, [r7, #4]
8000356a:	460b      	mov	r3, r1
8000356c:	817b      	strh	r3, [r7, #10]
8000356e:	4613      	mov	r3, r2
80003570:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
80003572:	897b      	ldrh	r3, [r7, #10]
80003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
80003578:	b29b      	uxth	r3, r3
8000357a:	2b00      	cmp	r3, #0
8000357c:	d008      	beq.n	80003590 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
8000357e:	897b      	ldrh	r3, [r7, #10]
80003580:	f003 0307 	and.w	r3, r3, #7
80003584:	015b      	lsls	r3, r3, #5
80003586:	3328      	adds	r3, #40	; 0x28
80003588:	68fa      	ldr	r2, [r7, #12]
8000358a:	4413      	add	r3, r2
8000358c:	617b      	str	r3, [r7, #20]
8000358e:	e006      	b.n	8000359e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
80003590:	897b      	ldrh	r3, [r7, #10]
80003592:	015b      	lsls	r3, r3, #5
80003594:	f503 7394 	add.w	r3, r3, #296	; 0x128
80003598:	68fa      	ldr	r2, [r7, #12]
8000359a:	4413      	add	r3, r2
8000359c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
8000359e:	893b      	ldrh	r3, [r7, #8]
800035a0:	2b00      	cmp	r3, #0
800035a2:	d107      	bne.n	800035b4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
800035a4:	697b      	ldr	r3, [r7, #20]
800035a6:	2200      	movs	r2, #0
800035a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
800035aa:	687b      	ldr	r3, [r7, #4]
800035ac:	b29a      	uxth	r2, r3
800035ae:	697b      	ldr	r3, [r7, #20]
800035b0:	80da      	strh	r2, [r3, #6]
800035b2:	e00b      	b.n	800035cc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
800035b4:	697b      	ldr	r3, [r7, #20]
800035b6:	2201      	movs	r2, #1
800035b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
800035ba:	687b      	ldr	r3, [r7, #4]
800035bc:	b29a      	uxth	r2, r3
800035be:	697b      	ldr	r3, [r7, #20]
800035c0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
800035c2:	687b      	ldr	r3, [r7, #4]
800035c4:	0c1b      	lsrs	r3, r3, #16
800035c6:	b29a      	uxth	r2, r3
800035c8:	697b      	ldr	r3, [r7, #20]
800035ca:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
800035cc:	2300      	movs	r3, #0
}
800035ce:	4618      	mov	r0, r3
800035d0:	371c      	adds	r7, #28
800035d2:	46bd      	mov	sp, r7
800035d4:	bc80      	pop	{r7}
800035d6:	4770      	bx	lr

800035d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
800035d8:	b580      	push	{r7, lr}
800035da:	b086      	sub	sp, #24
800035dc:	af00      	add	r7, sp, #0
800035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
800035e0:	687b      	ldr	r3, [r7, #4]
800035e2:	2b00      	cmp	r3, #0
800035e4:	d101      	bne.n	800035ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
800035e6:	2301      	movs	r3, #1
800035e8:	e26c      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
800035ea:	687b      	ldr	r3, [r7, #4]
800035ec:	681b      	ldr	r3, [r3, #0]
800035ee:	f003 0301 	and.w	r3, r3, #1
800035f2:	2b00      	cmp	r3, #0
800035f4:	f000 8087 	beq.w	80003706 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
800035f8:	4b92      	ldr	r3, [pc, #584]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
800035fa:	685b      	ldr	r3, [r3, #4]
800035fc:	f003 030c 	and.w	r3, r3, #12
80003600:	2b04      	cmp	r3, #4
80003602:	d00c      	beq.n	8000361e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
80003604:	4b8f      	ldr	r3, [pc, #572]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003606:	685b      	ldr	r3, [r3, #4]
80003608:	f003 030c 	and.w	r3, r3, #12
8000360c:	2b08      	cmp	r3, #8
8000360e:	d112      	bne.n	80003636 <HAL_RCC_OscConfig+0x5e>
80003610:	4b8c      	ldr	r3, [pc, #560]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003612:	685b      	ldr	r3, [r3, #4]
80003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
80003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
8000361c:	d10b      	bne.n	80003636 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
8000361e:	4b89      	ldr	r3, [pc, #548]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003620:	681b      	ldr	r3, [r3, #0]
80003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
80003626:	2b00      	cmp	r3, #0
80003628:	d06c      	beq.n	80003704 <HAL_RCC_OscConfig+0x12c>
8000362a:	687b      	ldr	r3, [r7, #4]
8000362c:	685b      	ldr	r3, [r3, #4]
8000362e:	2b00      	cmp	r3, #0
80003630:	d168      	bne.n	80003704 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
80003632:	2301      	movs	r3, #1
80003634:	e246      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
80003636:	687b      	ldr	r3, [r7, #4]
80003638:	685b      	ldr	r3, [r3, #4]
8000363a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
8000363e:	d106      	bne.n	8000364e <HAL_RCC_OscConfig+0x76>
80003640:	4b80      	ldr	r3, [pc, #512]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003642:	681b      	ldr	r3, [r3, #0]
80003644:	4a7f      	ldr	r2, [pc, #508]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
8000364a:	6013      	str	r3, [r2, #0]
8000364c:	e02e      	b.n	800036ac <HAL_RCC_OscConfig+0xd4>
8000364e:	687b      	ldr	r3, [r7, #4]
80003650:	685b      	ldr	r3, [r3, #4]
80003652:	2b00      	cmp	r3, #0
80003654:	d10c      	bne.n	80003670 <HAL_RCC_OscConfig+0x98>
80003656:	4b7b      	ldr	r3, [pc, #492]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003658:	681b      	ldr	r3, [r3, #0]
8000365a:	4a7a      	ldr	r2, [pc, #488]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
8000365c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
80003660:	6013      	str	r3, [r2, #0]
80003662:	4b78      	ldr	r3, [pc, #480]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003664:	681b      	ldr	r3, [r3, #0]
80003666:	4a77      	ldr	r2, [pc, #476]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
8000366c:	6013      	str	r3, [r2, #0]
8000366e:	e01d      	b.n	800036ac <HAL_RCC_OscConfig+0xd4>
80003670:	687b      	ldr	r3, [r7, #4]
80003672:	685b      	ldr	r3, [r3, #4]
80003674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
80003678:	d10c      	bne.n	80003694 <HAL_RCC_OscConfig+0xbc>
8000367a:	4b72      	ldr	r3, [pc, #456]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
8000367c:	681b      	ldr	r3, [r3, #0]
8000367e:	4a71      	ldr	r2, [pc, #452]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
80003684:	6013      	str	r3, [r2, #0]
80003686:	4b6f      	ldr	r3, [pc, #444]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003688:	681b      	ldr	r3, [r3, #0]
8000368a:	4a6e      	ldr	r2, [pc, #440]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
8000368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
80003690:	6013      	str	r3, [r2, #0]
80003692:	e00b      	b.n	800036ac <HAL_RCC_OscConfig+0xd4>
80003694:	4b6b      	ldr	r3, [pc, #428]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003696:	681b      	ldr	r3, [r3, #0]
80003698:	4a6a      	ldr	r2, [pc, #424]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
8000369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
8000369e:	6013      	str	r3, [r2, #0]
800036a0:	4b68      	ldr	r3, [pc, #416]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
800036a2:	681b      	ldr	r3, [r3, #0]
800036a4:	4a67      	ldr	r2, [pc, #412]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
800036a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
800036aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
800036ac:	687b      	ldr	r3, [r7, #4]
800036ae:	685b      	ldr	r3, [r3, #4]
800036b0:	2b00      	cmp	r3, #0
800036b2:	d013      	beq.n	800036dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
800036b4:	f7fe fe0c 	bl	800022d0 <HAL_GetTick>
800036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
800036ba:	e008      	b.n	800036ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
800036bc:	f7fe fe08 	bl	800022d0 <HAL_GetTick>
800036c0:	4602      	mov	r2, r0
800036c2:	693b      	ldr	r3, [r7, #16]
800036c4:	1ad3      	subs	r3, r2, r3
800036c6:	2b64      	cmp	r3, #100	; 0x64
800036c8:	d901      	bls.n	800036ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
800036ca:	2303      	movs	r3, #3
800036cc:	e1fa      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
800036ce:	4b5d      	ldr	r3, [pc, #372]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
800036d0:	681b      	ldr	r3, [r3, #0]
800036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
800036d6:	2b00      	cmp	r3, #0
800036d8:	d0f0      	beq.n	800036bc <HAL_RCC_OscConfig+0xe4>
800036da:	e014      	b.n	80003706 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
800036dc:	f7fe fdf8 	bl	800022d0 <HAL_GetTick>
800036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
800036e2:	e008      	b.n	800036f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
800036e4:	f7fe fdf4 	bl	800022d0 <HAL_GetTick>
800036e8:	4602      	mov	r2, r0
800036ea:	693b      	ldr	r3, [r7, #16]
800036ec:	1ad3      	subs	r3, r2, r3
800036ee:	2b64      	cmp	r3, #100	; 0x64
800036f0:	d901      	bls.n	800036f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
800036f2:	2303      	movs	r3, #3
800036f4:	e1e6      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
800036f6:	4b53      	ldr	r3, [pc, #332]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
800036f8:	681b      	ldr	r3, [r3, #0]
800036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
800036fe:	2b00      	cmp	r3, #0
80003700:	d1f0      	bne.n	800036e4 <HAL_RCC_OscConfig+0x10c>
80003702:	e000      	b.n	80003706 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
80003704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
80003706:	687b      	ldr	r3, [r7, #4]
80003708:	681b      	ldr	r3, [r3, #0]
8000370a:	f003 0302 	and.w	r3, r3, #2
8000370e:	2b00      	cmp	r3, #0
80003710:	d063      	beq.n	800037da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
80003712:	4b4c      	ldr	r3, [pc, #304]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003714:	685b      	ldr	r3, [r3, #4]
80003716:	f003 030c 	and.w	r3, r3, #12
8000371a:	2b00      	cmp	r3, #0
8000371c:	d00b      	beq.n	80003736 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
8000371e:	4b49      	ldr	r3, [pc, #292]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003720:	685b      	ldr	r3, [r3, #4]
80003722:	f003 030c 	and.w	r3, r3, #12
80003726:	2b08      	cmp	r3, #8
80003728:	d11c      	bne.n	80003764 <HAL_RCC_OscConfig+0x18c>
8000372a:	4b46      	ldr	r3, [pc, #280]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
8000372c:	685b      	ldr	r3, [r3, #4]
8000372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
80003732:	2b00      	cmp	r3, #0
80003734:	d116      	bne.n	80003764 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
80003736:	4b43      	ldr	r3, [pc, #268]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003738:	681b      	ldr	r3, [r3, #0]
8000373a:	f003 0302 	and.w	r3, r3, #2
8000373e:	2b00      	cmp	r3, #0
80003740:	d005      	beq.n	8000374e <HAL_RCC_OscConfig+0x176>
80003742:	687b      	ldr	r3, [r7, #4]
80003744:	691b      	ldr	r3, [r3, #16]
80003746:	2b01      	cmp	r3, #1
80003748:	d001      	beq.n	8000374e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
8000374a:	2301      	movs	r3, #1
8000374c:	e1ba      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
8000374e:	4b3d      	ldr	r3, [pc, #244]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003750:	681b      	ldr	r3, [r3, #0]
80003752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
80003756:	687b      	ldr	r3, [r7, #4]
80003758:	695b      	ldr	r3, [r3, #20]
8000375a:	00db      	lsls	r3, r3, #3
8000375c:	4939      	ldr	r1, [pc, #228]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
8000375e:	4313      	orrs	r3, r2
80003760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
80003762:	e03a      	b.n	800037da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
80003764:	687b      	ldr	r3, [r7, #4]
80003766:	691b      	ldr	r3, [r3, #16]
80003768:	2b00      	cmp	r3, #0
8000376a:	d020      	beq.n	800037ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
8000376c:	4b36      	ldr	r3, [pc, #216]	; (80003848 <HAL_RCC_OscConfig+0x270>)
8000376e:	2201      	movs	r2, #1
80003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
80003772:	f7fe fdad 	bl	800022d0 <HAL_GetTick>
80003776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
80003778:	e008      	b.n	8000378c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
8000377a:	f7fe fda9 	bl	800022d0 <HAL_GetTick>
8000377e:	4602      	mov	r2, r0
80003780:	693b      	ldr	r3, [r7, #16]
80003782:	1ad3      	subs	r3, r2, r3
80003784:	2b02      	cmp	r3, #2
80003786:	d901      	bls.n	8000378c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
80003788:	2303      	movs	r3, #3
8000378a:	e19b      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
8000378c:	4b2d      	ldr	r3, [pc, #180]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
8000378e:	681b      	ldr	r3, [r3, #0]
80003790:	f003 0302 	and.w	r3, r3, #2
80003794:	2b00      	cmp	r3, #0
80003796:	d0f0      	beq.n	8000377a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
80003798:	4b2a      	ldr	r3, [pc, #168]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
8000379a:	681b      	ldr	r3, [r3, #0]
8000379c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
800037a0:	687b      	ldr	r3, [r7, #4]
800037a2:	695b      	ldr	r3, [r3, #20]
800037a4:	00db      	lsls	r3, r3, #3
800037a6:	4927      	ldr	r1, [pc, #156]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
800037a8:	4313      	orrs	r3, r2
800037aa:	600b      	str	r3, [r1, #0]
800037ac:	e015      	b.n	800037da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
800037ae:	4b26      	ldr	r3, [pc, #152]	; (80003848 <HAL_RCC_OscConfig+0x270>)
800037b0:	2200      	movs	r2, #0
800037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
800037b4:	f7fe fd8c 	bl	800022d0 <HAL_GetTick>
800037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
800037ba:	e008      	b.n	800037ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
800037bc:	f7fe fd88 	bl	800022d0 <HAL_GetTick>
800037c0:	4602      	mov	r2, r0
800037c2:	693b      	ldr	r3, [r7, #16]
800037c4:	1ad3      	subs	r3, r2, r3
800037c6:	2b02      	cmp	r3, #2
800037c8:	d901      	bls.n	800037ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
800037ca:	2303      	movs	r3, #3
800037cc:	e17a      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
800037ce:	4b1d      	ldr	r3, [pc, #116]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
800037d0:	681b      	ldr	r3, [r3, #0]
800037d2:	f003 0302 	and.w	r3, r3, #2
800037d6:	2b00      	cmp	r3, #0
800037d8:	d1f0      	bne.n	800037bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
800037da:	687b      	ldr	r3, [r7, #4]
800037dc:	681b      	ldr	r3, [r3, #0]
800037de:	f003 0308 	and.w	r3, r3, #8
800037e2:	2b00      	cmp	r3, #0
800037e4:	d03a      	beq.n	8000385c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
800037e6:	687b      	ldr	r3, [r7, #4]
800037e8:	699b      	ldr	r3, [r3, #24]
800037ea:	2b00      	cmp	r3, #0
800037ec:	d019      	beq.n	80003822 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
800037ee:	4b17      	ldr	r3, [pc, #92]	; (8000384c <HAL_RCC_OscConfig+0x274>)
800037f0:	2201      	movs	r2, #1
800037f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
800037f4:	f7fe fd6c 	bl	800022d0 <HAL_GetTick>
800037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
800037fa:	e008      	b.n	8000380e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
800037fc:	f7fe fd68 	bl	800022d0 <HAL_GetTick>
80003800:	4602      	mov	r2, r0
80003802:	693b      	ldr	r3, [r7, #16]
80003804:	1ad3      	subs	r3, r2, r3
80003806:	2b02      	cmp	r3, #2
80003808:	d901      	bls.n	8000380e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
8000380a:	2303      	movs	r3, #3
8000380c:	e15a      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
8000380e:	4b0d      	ldr	r3, [pc, #52]	; (80003844 <HAL_RCC_OscConfig+0x26c>)
80003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80003812:	f003 0302 	and.w	r3, r3, #2
80003816:	2b00      	cmp	r3, #0
80003818:	d0f0      	beq.n	800037fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
8000381a:	2001      	movs	r0, #1
8000381c:	f000 faa8 	bl	80003d70 <RCC_Delay>
80003820:	e01c      	b.n	8000385c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
80003822:	4b0a      	ldr	r3, [pc, #40]	; (8000384c <HAL_RCC_OscConfig+0x274>)
80003824:	2200      	movs	r2, #0
80003826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
80003828:	f7fe fd52 	bl	800022d0 <HAL_GetTick>
8000382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
8000382e:	e00f      	b.n	80003850 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
80003830:	f7fe fd4e 	bl	800022d0 <HAL_GetTick>
80003834:	4602      	mov	r2, r0
80003836:	693b      	ldr	r3, [r7, #16]
80003838:	1ad3      	subs	r3, r2, r3
8000383a:	2b02      	cmp	r3, #2
8000383c:	d908      	bls.n	80003850 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
8000383e:	2303      	movs	r3, #3
80003840:	e140      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
80003842:	bf00      	nop
80003844:	40021000 	.word	0x40021000
80003848:	42420000 	.word	0x42420000
8000384c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
80003850:	4b9e      	ldr	r3, [pc, #632]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80003854:	f003 0302 	and.w	r3, r3, #2
80003858:	2b00      	cmp	r3, #0
8000385a:	d1e9      	bne.n	80003830 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
8000385c:	687b      	ldr	r3, [r7, #4]
8000385e:	681b      	ldr	r3, [r3, #0]
80003860:	f003 0304 	and.w	r3, r3, #4
80003864:	2b00      	cmp	r3, #0
80003866:	f000 80a6 	beq.w	800039b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
8000386a:	2300      	movs	r3, #0
8000386c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
8000386e:	4b97      	ldr	r3, [pc, #604]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003870:	69db      	ldr	r3, [r3, #28]
80003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
80003876:	2b00      	cmp	r3, #0
80003878:	d10d      	bne.n	80003896 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
8000387a:	4b94      	ldr	r3, [pc, #592]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
8000387c:	69db      	ldr	r3, [r3, #28]
8000387e:	4a93      	ldr	r2, [pc, #588]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
80003884:	61d3      	str	r3, [r2, #28]
80003886:	4b91      	ldr	r3, [pc, #580]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003888:	69db      	ldr	r3, [r3, #28]
8000388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
8000388e:	60bb      	str	r3, [r7, #8]
80003890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
80003892:	2301      	movs	r3, #1
80003894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
80003896:	4b8e      	ldr	r3, [pc, #568]	; (80003ad0 <HAL_RCC_OscConfig+0x4f8>)
80003898:	681b      	ldr	r3, [r3, #0]
8000389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
8000389e:	2b00      	cmp	r3, #0
800038a0:	d118      	bne.n	800038d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
800038a2:	4b8b      	ldr	r3, [pc, #556]	; (80003ad0 <HAL_RCC_OscConfig+0x4f8>)
800038a4:	681b      	ldr	r3, [r3, #0]
800038a6:	4a8a      	ldr	r2, [pc, #552]	; (80003ad0 <HAL_RCC_OscConfig+0x4f8>)
800038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
800038ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
800038ae:	f7fe fd0f 	bl	800022d0 <HAL_GetTick>
800038b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
800038b4:	e008      	b.n	800038c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
800038b6:	f7fe fd0b 	bl	800022d0 <HAL_GetTick>
800038ba:	4602      	mov	r2, r0
800038bc:	693b      	ldr	r3, [r7, #16]
800038be:	1ad3      	subs	r3, r2, r3
800038c0:	2b64      	cmp	r3, #100	; 0x64
800038c2:	d901      	bls.n	800038c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
800038c4:	2303      	movs	r3, #3
800038c6:	e0fd      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
800038c8:	4b81      	ldr	r3, [pc, #516]	; (80003ad0 <HAL_RCC_OscConfig+0x4f8>)
800038ca:	681b      	ldr	r3, [r3, #0]
800038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
800038d0:	2b00      	cmp	r3, #0
800038d2:	d0f0      	beq.n	800038b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
800038d4:	687b      	ldr	r3, [r7, #4]
800038d6:	68db      	ldr	r3, [r3, #12]
800038d8:	2b01      	cmp	r3, #1
800038da:	d106      	bne.n	800038ea <HAL_RCC_OscConfig+0x312>
800038dc:	4b7b      	ldr	r3, [pc, #492]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
800038de:	6a1b      	ldr	r3, [r3, #32]
800038e0:	4a7a      	ldr	r2, [pc, #488]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
800038e2:	f043 0301 	orr.w	r3, r3, #1
800038e6:	6213      	str	r3, [r2, #32]
800038e8:	e02d      	b.n	80003946 <HAL_RCC_OscConfig+0x36e>
800038ea:	687b      	ldr	r3, [r7, #4]
800038ec:	68db      	ldr	r3, [r3, #12]
800038ee:	2b00      	cmp	r3, #0
800038f0:	d10c      	bne.n	8000390c <HAL_RCC_OscConfig+0x334>
800038f2:	4b76      	ldr	r3, [pc, #472]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
800038f4:	6a1b      	ldr	r3, [r3, #32]
800038f6:	4a75      	ldr	r2, [pc, #468]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
800038f8:	f023 0301 	bic.w	r3, r3, #1
800038fc:	6213      	str	r3, [r2, #32]
800038fe:	4b73      	ldr	r3, [pc, #460]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003900:	6a1b      	ldr	r3, [r3, #32]
80003902:	4a72      	ldr	r2, [pc, #456]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003904:	f023 0304 	bic.w	r3, r3, #4
80003908:	6213      	str	r3, [r2, #32]
8000390a:	e01c      	b.n	80003946 <HAL_RCC_OscConfig+0x36e>
8000390c:	687b      	ldr	r3, [r7, #4]
8000390e:	68db      	ldr	r3, [r3, #12]
80003910:	2b05      	cmp	r3, #5
80003912:	d10c      	bne.n	8000392e <HAL_RCC_OscConfig+0x356>
80003914:	4b6d      	ldr	r3, [pc, #436]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003916:	6a1b      	ldr	r3, [r3, #32]
80003918:	4a6c      	ldr	r2, [pc, #432]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
8000391a:	f043 0304 	orr.w	r3, r3, #4
8000391e:	6213      	str	r3, [r2, #32]
80003920:	4b6a      	ldr	r3, [pc, #424]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003922:	6a1b      	ldr	r3, [r3, #32]
80003924:	4a69      	ldr	r2, [pc, #420]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003926:	f043 0301 	orr.w	r3, r3, #1
8000392a:	6213      	str	r3, [r2, #32]
8000392c:	e00b      	b.n	80003946 <HAL_RCC_OscConfig+0x36e>
8000392e:	4b67      	ldr	r3, [pc, #412]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003930:	6a1b      	ldr	r3, [r3, #32]
80003932:	4a66      	ldr	r2, [pc, #408]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003934:	f023 0301 	bic.w	r3, r3, #1
80003938:	6213      	str	r3, [r2, #32]
8000393a:	4b64      	ldr	r3, [pc, #400]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
8000393c:	6a1b      	ldr	r3, [r3, #32]
8000393e:	4a63      	ldr	r2, [pc, #396]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003940:	f023 0304 	bic.w	r3, r3, #4
80003944:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
80003946:	687b      	ldr	r3, [r7, #4]
80003948:	68db      	ldr	r3, [r3, #12]
8000394a:	2b00      	cmp	r3, #0
8000394c:	d015      	beq.n	8000397a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
8000394e:	f7fe fcbf 	bl	800022d0 <HAL_GetTick>
80003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
80003954:	e00a      	b.n	8000396c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
80003956:	f7fe fcbb 	bl	800022d0 <HAL_GetTick>
8000395a:	4602      	mov	r2, r0
8000395c:	693b      	ldr	r3, [r7, #16]
8000395e:	1ad3      	subs	r3, r2, r3
80003960:	f241 3288 	movw	r2, #5000	; 0x1388
80003964:	4293      	cmp	r3, r2
80003966:	d901      	bls.n	8000396c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
80003968:	2303      	movs	r3, #3
8000396a:	e0ab      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
8000396c:	4b57      	ldr	r3, [pc, #348]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
8000396e:	6a1b      	ldr	r3, [r3, #32]
80003970:	f003 0302 	and.w	r3, r3, #2
80003974:	2b00      	cmp	r3, #0
80003976:	d0ee      	beq.n	80003956 <HAL_RCC_OscConfig+0x37e>
80003978:	e014      	b.n	800039a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
8000397a:	f7fe fca9 	bl	800022d0 <HAL_GetTick>
8000397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
80003980:	e00a      	b.n	80003998 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
80003982:	f7fe fca5 	bl	800022d0 <HAL_GetTick>
80003986:	4602      	mov	r2, r0
80003988:	693b      	ldr	r3, [r7, #16]
8000398a:	1ad3      	subs	r3, r2, r3
8000398c:	f241 3288 	movw	r2, #5000	; 0x1388
80003990:	4293      	cmp	r3, r2
80003992:	d901      	bls.n	80003998 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
80003994:	2303      	movs	r3, #3
80003996:	e095      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
80003998:	4b4c      	ldr	r3, [pc, #304]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
8000399a:	6a1b      	ldr	r3, [r3, #32]
8000399c:	f003 0302 	and.w	r3, r3, #2
800039a0:	2b00      	cmp	r3, #0
800039a2:	d1ee      	bne.n	80003982 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
800039a4:	7dfb      	ldrb	r3, [r7, #23]
800039a6:	2b01      	cmp	r3, #1
800039a8:	d105      	bne.n	800039b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
800039aa:	4b48      	ldr	r3, [pc, #288]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
800039ac:	69db      	ldr	r3, [r3, #28]
800039ae:	4a47      	ldr	r2, [pc, #284]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
800039b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
800039b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
800039b6:	687b      	ldr	r3, [r7, #4]
800039b8:	69db      	ldr	r3, [r3, #28]
800039ba:	2b00      	cmp	r3, #0
800039bc:	f000 8081 	beq.w	80003ac2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
800039c0:	4b42      	ldr	r3, [pc, #264]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
800039c2:	685b      	ldr	r3, [r3, #4]
800039c4:	f003 030c 	and.w	r3, r3, #12
800039c8:	2b08      	cmp	r3, #8
800039ca:	d061      	beq.n	80003a90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
800039cc:	687b      	ldr	r3, [r7, #4]
800039ce:	69db      	ldr	r3, [r3, #28]
800039d0:	2b02      	cmp	r3, #2
800039d2:	d146      	bne.n	80003a62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
800039d4:	4b3f      	ldr	r3, [pc, #252]	; (80003ad4 <HAL_RCC_OscConfig+0x4fc>)
800039d6:	2200      	movs	r2, #0
800039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
800039da:	f7fe fc79 	bl	800022d0 <HAL_GetTick>
800039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
800039e0:	e008      	b.n	800039f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
800039e2:	f7fe fc75 	bl	800022d0 <HAL_GetTick>
800039e6:	4602      	mov	r2, r0
800039e8:	693b      	ldr	r3, [r7, #16]
800039ea:	1ad3      	subs	r3, r2, r3
800039ec:	2b02      	cmp	r3, #2
800039ee:	d901      	bls.n	800039f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
800039f0:	2303      	movs	r3, #3
800039f2:	e067      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
800039f4:	4b35      	ldr	r3, [pc, #212]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
800039f6:	681b      	ldr	r3, [r3, #0]
800039f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
800039fc:	2b00      	cmp	r3, #0
800039fe:	d1f0      	bne.n	800039e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
80003a00:	687b      	ldr	r3, [r7, #4]
80003a02:	6a1b      	ldr	r3, [r3, #32]
80003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
80003a08:	d108      	bne.n	80003a1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
80003a0a:	4b30      	ldr	r3, [pc, #192]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003a0c:	685b      	ldr	r3, [r3, #4]
80003a0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
80003a12:	687b      	ldr	r3, [r7, #4]
80003a14:	689b      	ldr	r3, [r3, #8]
80003a16:	492d      	ldr	r1, [pc, #180]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003a18:	4313      	orrs	r3, r2
80003a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
80003a1c:	4b2b      	ldr	r3, [pc, #172]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003a1e:	685b      	ldr	r3, [r3, #4]
80003a20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
80003a24:	687b      	ldr	r3, [r7, #4]
80003a26:	6a19      	ldr	r1, [r3, #32]
80003a28:	687b      	ldr	r3, [r7, #4]
80003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80003a2c:	430b      	orrs	r3, r1
80003a2e:	4927      	ldr	r1, [pc, #156]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003a30:	4313      	orrs	r3, r2
80003a32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
80003a34:	4b27      	ldr	r3, [pc, #156]	; (80003ad4 <HAL_RCC_OscConfig+0x4fc>)
80003a36:	2201      	movs	r2, #1
80003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
80003a3a:	f7fe fc49 	bl	800022d0 <HAL_GetTick>
80003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
80003a40:	e008      	b.n	80003a54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
80003a42:	f7fe fc45 	bl	800022d0 <HAL_GetTick>
80003a46:	4602      	mov	r2, r0
80003a48:	693b      	ldr	r3, [r7, #16]
80003a4a:	1ad3      	subs	r3, r2, r3
80003a4c:	2b02      	cmp	r3, #2
80003a4e:	d901      	bls.n	80003a54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
80003a50:	2303      	movs	r3, #3
80003a52:	e037      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
80003a54:	4b1d      	ldr	r3, [pc, #116]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003a56:	681b      	ldr	r3, [r3, #0]
80003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
80003a5c:	2b00      	cmp	r3, #0
80003a5e:	d0f0      	beq.n	80003a42 <HAL_RCC_OscConfig+0x46a>
80003a60:	e02f      	b.n	80003ac2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
80003a62:	4b1c      	ldr	r3, [pc, #112]	; (80003ad4 <HAL_RCC_OscConfig+0x4fc>)
80003a64:	2200      	movs	r2, #0
80003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
80003a68:	f7fe fc32 	bl	800022d0 <HAL_GetTick>
80003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
80003a6e:	e008      	b.n	80003a82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
80003a70:	f7fe fc2e 	bl	800022d0 <HAL_GetTick>
80003a74:	4602      	mov	r2, r0
80003a76:	693b      	ldr	r3, [r7, #16]
80003a78:	1ad3      	subs	r3, r2, r3
80003a7a:	2b02      	cmp	r3, #2
80003a7c:	d901      	bls.n	80003a82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
80003a7e:	2303      	movs	r3, #3
80003a80:	e020      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
80003a82:	4b12      	ldr	r3, [pc, #72]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003a84:	681b      	ldr	r3, [r3, #0]
80003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
80003a8a:	2b00      	cmp	r3, #0
80003a8c:	d1f0      	bne.n	80003a70 <HAL_RCC_OscConfig+0x498>
80003a8e:	e018      	b.n	80003ac2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
80003a90:	687b      	ldr	r3, [r7, #4]
80003a92:	69db      	ldr	r3, [r3, #28]
80003a94:	2b01      	cmp	r3, #1
80003a96:	d101      	bne.n	80003a9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
80003a98:	2301      	movs	r3, #1
80003a9a:	e013      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
80003a9c:	4b0b      	ldr	r3, [pc, #44]	; (80003acc <HAL_RCC_OscConfig+0x4f4>)
80003a9e:	685b      	ldr	r3, [r3, #4]
80003aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
80003aa2:	68fb      	ldr	r3, [r7, #12]
80003aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
80003aa8:	687b      	ldr	r3, [r7, #4]
80003aaa:	6a1b      	ldr	r3, [r3, #32]
80003aac:	429a      	cmp	r2, r3
80003aae:	d106      	bne.n	80003abe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
80003ab0:	68fb      	ldr	r3, [r7, #12]
80003ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
80003ab6:	687b      	ldr	r3, [r7, #4]
80003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
80003aba:	429a      	cmp	r2, r3
80003abc:	d001      	beq.n	80003ac2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
80003abe:	2301      	movs	r3, #1
80003ac0:	e000      	b.n	80003ac4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
80003ac2:	2300      	movs	r3, #0
}
80003ac4:	4618      	mov	r0, r3
80003ac6:	3718      	adds	r7, #24
80003ac8:	46bd      	mov	sp, r7
80003aca:	bd80      	pop	{r7, pc}
80003acc:	40021000 	.word	0x40021000
80003ad0:	40007000 	.word	0x40007000
80003ad4:	42420060 	.word	0x42420060

80003ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
80003ad8:	b580      	push	{r7, lr}
80003ada:	b084      	sub	sp, #16
80003adc:	af00      	add	r7, sp, #0
80003ade:	6078      	str	r0, [r7, #4]
80003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
80003ae2:	687b      	ldr	r3, [r7, #4]
80003ae4:	2b00      	cmp	r3, #0
80003ae6:	d101      	bne.n	80003aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
80003ae8:	2301      	movs	r3, #1
80003aea:	e0d0      	b.n	80003c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
80003aec:	4b6a      	ldr	r3, [pc, #424]	; (80003c98 <HAL_RCC_ClockConfig+0x1c0>)
80003aee:	681b      	ldr	r3, [r3, #0]
80003af0:	f003 0307 	and.w	r3, r3, #7
80003af4:	683a      	ldr	r2, [r7, #0]
80003af6:	429a      	cmp	r2, r3
80003af8:	d910      	bls.n	80003b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
80003afa:	4b67      	ldr	r3, [pc, #412]	; (80003c98 <HAL_RCC_ClockConfig+0x1c0>)
80003afc:	681b      	ldr	r3, [r3, #0]
80003afe:	f023 0207 	bic.w	r2, r3, #7
80003b02:	4965      	ldr	r1, [pc, #404]	; (80003c98 <HAL_RCC_ClockConfig+0x1c0>)
80003b04:	683b      	ldr	r3, [r7, #0]
80003b06:	4313      	orrs	r3, r2
80003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
80003b0a:	4b63      	ldr	r3, [pc, #396]	; (80003c98 <HAL_RCC_ClockConfig+0x1c0>)
80003b0c:	681b      	ldr	r3, [r3, #0]
80003b0e:	f003 0307 	and.w	r3, r3, #7
80003b12:	683a      	ldr	r2, [r7, #0]
80003b14:	429a      	cmp	r2, r3
80003b16:	d001      	beq.n	80003b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
80003b18:	2301      	movs	r3, #1
80003b1a:	e0b8      	b.n	80003c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
80003b1c:	687b      	ldr	r3, [r7, #4]
80003b1e:	681b      	ldr	r3, [r3, #0]
80003b20:	f003 0302 	and.w	r3, r3, #2
80003b24:	2b00      	cmp	r3, #0
80003b26:	d020      	beq.n	80003b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
80003b28:	687b      	ldr	r3, [r7, #4]
80003b2a:	681b      	ldr	r3, [r3, #0]
80003b2c:	f003 0304 	and.w	r3, r3, #4
80003b30:	2b00      	cmp	r3, #0
80003b32:	d005      	beq.n	80003b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
80003b34:	4b59      	ldr	r3, [pc, #356]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003b36:	685b      	ldr	r3, [r3, #4]
80003b38:	4a58      	ldr	r2, [pc, #352]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
80003b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
80003b40:	687b      	ldr	r3, [r7, #4]
80003b42:	681b      	ldr	r3, [r3, #0]
80003b44:	f003 0308 	and.w	r3, r3, #8
80003b48:	2b00      	cmp	r3, #0
80003b4a:	d005      	beq.n	80003b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
80003b4c:	4b53      	ldr	r3, [pc, #332]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003b4e:	685b      	ldr	r3, [r3, #4]
80003b50:	4a52      	ldr	r2, [pc, #328]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
80003b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
80003b58:	4b50      	ldr	r3, [pc, #320]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003b5a:	685b      	ldr	r3, [r3, #4]
80003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
80003b60:	687b      	ldr	r3, [r7, #4]
80003b62:	689b      	ldr	r3, [r3, #8]
80003b64:	494d      	ldr	r1, [pc, #308]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003b66:	4313      	orrs	r3, r2
80003b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
80003b6a:	687b      	ldr	r3, [r7, #4]
80003b6c:	681b      	ldr	r3, [r3, #0]
80003b6e:	f003 0301 	and.w	r3, r3, #1
80003b72:	2b00      	cmp	r3, #0
80003b74:	d040      	beq.n	80003bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
80003b76:	687b      	ldr	r3, [r7, #4]
80003b78:	685b      	ldr	r3, [r3, #4]
80003b7a:	2b01      	cmp	r3, #1
80003b7c:	d107      	bne.n	80003b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
80003b7e:	4b47      	ldr	r3, [pc, #284]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003b80:	681b      	ldr	r3, [r3, #0]
80003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
80003b86:	2b00      	cmp	r3, #0
80003b88:	d115      	bne.n	80003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
80003b8a:	2301      	movs	r3, #1
80003b8c:	e07f      	b.n	80003c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
80003b8e:	687b      	ldr	r3, [r7, #4]
80003b90:	685b      	ldr	r3, [r3, #4]
80003b92:	2b02      	cmp	r3, #2
80003b94:	d107      	bne.n	80003ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
80003b96:	4b41      	ldr	r3, [pc, #260]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003b98:	681b      	ldr	r3, [r3, #0]
80003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
80003b9e:	2b00      	cmp	r3, #0
80003ba0:	d109      	bne.n	80003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
80003ba2:	2301      	movs	r3, #1
80003ba4:	e073      	b.n	80003c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
80003ba6:	4b3d      	ldr	r3, [pc, #244]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003ba8:	681b      	ldr	r3, [r3, #0]
80003baa:	f003 0302 	and.w	r3, r3, #2
80003bae:	2b00      	cmp	r3, #0
80003bb0:	d101      	bne.n	80003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
80003bb2:	2301      	movs	r3, #1
80003bb4:	e06b      	b.n	80003c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
80003bb6:	4b39      	ldr	r3, [pc, #228]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003bb8:	685b      	ldr	r3, [r3, #4]
80003bba:	f023 0203 	bic.w	r2, r3, #3
80003bbe:	687b      	ldr	r3, [r7, #4]
80003bc0:	685b      	ldr	r3, [r3, #4]
80003bc2:	4936      	ldr	r1, [pc, #216]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003bc4:	4313      	orrs	r3, r2
80003bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
80003bc8:	f7fe fb82 	bl	800022d0 <HAL_GetTick>
80003bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
80003bce:	e00a      	b.n	80003be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
80003bd0:	f7fe fb7e 	bl	800022d0 <HAL_GetTick>
80003bd4:	4602      	mov	r2, r0
80003bd6:	68fb      	ldr	r3, [r7, #12]
80003bd8:	1ad3      	subs	r3, r2, r3
80003bda:	f241 3288 	movw	r2, #5000	; 0x1388
80003bde:	4293      	cmp	r3, r2
80003be0:	d901      	bls.n	80003be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
80003be2:	2303      	movs	r3, #3
80003be4:	e053      	b.n	80003c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
80003be6:	4b2d      	ldr	r3, [pc, #180]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003be8:	685b      	ldr	r3, [r3, #4]
80003bea:	f003 020c 	and.w	r2, r3, #12
80003bee:	687b      	ldr	r3, [r7, #4]
80003bf0:	685b      	ldr	r3, [r3, #4]
80003bf2:	009b      	lsls	r3, r3, #2
80003bf4:	429a      	cmp	r2, r3
80003bf6:	d1eb      	bne.n	80003bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
80003bf8:	4b27      	ldr	r3, [pc, #156]	; (80003c98 <HAL_RCC_ClockConfig+0x1c0>)
80003bfa:	681b      	ldr	r3, [r3, #0]
80003bfc:	f003 0307 	and.w	r3, r3, #7
80003c00:	683a      	ldr	r2, [r7, #0]
80003c02:	429a      	cmp	r2, r3
80003c04:	d210      	bcs.n	80003c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
80003c06:	4b24      	ldr	r3, [pc, #144]	; (80003c98 <HAL_RCC_ClockConfig+0x1c0>)
80003c08:	681b      	ldr	r3, [r3, #0]
80003c0a:	f023 0207 	bic.w	r2, r3, #7
80003c0e:	4922      	ldr	r1, [pc, #136]	; (80003c98 <HAL_RCC_ClockConfig+0x1c0>)
80003c10:	683b      	ldr	r3, [r7, #0]
80003c12:	4313      	orrs	r3, r2
80003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
80003c16:	4b20      	ldr	r3, [pc, #128]	; (80003c98 <HAL_RCC_ClockConfig+0x1c0>)
80003c18:	681b      	ldr	r3, [r3, #0]
80003c1a:	f003 0307 	and.w	r3, r3, #7
80003c1e:	683a      	ldr	r2, [r7, #0]
80003c20:	429a      	cmp	r2, r3
80003c22:	d001      	beq.n	80003c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
80003c24:	2301      	movs	r3, #1
80003c26:	e032      	b.n	80003c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
80003c28:	687b      	ldr	r3, [r7, #4]
80003c2a:	681b      	ldr	r3, [r3, #0]
80003c2c:	f003 0304 	and.w	r3, r3, #4
80003c30:	2b00      	cmp	r3, #0
80003c32:	d008      	beq.n	80003c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
80003c34:	4b19      	ldr	r3, [pc, #100]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003c36:	685b      	ldr	r3, [r3, #4]
80003c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
80003c3c:	687b      	ldr	r3, [r7, #4]
80003c3e:	68db      	ldr	r3, [r3, #12]
80003c40:	4916      	ldr	r1, [pc, #88]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003c42:	4313      	orrs	r3, r2
80003c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
80003c46:	687b      	ldr	r3, [r7, #4]
80003c48:	681b      	ldr	r3, [r3, #0]
80003c4a:	f003 0308 	and.w	r3, r3, #8
80003c4e:	2b00      	cmp	r3, #0
80003c50:	d009      	beq.n	80003c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
80003c52:	4b12      	ldr	r3, [pc, #72]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003c54:	685b      	ldr	r3, [r3, #4]
80003c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
80003c5a:	687b      	ldr	r3, [r7, #4]
80003c5c:	691b      	ldr	r3, [r3, #16]
80003c5e:	00db      	lsls	r3, r3, #3
80003c60:	490e      	ldr	r1, [pc, #56]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003c62:	4313      	orrs	r3, r2
80003c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
80003c66:	f000 f821 	bl	80003cac <HAL_RCC_GetSysClockFreq>
80003c6a:	4601      	mov	r1, r0
80003c6c:	4b0b      	ldr	r3, [pc, #44]	; (80003c9c <HAL_RCC_ClockConfig+0x1c4>)
80003c6e:	685b      	ldr	r3, [r3, #4]
80003c70:	091b      	lsrs	r3, r3, #4
80003c72:	f003 030f 	and.w	r3, r3, #15
80003c76:	4a0a      	ldr	r2, [pc, #40]	; (80003ca0 <HAL_RCC_ClockConfig+0x1c8>)
80003c78:	5cd3      	ldrb	r3, [r2, r3]
80003c7a:	fa21 f303 	lsr.w	r3, r1, r3
80003c7e:	4a09      	ldr	r2, [pc, #36]	; (80003ca4 <HAL_RCC_ClockConfig+0x1cc>)
80003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
80003c82:	4b09      	ldr	r3, [pc, #36]	; (80003ca8 <HAL_RCC_ClockConfig+0x1d0>)
80003c84:	681b      	ldr	r3, [r3, #0]
80003c86:	4618      	mov	r0, r3
80003c88:	f7fe fae0 	bl	8000224c <HAL_InitTick>

  return HAL_OK;
80003c8c:	2300      	movs	r3, #0
}
80003c8e:	4618      	mov	r0, r3
80003c90:	3710      	adds	r7, #16
80003c92:	46bd      	mov	sp, r7
80003c94:	bd80      	pop	{r7, pc}
80003c96:	bf00      	nop
80003c98:	40022000 	.word	0x40022000
80003c9c:	40021000 	.word	0x40021000
80003ca0:	80007b08 	.word	0x80007b08
80003ca4:	20000004 	.word	0x20000004
80003ca8:	20000008 	.word	0x20000008

80003cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
80003cac:	b490      	push	{r4, r7}
80003cae:	b08a      	sub	sp, #40	; 0x28
80003cb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
80003cb2:	4b2a      	ldr	r3, [pc, #168]	; (80003d5c <HAL_RCC_GetSysClockFreq+0xb0>)
80003cb4:	1d3c      	adds	r4, r7, #4
80003cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
80003cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
80003cbc:	4b28      	ldr	r3, [pc, #160]	; (80003d60 <HAL_RCC_GetSysClockFreq+0xb4>)
80003cbe:	881b      	ldrh	r3, [r3, #0]
80003cc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
80003cc2:	2300      	movs	r3, #0
80003cc4:	61fb      	str	r3, [r7, #28]
80003cc6:	2300      	movs	r3, #0
80003cc8:	61bb      	str	r3, [r7, #24]
80003cca:	2300      	movs	r3, #0
80003ccc:	627b      	str	r3, [r7, #36]	; 0x24
80003cce:	2300      	movs	r3, #0
80003cd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
80003cd2:	2300      	movs	r3, #0
80003cd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
80003cd6:	4b23      	ldr	r3, [pc, #140]	; (80003d64 <HAL_RCC_GetSysClockFreq+0xb8>)
80003cd8:	685b      	ldr	r3, [r3, #4]
80003cda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
80003cdc:	69fb      	ldr	r3, [r7, #28]
80003cde:	f003 030c 	and.w	r3, r3, #12
80003ce2:	2b04      	cmp	r3, #4
80003ce4:	d002      	beq.n	80003cec <HAL_RCC_GetSysClockFreq+0x40>
80003ce6:	2b08      	cmp	r3, #8
80003ce8:	d003      	beq.n	80003cf2 <HAL_RCC_GetSysClockFreq+0x46>
80003cea:	e02d      	b.n	80003d48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
80003cec:	4b1e      	ldr	r3, [pc, #120]	; (80003d68 <HAL_RCC_GetSysClockFreq+0xbc>)
80003cee:	623b      	str	r3, [r7, #32]
      break;
80003cf0:	e02d      	b.n	80003d4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
80003cf2:	69fb      	ldr	r3, [r7, #28]
80003cf4:	0c9b      	lsrs	r3, r3, #18
80003cf6:	f003 030f 	and.w	r3, r3, #15
80003cfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
80003cfe:	4413      	add	r3, r2
80003d00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
80003d04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
80003d06:	69fb      	ldr	r3, [r7, #28]
80003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
80003d0c:	2b00      	cmp	r3, #0
80003d0e:	d013      	beq.n	80003d38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
80003d10:	4b14      	ldr	r3, [pc, #80]	; (80003d64 <HAL_RCC_GetSysClockFreq+0xb8>)
80003d12:	685b      	ldr	r3, [r3, #4]
80003d14:	0c5b      	lsrs	r3, r3, #17
80003d16:	f003 0301 	and.w	r3, r3, #1
80003d1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
80003d1e:	4413      	add	r3, r2
80003d20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
80003d24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
80003d26:	697b      	ldr	r3, [r7, #20]
80003d28:	4a0f      	ldr	r2, [pc, #60]	; (80003d68 <HAL_RCC_GetSysClockFreq+0xbc>)
80003d2a:	fb02 f203 	mul.w	r2, r2, r3
80003d2e:	69bb      	ldr	r3, [r7, #24]
80003d30:	fbb2 f3f3 	udiv	r3, r2, r3
80003d34:	627b      	str	r3, [r7, #36]	; 0x24
80003d36:	e004      	b.n	80003d42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
80003d38:	697b      	ldr	r3, [r7, #20]
80003d3a:	4a0c      	ldr	r2, [pc, #48]	; (80003d6c <HAL_RCC_GetSysClockFreq+0xc0>)
80003d3c:	fb02 f303 	mul.w	r3, r2, r3
80003d40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
80003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
80003d44:	623b      	str	r3, [r7, #32]
      break;
80003d46:	e002      	b.n	80003d4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
80003d48:	4b07      	ldr	r3, [pc, #28]	; (80003d68 <HAL_RCC_GetSysClockFreq+0xbc>)
80003d4a:	623b      	str	r3, [r7, #32]
      break;
80003d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
80003d4e:	6a3b      	ldr	r3, [r7, #32]
}
80003d50:	4618      	mov	r0, r3
80003d52:	3728      	adds	r7, #40	; 0x28
80003d54:	46bd      	mov	sp, r7
80003d56:	bc90      	pop	{r4, r7}
80003d58:	4770      	bx	lr
80003d5a:	bf00      	nop
80003d5c:	800079a8 	.word	0x800079a8
80003d60:	800079b8 	.word	0x800079b8
80003d64:	40021000 	.word	0x40021000
80003d68:	007a1200 	.word	0x007a1200
80003d6c:	003d0900 	.word	0x003d0900

80003d70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
80003d70:	b480      	push	{r7}
80003d72:	b085      	sub	sp, #20
80003d74:	af00      	add	r7, sp, #0
80003d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
80003d78:	4b0a      	ldr	r3, [pc, #40]	; (80003da4 <RCC_Delay+0x34>)
80003d7a:	681b      	ldr	r3, [r3, #0]
80003d7c:	4a0a      	ldr	r2, [pc, #40]	; (80003da8 <RCC_Delay+0x38>)
80003d7e:	fba2 2303 	umull	r2, r3, r2, r3
80003d82:	0a5b      	lsrs	r3, r3, #9
80003d84:	687a      	ldr	r2, [r7, #4]
80003d86:	fb02 f303 	mul.w	r3, r2, r3
80003d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
80003d8c:	bf00      	nop
  }
  while (Delay --);
80003d8e:	68fb      	ldr	r3, [r7, #12]
80003d90:	1e5a      	subs	r2, r3, #1
80003d92:	60fa      	str	r2, [r7, #12]
80003d94:	2b00      	cmp	r3, #0
80003d96:	d1f9      	bne.n	80003d8c <RCC_Delay+0x1c>
}
80003d98:	bf00      	nop
80003d9a:	3714      	adds	r7, #20
80003d9c:	46bd      	mov	sp, r7
80003d9e:	bc80      	pop	{r7}
80003da0:	4770      	bx	lr
80003da2:	bf00      	nop
80003da4:	20000004 	.word	0x20000004
80003da8:	10624dd3 	.word	0x10624dd3

80003dac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
80003dac:	b580      	push	{r7, lr}
80003dae:	b086      	sub	sp, #24
80003db0:	af00      	add	r7, sp, #0
80003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
80003db4:	2300      	movs	r3, #0
80003db6:	613b      	str	r3, [r7, #16]
80003db8:	2300      	movs	r3, #0
80003dba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
80003dbc:	687b      	ldr	r3, [r7, #4]
80003dbe:	681b      	ldr	r3, [r3, #0]
80003dc0:	f003 0301 	and.w	r3, r3, #1
80003dc4:	2b00      	cmp	r3, #0
80003dc6:	d07d      	beq.n	80003ec4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
80003dc8:	2300      	movs	r3, #0
80003dca:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
80003dcc:	4b4f      	ldr	r3, [pc, #316]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003dce:	69db      	ldr	r3, [r3, #28]
80003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
80003dd4:	2b00      	cmp	r3, #0
80003dd6:	d10d      	bne.n	80003df4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
80003dd8:	4b4c      	ldr	r3, [pc, #304]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003dda:	69db      	ldr	r3, [r3, #28]
80003ddc:	4a4b      	ldr	r2, [pc, #300]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
80003de2:	61d3      	str	r3, [r2, #28]
80003de4:	4b49      	ldr	r3, [pc, #292]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003de6:	69db      	ldr	r3, [r3, #28]
80003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
80003dec:	60bb      	str	r3, [r7, #8]
80003dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
80003df0:	2301      	movs	r3, #1
80003df2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
80003df4:	4b46      	ldr	r3, [pc, #280]	; (80003f10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
80003df6:	681b      	ldr	r3, [r3, #0]
80003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
80003dfc:	2b00      	cmp	r3, #0
80003dfe:	d118      	bne.n	80003e32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
80003e00:	4b43      	ldr	r3, [pc, #268]	; (80003f10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
80003e02:	681b      	ldr	r3, [r3, #0]
80003e04:	4a42      	ldr	r2, [pc, #264]	; (80003f10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
80003e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
80003e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
80003e0c:	f7fe fa60 	bl	800022d0 <HAL_GetTick>
80003e10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
80003e12:	e008      	b.n	80003e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
80003e14:	f7fe fa5c 	bl	800022d0 <HAL_GetTick>
80003e18:	4602      	mov	r2, r0
80003e1a:	693b      	ldr	r3, [r7, #16]
80003e1c:	1ad3      	subs	r3, r2, r3
80003e1e:	2b64      	cmp	r3, #100	; 0x64
80003e20:	d901      	bls.n	80003e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
80003e22:	2303      	movs	r3, #3
80003e24:	e06d      	b.n	80003f02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
80003e26:	4b3a      	ldr	r3, [pc, #232]	; (80003f10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
80003e28:	681b      	ldr	r3, [r3, #0]
80003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
80003e2e:	2b00      	cmp	r3, #0
80003e30:	d0f0      	beq.n	80003e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
80003e32:	4b36      	ldr	r3, [pc, #216]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003e34:	6a1b      	ldr	r3, [r3, #32]
80003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
80003e3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
80003e3c:	68fb      	ldr	r3, [r7, #12]
80003e3e:	2b00      	cmp	r3, #0
80003e40:	d02e      	beq.n	80003ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
80003e42:	687b      	ldr	r3, [r7, #4]
80003e44:	685b      	ldr	r3, [r3, #4]
80003e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
80003e4a:	68fa      	ldr	r2, [r7, #12]
80003e4c:	429a      	cmp	r2, r3
80003e4e:	d027      	beq.n	80003ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
80003e50:	4b2e      	ldr	r3, [pc, #184]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003e52:	6a1b      	ldr	r3, [r3, #32]
80003e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
80003e58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
80003e5a:	4b2e      	ldr	r3, [pc, #184]	; (80003f14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
80003e5c:	2201      	movs	r2, #1
80003e5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
80003e60:	4b2c      	ldr	r3, [pc, #176]	; (80003f14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
80003e62:	2200      	movs	r2, #0
80003e64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
80003e66:	4a29      	ldr	r2, [pc, #164]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003e68:	68fb      	ldr	r3, [r7, #12]
80003e6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
80003e6c:	68fb      	ldr	r3, [r7, #12]
80003e6e:	f003 0301 	and.w	r3, r3, #1
80003e72:	2b00      	cmp	r3, #0
80003e74:	d014      	beq.n	80003ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
80003e76:	f7fe fa2b 	bl	800022d0 <HAL_GetTick>
80003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
80003e7c:	e00a      	b.n	80003e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
80003e7e:	f7fe fa27 	bl	800022d0 <HAL_GetTick>
80003e82:	4602      	mov	r2, r0
80003e84:	693b      	ldr	r3, [r7, #16]
80003e86:	1ad3      	subs	r3, r2, r3
80003e88:	f241 3288 	movw	r2, #5000	; 0x1388
80003e8c:	4293      	cmp	r3, r2
80003e8e:	d901      	bls.n	80003e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
80003e90:	2303      	movs	r3, #3
80003e92:	e036      	b.n	80003f02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
80003e94:	4b1d      	ldr	r3, [pc, #116]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003e96:	6a1b      	ldr	r3, [r3, #32]
80003e98:	f003 0302 	and.w	r3, r3, #2
80003e9c:	2b00      	cmp	r3, #0
80003e9e:	d0ee      	beq.n	80003e7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
80003ea0:	4b1a      	ldr	r3, [pc, #104]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003ea2:	6a1b      	ldr	r3, [r3, #32]
80003ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
80003ea8:	687b      	ldr	r3, [r7, #4]
80003eaa:	685b      	ldr	r3, [r3, #4]
80003eac:	4917      	ldr	r1, [pc, #92]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003eae:	4313      	orrs	r3, r2
80003eb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
80003eb2:	7dfb      	ldrb	r3, [r7, #23]
80003eb4:	2b01      	cmp	r3, #1
80003eb6:	d105      	bne.n	80003ec4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
80003eb8:	4b14      	ldr	r3, [pc, #80]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003eba:	69db      	ldr	r3, [r3, #28]
80003ebc:	4a13      	ldr	r2, [pc, #76]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
80003ec2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
80003ec4:	687b      	ldr	r3, [r7, #4]
80003ec6:	681b      	ldr	r3, [r3, #0]
80003ec8:	f003 0302 	and.w	r3, r3, #2
80003ecc:	2b00      	cmp	r3, #0
80003ece:	d008      	beq.n	80003ee2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
80003ed0:	4b0e      	ldr	r3, [pc, #56]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003ed2:	685b      	ldr	r3, [r3, #4]
80003ed4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
80003ed8:	687b      	ldr	r3, [r7, #4]
80003eda:	689b      	ldr	r3, [r3, #8]
80003edc:	490b      	ldr	r1, [pc, #44]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003ede:	4313      	orrs	r3, r2
80003ee0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
80003ee2:	687b      	ldr	r3, [r7, #4]
80003ee4:	681b      	ldr	r3, [r3, #0]
80003ee6:	f003 0310 	and.w	r3, r3, #16
80003eea:	2b00      	cmp	r3, #0
80003eec:	d008      	beq.n	80003f00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
80003eee:	4b07      	ldr	r3, [pc, #28]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003ef0:	685b      	ldr	r3, [r3, #4]
80003ef2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
80003ef6:	687b      	ldr	r3, [r7, #4]
80003ef8:	68db      	ldr	r3, [r3, #12]
80003efa:	4904      	ldr	r1, [pc, #16]	; (80003f0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
80003efc:	4313      	orrs	r3, r2
80003efe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
80003f00:	2300      	movs	r3, #0
}
80003f02:	4618      	mov	r0, r3
80003f04:	3718      	adds	r7, #24
80003f06:	46bd      	mov	sp, r7
80003f08:	bd80      	pop	{r7, pc}
80003f0a:	bf00      	nop
80003f0c:	40021000 	.word	0x40021000
80003f10:	40007000 	.word	0x40007000
80003f14:	42420440 	.word	0x42420440

80003f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
80003f18:	b580      	push	{r7, lr}
80003f1a:	b082      	sub	sp, #8
80003f1c:	af00      	add	r7, sp, #0
80003f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
80003f20:	687b      	ldr	r3, [r7, #4]
80003f22:	2b00      	cmp	r3, #0
80003f24:	d101      	bne.n	80003f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
80003f26:	2301      	movs	r3, #1
80003f28:	e01d      	b.n	80003f66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
80003f2a:	687b      	ldr	r3, [r7, #4]
80003f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
80003f30:	b2db      	uxtb	r3, r3
80003f32:	2b00      	cmp	r3, #0
80003f34:	d106      	bne.n	80003f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
80003f36:	687b      	ldr	r3, [r7, #4]
80003f38:	2200      	movs	r2, #0
80003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
80003f3e:	6878      	ldr	r0, [r7, #4]
80003f40:	f7fe f83a 	bl	80001fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
80003f44:	687b      	ldr	r3, [r7, #4]
80003f46:	2202      	movs	r2, #2
80003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
80003f4c:	687b      	ldr	r3, [r7, #4]
80003f4e:	681a      	ldr	r2, [r3, #0]
80003f50:	687b      	ldr	r3, [r7, #4]
80003f52:	3304      	adds	r3, #4
80003f54:	4619      	mov	r1, r3
80003f56:	4610      	mov	r0, r2
80003f58:	f000 fa18 	bl	8000438c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
80003f5c:	687b      	ldr	r3, [r7, #4]
80003f5e:	2201      	movs	r2, #1
80003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
80003f64:	2300      	movs	r3, #0
}
80003f66:	4618      	mov	r0, r3
80003f68:	3708      	adds	r7, #8
80003f6a:	46bd      	mov	sp, r7
80003f6c:	bd80      	pop	{r7, pc}

80003f6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
80003f6e:	b480      	push	{r7}
80003f70:	b085      	sub	sp, #20
80003f72:	af00      	add	r7, sp, #0
80003f74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
80003f76:	687b      	ldr	r3, [r7, #4]
80003f78:	681b      	ldr	r3, [r3, #0]
80003f7a:	68da      	ldr	r2, [r3, #12]
80003f7c:	687b      	ldr	r3, [r7, #4]
80003f7e:	681b      	ldr	r3, [r3, #0]
80003f80:	f042 0201 	orr.w	r2, r2, #1
80003f84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
80003f86:	687b      	ldr	r3, [r7, #4]
80003f88:	681b      	ldr	r3, [r3, #0]
80003f8a:	689b      	ldr	r3, [r3, #8]
80003f8c:	f003 0307 	and.w	r3, r3, #7
80003f90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
80003f92:	68fb      	ldr	r3, [r7, #12]
80003f94:	2b06      	cmp	r3, #6
80003f96:	d007      	beq.n	80003fa8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
80003f98:	687b      	ldr	r3, [r7, #4]
80003f9a:	681b      	ldr	r3, [r3, #0]
80003f9c:	681a      	ldr	r2, [r3, #0]
80003f9e:	687b      	ldr	r3, [r7, #4]
80003fa0:	681b      	ldr	r3, [r3, #0]
80003fa2:	f042 0201 	orr.w	r2, r2, #1
80003fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
80003fa8:	2300      	movs	r3, #0
}
80003faa:	4618      	mov	r0, r3
80003fac:	3714      	adds	r7, #20
80003fae:	46bd      	mov	sp, r7
80003fb0:	bc80      	pop	{r7}
80003fb2:	4770      	bx	lr

80003fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
80003fb4:	b580      	push	{r7, lr}
80003fb6:	b082      	sub	sp, #8
80003fb8:	af00      	add	r7, sp, #0
80003fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
80003fbc:	687b      	ldr	r3, [r7, #4]
80003fbe:	681b      	ldr	r3, [r3, #0]
80003fc0:	691b      	ldr	r3, [r3, #16]
80003fc2:	f003 0302 	and.w	r3, r3, #2
80003fc6:	2b02      	cmp	r3, #2
80003fc8:	d122      	bne.n	80004010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
80003fca:	687b      	ldr	r3, [r7, #4]
80003fcc:	681b      	ldr	r3, [r3, #0]
80003fce:	68db      	ldr	r3, [r3, #12]
80003fd0:	f003 0302 	and.w	r3, r3, #2
80003fd4:	2b02      	cmp	r3, #2
80003fd6:	d11b      	bne.n	80004010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
80003fd8:	687b      	ldr	r3, [r7, #4]
80003fda:	681b      	ldr	r3, [r3, #0]
80003fdc:	f06f 0202 	mvn.w	r2, #2
80003fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
80003fe2:	687b      	ldr	r3, [r7, #4]
80003fe4:	2201      	movs	r2, #1
80003fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
80003fe8:	687b      	ldr	r3, [r7, #4]
80003fea:	681b      	ldr	r3, [r3, #0]
80003fec:	699b      	ldr	r3, [r3, #24]
80003fee:	f003 0303 	and.w	r3, r3, #3
80003ff2:	2b00      	cmp	r3, #0
80003ff4:	d003      	beq.n	80003ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
80003ff6:	6878      	ldr	r0, [r7, #4]
80003ff8:	f000 f9ad 	bl	80004356 <HAL_TIM_IC_CaptureCallback>
80003ffc:	e005      	b.n	8000400a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
80003ffe:	6878      	ldr	r0, [r7, #4]
80004000:	f000 f9a0 	bl	80004344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
80004004:	6878      	ldr	r0, [r7, #4]
80004006:	f000 f9af 	bl	80004368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
8000400a:	687b      	ldr	r3, [r7, #4]
8000400c:	2200      	movs	r2, #0
8000400e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
80004010:	687b      	ldr	r3, [r7, #4]
80004012:	681b      	ldr	r3, [r3, #0]
80004014:	691b      	ldr	r3, [r3, #16]
80004016:	f003 0304 	and.w	r3, r3, #4
8000401a:	2b04      	cmp	r3, #4
8000401c:	d122      	bne.n	80004064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
8000401e:	687b      	ldr	r3, [r7, #4]
80004020:	681b      	ldr	r3, [r3, #0]
80004022:	68db      	ldr	r3, [r3, #12]
80004024:	f003 0304 	and.w	r3, r3, #4
80004028:	2b04      	cmp	r3, #4
8000402a:	d11b      	bne.n	80004064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
8000402c:	687b      	ldr	r3, [r7, #4]
8000402e:	681b      	ldr	r3, [r3, #0]
80004030:	f06f 0204 	mvn.w	r2, #4
80004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
80004036:	687b      	ldr	r3, [r7, #4]
80004038:	2202      	movs	r2, #2
8000403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
8000403c:	687b      	ldr	r3, [r7, #4]
8000403e:	681b      	ldr	r3, [r3, #0]
80004040:	699b      	ldr	r3, [r3, #24]
80004042:	f403 7340 	and.w	r3, r3, #768	; 0x300
80004046:	2b00      	cmp	r3, #0
80004048:	d003      	beq.n	80004052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
8000404a:	6878      	ldr	r0, [r7, #4]
8000404c:	f000 f983 	bl	80004356 <HAL_TIM_IC_CaptureCallback>
80004050:	e005      	b.n	8000405e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
80004052:	6878      	ldr	r0, [r7, #4]
80004054:	f000 f976 	bl	80004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
80004058:	6878      	ldr	r0, [r7, #4]
8000405a:	f000 f985 	bl	80004368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
8000405e:	687b      	ldr	r3, [r7, #4]
80004060:	2200      	movs	r2, #0
80004062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
80004064:	687b      	ldr	r3, [r7, #4]
80004066:	681b      	ldr	r3, [r3, #0]
80004068:	691b      	ldr	r3, [r3, #16]
8000406a:	f003 0308 	and.w	r3, r3, #8
8000406e:	2b08      	cmp	r3, #8
80004070:	d122      	bne.n	800040b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
80004072:	687b      	ldr	r3, [r7, #4]
80004074:	681b      	ldr	r3, [r3, #0]
80004076:	68db      	ldr	r3, [r3, #12]
80004078:	f003 0308 	and.w	r3, r3, #8
8000407c:	2b08      	cmp	r3, #8
8000407e:	d11b      	bne.n	800040b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
80004080:	687b      	ldr	r3, [r7, #4]
80004082:	681b      	ldr	r3, [r3, #0]
80004084:	f06f 0208 	mvn.w	r2, #8
80004088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
8000408a:	687b      	ldr	r3, [r7, #4]
8000408c:	2204      	movs	r2, #4
8000408e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
80004090:	687b      	ldr	r3, [r7, #4]
80004092:	681b      	ldr	r3, [r3, #0]
80004094:	69db      	ldr	r3, [r3, #28]
80004096:	f003 0303 	and.w	r3, r3, #3
8000409a:	2b00      	cmp	r3, #0
8000409c:	d003      	beq.n	800040a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
8000409e:	6878      	ldr	r0, [r7, #4]
800040a0:	f000 f959 	bl	80004356 <HAL_TIM_IC_CaptureCallback>
800040a4:	e005      	b.n	800040b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
800040a6:	6878      	ldr	r0, [r7, #4]
800040a8:	f000 f94c 	bl	80004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
800040ac:	6878      	ldr	r0, [r7, #4]
800040ae:	f000 f95b 	bl	80004368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
800040b2:	687b      	ldr	r3, [r7, #4]
800040b4:	2200      	movs	r2, #0
800040b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
800040b8:	687b      	ldr	r3, [r7, #4]
800040ba:	681b      	ldr	r3, [r3, #0]
800040bc:	691b      	ldr	r3, [r3, #16]
800040be:	f003 0310 	and.w	r3, r3, #16
800040c2:	2b10      	cmp	r3, #16
800040c4:	d122      	bne.n	8000410c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
800040c6:	687b      	ldr	r3, [r7, #4]
800040c8:	681b      	ldr	r3, [r3, #0]
800040ca:	68db      	ldr	r3, [r3, #12]
800040cc:	f003 0310 	and.w	r3, r3, #16
800040d0:	2b10      	cmp	r3, #16
800040d2:	d11b      	bne.n	8000410c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
800040d4:	687b      	ldr	r3, [r7, #4]
800040d6:	681b      	ldr	r3, [r3, #0]
800040d8:	f06f 0210 	mvn.w	r2, #16
800040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
800040de:	687b      	ldr	r3, [r7, #4]
800040e0:	2208      	movs	r2, #8
800040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
800040e4:	687b      	ldr	r3, [r7, #4]
800040e6:	681b      	ldr	r3, [r3, #0]
800040e8:	69db      	ldr	r3, [r3, #28]
800040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
800040ee:	2b00      	cmp	r3, #0
800040f0:	d003      	beq.n	800040fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
800040f2:	6878      	ldr	r0, [r7, #4]
800040f4:	f000 f92f 	bl	80004356 <HAL_TIM_IC_CaptureCallback>
800040f8:	e005      	b.n	80004106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
800040fa:	6878      	ldr	r0, [r7, #4]
800040fc:	f000 f922 	bl	80004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
80004100:	6878      	ldr	r0, [r7, #4]
80004102:	f000 f931 	bl	80004368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
80004106:	687b      	ldr	r3, [r7, #4]
80004108:	2200      	movs	r2, #0
8000410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
8000410c:	687b      	ldr	r3, [r7, #4]
8000410e:	681b      	ldr	r3, [r3, #0]
80004110:	691b      	ldr	r3, [r3, #16]
80004112:	f003 0301 	and.w	r3, r3, #1
80004116:	2b01      	cmp	r3, #1
80004118:	d10e      	bne.n	80004138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
8000411a:	687b      	ldr	r3, [r7, #4]
8000411c:	681b      	ldr	r3, [r3, #0]
8000411e:	68db      	ldr	r3, [r3, #12]
80004120:	f003 0301 	and.w	r3, r3, #1
80004124:	2b01      	cmp	r3, #1
80004126:	d107      	bne.n	80004138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
80004128:	687b      	ldr	r3, [r7, #4]
8000412a:	681b      	ldr	r3, [r3, #0]
8000412c:	f06f 0201 	mvn.w	r2, #1
80004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
80004132:	6878      	ldr	r0, [r7, #4]
80004134:	f000 f8fd 	bl	80004332 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
80004138:	687b      	ldr	r3, [r7, #4]
8000413a:	681b      	ldr	r3, [r3, #0]
8000413c:	691b      	ldr	r3, [r3, #16]
8000413e:	f003 0380 	and.w	r3, r3, #128	; 0x80
80004142:	2b80      	cmp	r3, #128	; 0x80
80004144:	d10e      	bne.n	80004164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
80004146:	687b      	ldr	r3, [r7, #4]
80004148:	681b      	ldr	r3, [r3, #0]
8000414a:	68db      	ldr	r3, [r3, #12]
8000414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
80004150:	2b80      	cmp	r3, #128	; 0x80
80004152:	d107      	bne.n	80004164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
80004154:	687b      	ldr	r3, [r7, #4]
80004156:	681b      	ldr	r3, [r3, #0]
80004158:	f06f 0280 	mvn.w	r2, #128	; 0x80
8000415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
8000415e:	6878      	ldr	r0, [r7, #4]
80004160:	f000 fa59 	bl	80004616 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
80004164:	687b      	ldr	r3, [r7, #4]
80004166:	681b      	ldr	r3, [r3, #0]
80004168:	691b      	ldr	r3, [r3, #16]
8000416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
8000416e:	2b40      	cmp	r3, #64	; 0x40
80004170:	d10e      	bne.n	80004190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
80004172:	687b      	ldr	r3, [r7, #4]
80004174:	681b      	ldr	r3, [r3, #0]
80004176:	68db      	ldr	r3, [r3, #12]
80004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
8000417c:	2b40      	cmp	r3, #64	; 0x40
8000417e:	d107      	bne.n	80004190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
80004180:	687b      	ldr	r3, [r7, #4]
80004182:	681b      	ldr	r3, [r3, #0]
80004184:	f06f 0240 	mvn.w	r2, #64	; 0x40
80004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
8000418a:	6878      	ldr	r0, [r7, #4]
8000418c:	f000 f8f5 	bl	8000437a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
80004190:	687b      	ldr	r3, [r7, #4]
80004192:	681b      	ldr	r3, [r3, #0]
80004194:	691b      	ldr	r3, [r3, #16]
80004196:	f003 0320 	and.w	r3, r3, #32
8000419a:	2b20      	cmp	r3, #32
8000419c:	d10e      	bne.n	800041bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
8000419e:	687b      	ldr	r3, [r7, #4]
800041a0:	681b      	ldr	r3, [r3, #0]
800041a2:	68db      	ldr	r3, [r3, #12]
800041a4:	f003 0320 	and.w	r3, r3, #32
800041a8:	2b20      	cmp	r3, #32
800041aa:	d107      	bne.n	800041bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
800041ac:	687b      	ldr	r3, [r7, #4]
800041ae:	681b      	ldr	r3, [r3, #0]
800041b0:	f06f 0220 	mvn.w	r2, #32
800041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
800041b6:	6878      	ldr	r0, [r7, #4]
800041b8:	f000 fa24 	bl	80004604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
800041bc:	bf00      	nop
800041be:	3708      	adds	r7, #8
800041c0:	46bd      	mov	sp, r7
800041c2:	bd80      	pop	{r7, pc}

800041c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
800041c4:	b580      	push	{r7, lr}
800041c6:	b084      	sub	sp, #16
800041c8:	af00      	add	r7, sp, #0
800041ca:	6078      	str	r0, [r7, #4]
800041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
800041ce:	687b      	ldr	r3, [r7, #4]
800041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
800041d4:	2b01      	cmp	r3, #1
800041d6:	d101      	bne.n	800041dc <HAL_TIM_ConfigClockSource+0x18>
800041d8:	2302      	movs	r3, #2
800041da:	e0a6      	b.n	8000432a <HAL_TIM_ConfigClockSource+0x166>
800041dc:	687b      	ldr	r3, [r7, #4]
800041de:	2201      	movs	r2, #1
800041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
800041e4:	687b      	ldr	r3, [r7, #4]
800041e6:	2202      	movs	r2, #2
800041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
800041ec:	687b      	ldr	r3, [r7, #4]
800041ee:	681b      	ldr	r3, [r3, #0]
800041f0:	689b      	ldr	r3, [r3, #8]
800041f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
800041f4:	68fb      	ldr	r3, [r7, #12]
800041f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
800041fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
800041fc:	68fb      	ldr	r3, [r7, #12]
800041fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
80004202:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
80004204:	687b      	ldr	r3, [r7, #4]
80004206:	681b      	ldr	r3, [r3, #0]
80004208:	68fa      	ldr	r2, [r7, #12]
8000420a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
8000420c:	683b      	ldr	r3, [r7, #0]
8000420e:	681b      	ldr	r3, [r3, #0]
80004210:	2b40      	cmp	r3, #64	; 0x40
80004212:	d067      	beq.n	800042e4 <HAL_TIM_ConfigClockSource+0x120>
80004214:	2b40      	cmp	r3, #64	; 0x40
80004216:	d80b      	bhi.n	80004230 <HAL_TIM_ConfigClockSource+0x6c>
80004218:	2b10      	cmp	r3, #16
8000421a:	d073      	beq.n	80004304 <HAL_TIM_ConfigClockSource+0x140>
8000421c:	2b10      	cmp	r3, #16
8000421e:	d802      	bhi.n	80004226 <HAL_TIM_ConfigClockSource+0x62>
80004220:	2b00      	cmp	r3, #0
80004222:	d06f      	beq.n	80004304 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
80004224:	e078      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
80004226:	2b20      	cmp	r3, #32
80004228:	d06c      	beq.n	80004304 <HAL_TIM_ConfigClockSource+0x140>
8000422a:	2b30      	cmp	r3, #48	; 0x30
8000422c:	d06a      	beq.n	80004304 <HAL_TIM_ConfigClockSource+0x140>
      break;
8000422e:	e073      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
80004230:	2b70      	cmp	r3, #112	; 0x70
80004232:	d00d      	beq.n	80004250 <HAL_TIM_ConfigClockSource+0x8c>
80004234:	2b70      	cmp	r3, #112	; 0x70
80004236:	d804      	bhi.n	80004242 <HAL_TIM_ConfigClockSource+0x7e>
80004238:	2b50      	cmp	r3, #80	; 0x50
8000423a:	d033      	beq.n	800042a4 <HAL_TIM_ConfigClockSource+0xe0>
8000423c:	2b60      	cmp	r3, #96	; 0x60
8000423e:	d041      	beq.n	800042c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
80004240:	e06a      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
80004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
80004246:	d066      	beq.n	80004316 <HAL_TIM_ConfigClockSource+0x152>
80004248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
8000424c:	d017      	beq.n	8000427e <HAL_TIM_ConfigClockSource+0xba>
      break;
8000424e:	e063      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
80004250:	687b      	ldr	r3, [r7, #4]
80004252:	6818      	ldr	r0, [r3, #0]
80004254:	683b      	ldr	r3, [r7, #0]
80004256:	6899      	ldr	r1, [r3, #8]
80004258:	683b      	ldr	r3, [r7, #0]
8000425a:	685a      	ldr	r2, [r3, #4]
8000425c:	683b      	ldr	r3, [r7, #0]
8000425e:	68db      	ldr	r3, [r3, #12]
80004260:	f000 f96d 	bl	8000453e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
80004264:	687b      	ldr	r3, [r7, #4]
80004266:	681b      	ldr	r3, [r3, #0]
80004268:	689b      	ldr	r3, [r3, #8]
8000426a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
8000426c:	68fb      	ldr	r3, [r7, #12]
8000426e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
80004272:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
80004274:	687b      	ldr	r3, [r7, #4]
80004276:	681b      	ldr	r3, [r3, #0]
80004278:	68fa      	ldr	r2, [r7, #12]
8000427a:	609a      	str	r2, [r3, #8]
      break;
8000427c:	e04c      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
8000427e:	687b      	ldr	r3, [r7, #4]
80004280:	6818      	ldr	r0, [r3, #0]
80004282:	683b      	ldr	r3, [r7, #0]
80004284:	6899      	ldr	r1, [r3, #8]
80004286:	683b      	ldr	r3, [r7, #0]
80004288:	685a      	ldr	r2, [r3, #4]
8000428a:	683b      	ldr	r3, [r7, #0]
8000428c:	68db      	ldr	r3, [r3, #12]
8000428e:	f000 f956 	bl	8000453e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
80004292:	687b      	ldr	r3, [r7, #4]
80004294:	681b      	ldr	r3, [r3, #0]
80004296:	689a      	ldr	r2, [r3, #8]
80004298:	687b      	ldr	r3, [r7, #4]
8000429a:	681b      	ldr	r3, [r3, #0]
8000429c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
800042a0:	609a      	str	r2, [r3, #8]
      break;
800042a2:	e039      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
800042a4:	687b      	ldr	r3, [r7, #4]
800042a6:	6818      	ldr	r0, [r3, #0]
800042a8:	683b      	ldr	r3, [r7, #0]
800042aa:	6859      	ldr	r1, [r3, #4]
800042ac:	683b      	ldr	r3, [r7, #0]
800042ae:	68db      	ldr	r3, [r3, #12]
800042b0:	461a      	mov	r2, r3
800042b2:	f000 f8cd 	bl	80004450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
800042b6:	687b      	ldr	r3, [r7, #4]
800042b8:	681b      	ldr	r3, [r3, #0]
800042ba:	2150      	movs	r1, #80	; 0x50
800042bc:	4618      	mov	r0, r3
800042be:	f000 f924 	bl	8000450a <TIM_ITRx_SetConfig>
      break;
800042c2:	e029      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
800042c4:	687b      	ldr	r3, [r7, #4]
800042c6:	6818      	ldr	r0, [r3, #0]
800042c8:	683b      	ldr	r3, [r7, #0]
800042ca:	6859      	ldr	r1, [r3, #4]
800042cc:	683b      	ldr	r3, [r7, #0]
800042ce:	68db      	ldr	r3, [r3, #12]
800042d0:	461a      	mov	r2, r3
800042d2:	f000 f8eb 	bl	800044ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
800042d6:	687b      	ldr	r3, [r7, #4]
800042d8:	681b      	ldr	r3, [r3, #0]
800042da:	2160      	movs	r1, #96	; 0x60
800042dc:	4618      	mov	r0, r3
800042de:	f000 f914 	bl	8000450a <TIM_ITRx_SetConfig>
      break;
800042e2:	e019      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
800042e4:	687b      	ldr	r3, [r7, #4]
800042e6:	6818      	ldr	r0, [r3, #0]
800042e8:	683b      	ldr	r3, [r7, #0]
800042ea:	6859      	ldr	r1, [r3, #4]
800042ec:	683b      	ldr	r3, [r7, #0]
800042ee:	68db      	ldr	r3, [r3, #12]
800042f0:	461a      	mov	r2, r3
800042f2:	f000 f8ad 	bl	80004450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
800042f6:	687b      	ldr	r3, [r7, #4]
800042f8:	681b      	ldr	r3, [r3, #0]
800042fa:	2140      	movs	r1, #64	; 0x40
800042fc:	4618      	mov	r0, r3
800042fe:	f000 f904 	bl	8000450a <TIM_ITRx_SetConfig>
      break;
80004302:	e009      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
80004304:	687b      	ldr	r3, [r7, #4]
80004306:	681a      	ldr	r2, [r3, #0]
80004308:	683b      	ldr	r3, [r7, #0]
8000430a:	681b      	ldr	r3, [r3, #0]
8000430c:	4619      	mov	r1, r3
8000430e:	4610      	mov	r0, r2
80004310:	f000 f8fb 	bl	8000450a <TIM_ITRx_SetConfig>
      break;
80004314:	e000      	b.n	80004318 <HAL_TIM_ConfigClockSource+0x154>
      break;
80004316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
80004318:	687b      	ldr	r3, [r7, #4]
8000431a:	2201      	movs	r2, #1
8000431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
80004320:	687b      	ldr	r3, [r7, #4]
80004322:	2200      	movs	r2, #0
80004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
80004328:	2300      	movs	r3, #0
}
8000432a:	4618      	mov	r0, r3
8000432c:	3710      	adds	r7, #16
8000432e:	46bd      	mov	sp, r7
80004330:	bd80      	pop	{r7, pc}

80004332 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
80004332:	b480      	push	{r7}
80004334:	b083      	sub	sp, #12
80004336:	af00      	add	r7, sp, #0
80004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
8000433a:	bf00      	nop
8000433c:	370c      	adds	r7, #12
8000433e:	46bd      	mov	sp, r7
80004340:	bc80      	pop	{r7}
80004342:	4770      	bx	lr

80004344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
80004344:	b480      	push	{r7}
80004346:	b083      	sub	sp, #12
80004348:	af00      	add	r7, sp, #0
8000434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
8000434c:	bf00      	nop
8000434e:	370c      	adds	r7, #12
80004350:	46bd      	mov	sp, r7
80004352:	bc80      	pop	{r7}
80004354:	4770      	bx	lr

80004356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
80004356:	b480      	push	{r7}
80004358:	b083      	sub	sp, #12
8000435a:	af00      	add	r7, sp, #0
8000435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
8000435e:	bf00      	nop
80004360:	370c      	adds	r7, #12
80004362:	46bd      	mov	sp, r7
80004364:	bc80      	pop	{r7}
80004366:	4770      	bx	lr

80004368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
80004368:	b480      	push	{r7}
8000436a:	b083      	sub	sp, #12
8000436c:	af00      	add	r7, sp, #0
8000436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
80004370:	bf00      	nop
80004372:	370c      	adds	r7, #12
80004374:	46bd      	mov	sp, r7
80004376:	bc80      	pop	{r7}
80004378:	4770      	bx	lr

8000437a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
8000437a:	b480      	push	{r7}
8000437c:	b083      	sub	sp, #12
8000437e:	af00      	add	r7, sp, #0
80004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
80004382:	bf00      	nop
80004384:	370c      	adds	r7, #12
80004386:	46bd      	mov	sp, r7
80004388:	bc80      	pop	{r7}
8000438a:	4770      	bx	lr

8000438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
8000438c:	b480      	push	{r7}
8000438e:	b085      	sub	sp, #20
80004390:	af00      	add	r7, sp, #0
80004392:	6078      	str	r0, [r7, #4]
80004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
80004396:	687b      	ldr	r3, [r7, #4]
80004398:	681b      	ldr	r3, [r3, #0]
8000439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
8000439c:	687b      	ldr	r3, [r7, #4]
8000439e:	4a29      	ldr	r2, [pc, #164]	; (80004444 <TIM_Base_SetConfig+0xb8>)
800043a0:	4293      	cmp	r3, r2
800043a2:	d00b      	beq.n	800043bc <TIM_Base_SetConfig+0x30>
800043a4:	687b      	ldr	r3, [r7, #4]
800043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
800043aa:	d007      	beq.n	800043bc <TIM_Base_SetConfig+0x30>
800043ac:	687b      	ldr	r3, [r7, #4]
800043ae:	4a26      	ldr	r2, [pc, #152]	; (80004448 <TIM_Base_SetConfig+0xbc>)
800043b0:	4293      	cmp	r3, r2
800043b2:	d003      	beq.n	800043bc <TIM_Base_SetConfig+0x30>
800043b4:	687b      	ldr	r3, [r7, #4]
800043b6:	4a25      	ldr	r2, [pc, #148]	; (8000444c <TIM_Base_SetConfig+0xc0>)
800043b8:	4293      	cmp	r3, r2
800043ba:	d108      	bne.n	800043ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
800043bc:	68fb      	ldr	r3, [r7, #12]
800043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
800043c4:	683b      	ldr	r3, [r7, #0]
800043c6:	685b      	ldr	r3, [r3, #4]
800043c8:	68fa      	ldr	r2, [r7, #12]
800043ca:	4313      	orrs	r3, r2
800043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
800043ce:	687b      	ldr	r3, [r7, #4]
800043d0:	4a1c      	ldr	r2, [pc, #112]	; (80004444 <TIM_Base_SetConfig+0xb8>)
800043d2:	4293      	cmp	r3, r2
800043d4:	d00b      	beq.n	800043ee <TIM_Base_SetConfig+0x62>
800043d6:	687b      	ldr	r3, [r7, #4]
800043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
800043dc:	d007      	beq.n	800043ee <TIM_Base_SetConfig+0x62>
800043de:	687b      	ldr	r3, [r7, #4]
800043e0:	4a19      	ldr	r2, [pc, #100]	; (80004448 <TIM_Base_SetConfig+0xbc>)
800043e2:	4293      	cmp	r3, r2
800043e4:	d003      	beq.n	800043ee <TIM_Base_SetConfig+0x62>
800043e6:	687b      	ldr	r3, [r7, #4]
800043e8:	4a18      	ldr	r2, [pc, #96]	; (8000444c <TIM_Base_SetConfig+0xc0>)
800043ea:	4293      	cmp	r3, r2
800043ec:	d108      	bne.n	80004400 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
800043ee:	68fb      	ldr	r3, [r7, #12]
800043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
800043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
800043f6:	683b      	ldr	r3, [r7, #0]
800043f8:	68db      	ldr	r3, [r3, #12]
800043fa:	68fa      	ldr	r2, [r7, #12]
800043fc:	4313      	orrs	r3, r2
800043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
80004400:	68fb      	ldr	r3, [r7, #12]
80004402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
80004406:	683b      	ldr	r3, [r7, #0]
80004408:	695b      	ldr	r3, [r3, #20]
8000440a:	4313      	orrs	r3, r2
8000440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
8000440e:	687b      	ldr	r3, [r7, #4]
80004410:	68fa      	ldr	r2, [r7, #12]
80004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
80004414:	683b      	ldr	r3, [r7, #0]
80004416:	689a      	ldr	r2, [r3, #8]
80004418:	687b      	ldr	r3, [r7, #4]
8000441a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
8000441c:	683b      	ldr	r3, [r7, #0]
8000441e:	681a      	ldr	r2, [r3, #0]
80004420:	687b      	ldr	r3, [r7, #4]
80004422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
80004424:	687b      	ldr	r3, [r7, #4]
80004426:	4a07      	ldr	r2, [pc, #28]	; (80004444 <TIM_Base_SetConfig+0xb8>)
80004428:	4293      	cmp	r3, r2
8000442a:	d103      	bne.n	80004434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
8000442c:	683b      	ldr	r3, [r7, #0]
8000442e:	691a      	ldr	r2, [r3, #16]
80004430:	687b      	ldr	r3, [r7, #4]
80004432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
80004434:	687b      	ldr	r3, [r7, #4]
80004436:	2201      	movs	r2, #1
80004438:	615a      	str	r2, [r3, #20]
}
8000443a:	bf00      	nop
8000443c:	3714      	adds	r7, #20
8000443e:	46bd      	mov	sp, r7
80004440:	bc80      	pop	{r7}
80004442:	4770      	bx	lr
80004444:	40012c00 	.word	0x40012c00
80004448:	40000400 	.word	0x40000400
8000444c:	40000800 	.word	0x40000800

80004450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
80004450:	b480      	push	{r7}
80004452:	b087      	sub	sp, #28
80004454:	af00      	add	r7, sp, #0
80004456:	60f8      	str	r0, [r7, #12]
80004458:	60b9      	str	r1, [r7, #8]
8000445a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
8000445c:	68fb      	ldr	r3, [r7, #12]
8000445e:	6a1b      	ldr	r3, [r3, #32]
80004460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
80004462:	68fb      	ldr	r3, [r7, #12]
80004464:	6a1b      	ldr	r3, [r3, #32]
80004466:	f023 0201 	bic.w	r2, r3, #1
8000446a:	68fb      	ldr	r3, [r7, #12]
8000446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
8000446e:	68fb      	ldr	r3, [r7, #12]
80004470:	699b      	ldr	r3, [r3, #24]
80004472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
80004474:	693b      	ldr	r3, [r7, #16]
80004476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
8000447a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
8000447c:	687b      	ldr	r3, [r7, #4]
8000447e:	011b      	lsls	r3, r3, #4
80004480:	693a      	ldr	r2, [r7, #16]
80004482:	4313      	orrs	r3, r2
80004484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
80004486:	697b      	ldr	r3, [r7, #20]
80004488:	f023 030a 	bic.w	r3, r3, #10
8000448c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
8000448e:	697a      	ldr	r2, [r7, #20]
80004490:	68bb      	ldr	r3, [r7, #8]
80004492:	4313      	orrs	r3, r2
80004494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
80004496:	68fb      	ldr	r3, [r7, #12]
80004498:	693a      	ldr	r2, [r7, #16]
8000449a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
8000449c:	68fb      	ldr	r3, [r7, #12]
8000449e:	697a      	ldr	r2, [r7, #20]
800044a0:	621a      	str	r2, [r3, #32]
}
800044a2:	bf00      	nop
800044a4:	371c      	adds	r7, #28
800044a6:	46bd      	mov	sp, r7
800044a8:	bc80      	pop	{r7}
800044aa:	4770      	bx	lr

800044ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
800044ac:	b480      	push	{r7}
800044ae:	b087      	sub	sp, #28
800044b0:	af00      	add	r7, sp, #0
800044b2:	60f8      	str	r0, [r7, #12]
800044b4:	60b9      	str	r1, [r7, #8]
800044b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
800044b8:	68fb      	ldr	r3, [r7, #12]
800044ba:	6a1b      	ldr	r3, [r3, #32]
800044bc:	f023 0210 	bic.w	r2, r3, #16
800044c0:	68fb      	ldr	r3, [r7, #12]
800044c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
800044c4:	68fb      	ldr	r3, [r7, #12]
800044c6:	699b      	ldr	r3, [r3, #24]
800044c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
800044ca:	68fb      	ldr	r3, [r7, #12]
800044cc:	6a1b      	ldr	r3, [r3, #32]
800044ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
800044d0:	697b      	ldr	r3, [r7, #20]
800044d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
800044d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
800044d8:	687b      	ldr	r3, [r7, #4]
800044da:	031b      	lsls	r3, r3, #12
800044dc:	697a      	ldr	r2, [r7, #20]
800044de:	4313      	orrs	r3, r2
800044e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
800044e2:	693b      	ldr	r3, [r7, #16]
800044e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
800044e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
800044ea:	68bb      	ldr	r3, [r7, #8]
800044ec:	011b      	lsls	r3, r3, #4
800044ee:	693a      	ldr	r2, [r7, #16]
800044f0:	4313      	orrs	r3, r2
800044f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
800044f4:	68fb      	ldr	r3, [r7, #12]
800044f6:	697a      	ldr	r2, [r7, #20]
800044f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
800044fa:	68fb      	ldr	r3, [r7, #12]
800044fc:	693a      	ldr	r2, [r7, #16]
800044fe:	621a      	str	r2, [r3, #32]
}
80004500:	bf00      	nop
80004502:	371c      	adds	r7, #28
80004504:	46bd      	mov	sp, r7
80004506:	bc80      	pop	{r7}
80004508:	4770      	bx	lr

8000450a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
8000450a:	b480      	push	{r7}
8000450c:	b085      	sub	sp, #20
8000450e:	af00      	add	r7, sp, #0
80004510:	6078      	str	r0, [r7, #4]
80004512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
80004514:	687b      	ldr	r3, [r7, #4]
80004516:	689b      	ldr	r3, [r3, #8]
80004518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
8000451a:	68fb      	ldr	r3, [r7, #12]
8000451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
80004522:	683a      	ldr	r2, [r7, #0]
80004524:	68fb      	ldr	r3, [r7, #12]
80004526:	4313      	orrs	r3, r2
80004528:	f043 0307 	orr.w	r3, r3, #7
8000452c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
8000452e:	687b      	ldr	r3, [r7, #4]
80004530:	68fa      	ldr	r2, [r7, #12]
80004532:	609a      	str	r2, [r3, #8]
}
80004534:	bf00      	nop
80004536:	3714      	adds	r7, #20
80004538:	46bd      	mov	sp, r7
8000453a:	bc80      	pop	{r7}
8000453c:	4770      	bx	lr

8000453e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
8000453e:	b480      	push	{r7}
80004540:	b087      	sub	sp, #28
80004542:	af00      	add	r7, sp, #0
80004544:	60f8      	str	r0, [r7, #12]
80004546:	60b9      	str	r1, [r7, #8]
80004548:	607a      	str	r2, [r7, #4]
8000454a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
8000454c:	68fb      	ldr	r3, [r7, #12]
8000454e:	689b      	ldr	r3, [r3, #8]
80004550:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
80004552:	697b      	ldr	r3, [r7, #20]
80004554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
80004558:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
8000455a:	683b      	ldr	r3, [r7, #0]
8000455c:	021a      	lsls	r2, r3, #8
8000455e:	687b      	ldr	r3, [r7, #4]
80004560:	431a      	orrs	r2, r3
80004562:	68bb      	ldr	r3, [r7, #8]
80004564:	4313      	orrs	r3, r2
80004566:	697a      	ldr	r2, [r7, #20]
80004568:	4313      	orrs	r3, r2
8000456a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
8000456c:	68fb      	ldr	r3, [r7, #12]
8000456e:	697a      	ldr	r2, [r7, #20]
80004570:	609a      	str	r2, [r3, #8]
}
80004572:	bf00      	nop
80004574:	371c      	adds	r7, #28
80004576:	46bd      	mov	sp, r7
80004578:	bc80      	pop	{r7}
8000457a:	4770      	bx	lr

8000457c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
8000457c:	b480      	push	{r7}
8000457e:	b085      	sub	sp, #20
80004580:	af00      	add	r7, sp, #0
80004582:	6078      	str	r0, [r7, #4]
80004584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
80004586:	687b      	ldr	r3, [r7, #4]
80004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
8000458c:	2b01      	cmp	r3, #1
8000458e:	d101      	bne.n	80004594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
80004590:	2302      	movs	r3, #2
80004592:	e032      	b.n	800045fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
80004594:	687b      	ldr	r3, [r7, #4]
80004596:	2201      	movs	r2, #1
80004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
8000459c:	687b      	ldr	r3, [r7, #4]
8000459e:	2202      	movs	r2, #2
800045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
800045a4:	687b      	ldr	r3, [r7, #4]
800045a6:	681b      	ldr	r3, [r3, #0]
800045a8:	685b      	ldr	r3, [r3, #4]
800045aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
800045ac:	687b      	ldr	r3, [r7, #4]
800045ae:	681b      	ldr	r3, [r3, #0]
800045b0:	689b      	ldr	r3, [r3, #8]
800045b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
800045b4:	68fb      	ldr	r3, [r7, #12]
800045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800045ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
800045bc:	683b      	ldr	r3, [r7, #0]
800045be:	681b      	ldr	r3, [r3, #0]
800045c0:	68fa      	ldr	r2, [r7, #12]
800045c2:	4313      	orrs	r3, r2
800045c4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
800045c6:	68bb      	ldr	r3, [r7, #8]
800045c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
800045cc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
800045ce:	683b      	ldr	r3, [r7, #0]
800045d0:	685b      	ldr	r3, [r3, #4]
800045d2:	68ba      	ldr	r2, [r7, #8]
800045d4:	4313      	orrs	r3, r2
800045d6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
800045d8:	687b      	ldr	r3, [r7, #4]
800045da:	681b      	ldr	r3, [r3, #0]
800045dc:	68fa      	ldr	r2, [r7, #12]
800045de:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
800045e0:	687b      	ldr	r3, [r7, #4]
800045e2:	681b      	ldr	r3, [r3, #0]
800045e4:	68ba      	ldr	r2, [r7, #8]
800045e6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
800045e8:	687b      	ldr	r3, [r7, #4]
800045ea:	2201      	movs	r2, #1
800045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
800045f0:	687b      	ldr	r3, [r7, #4]
800045f2:	2200      	movs	r2, #0
800045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
800045f8:	2300      	movs	r3, #0
}
800045fa:	4618      	mov	r0, r3
800045fc:	3714      	adds	r7, #20
800045fe:	46bd      	mov	sp, r7
80004600:	bc80      	pop	{r7}
80004602:	4770      	bx	lr

80004604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
80004604:	b480      	push	{r7}
80004606:	b083      	sub	sp, #12
80004608:	af00      	add	r7, sp, #0
8000460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
8000460c:	bf00      	nop
8000460e:	370c      	adds	r7, #12
80004610:	46bd      	mov	sp, r7
80004612:	bc80      	pop	{r7}
80004614:	4770      	bx	lr

80004616 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
80004616:	b480      	push	{r7}
80004618:	b083      	sub	sp, #12
8000461a:	af00      	add	r7, sp, #0
8000461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
8000461e:	bf00      	nop
80004620:	370c      	adds	r7, #12
80004622:	46bd      	mov	sp, r7
80004624:	bc80      	pop	{r7}
80004626:	4770      	bx	lr

80004628 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
80004628:	b084      	sub	sp, #16
8000462a:	b480      	push	{r7}
8000462c:	b083      	sub	sp, #12
8000462e:	af00      	add	r7, sp, #0
80004630:	6078      	str	r0, [r7, #4]
80004632:	f107 0014 	add.w	r0, r7, #20
80004636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
8000463a:	2300      	movs	r3, #0
}
8000463c:	4618      	mov	r0, r3
8000463e:	370c      	adds	r7, #12
80004640:	46bd      	mov	sp, r7
80004642:	bc80      	pop	{r7}
80004644:	b004      	add	sp, #16
80004646:	4770      	bx	lr

80004648 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
80004648:	b480      	push	{r7}
8000464a:	b085      	sub	sp, #20
8000464c:	af00      	add	r7, sp, #0
8000464e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
80004650:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
80004654:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
80004656:	687b      	ldr	r3, [r7, #4]
80004658:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
8000465c:	b29a      	uxth	r2, r3
8000465e:	89fb      	ldrh	r3, [r7, #14]
80004660:	4313      	orrs	r3, r2
80004662:	b29a      	uxth	r2, r3
80004664:	687b      	ldr	r3, [r7, #4]
80004666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
8000466a:	2300      	movs	r3, #0
}
8000466c:	4618      	mov	r0, r3
8000466e:	3714      	adds	r7, #20
80004670:	46bd      	mov	sp, r7
80004672:	bc80      	pop	{r7}
80004674:	4770      	bx	lr

80004676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
80004676:	b480      	push	{r7}
80004678:	b085      	sub	sp, #20
8000467a:	af00      	add	r7, sp, #0
8000467c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
8000467e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
80004682:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
80004684:	687b      	ldr	r3, [r7, #4]
80004686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
8000468a:	b29b      	uxth	r3, r3
8000468c:	b21a      	sxth	r2, r3
8000468e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
80004692:	43db      	mvns	r3, r3
80004694:	b21b      	sxth	r3, r3
80004696:	4013      	ands	r3, r2
80004698:	b21b      	sxth	r3, r3
8000469a:	b29a      	uxth	r2, r3
8000469c:	687b      	ldr	r3, [r7, #4]
8000469e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
800046a2:	2300      	movs	r3, #0
}
800046a4:	4618      	mov	r0, r3
800046a6:	3714      	adds	r7, #20
800046a8:	46bd      	mov	sp, r7
800046aa:	bc80      	pop	{r7}
800046ac:	4770      	bx	lr

800046ae <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
800046ae:	b480      	push	{r7}
800046b0:	b083      	sub	sp, #12
800046b2:	af00      	add	r7, sp, #0
800046b4:	6078      	str	r0, [r7, #4]
800046b6:	460b      	mov	r3, r1
800046b8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
800046ba:	2300      	movs	r3, #0
}
800046bc:	4618      	mov	r0, r3
800046be:	370c      	adds	r7, #12
800046c0:	46bd      	mov	sp, r7
800046c2:	bc80      	pop	{r7}
800046c4:	4770      	bx	lr

800046c6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
800046c6:	b084      	sub	sp, #16
800046c8:	b580      	push	{r7, lr}
800046ca:	b082      	sub	sp, #8
800046cc:	af00      	add	r7, sp, #0
800046ce:	6078      	str	r0, [r7, #4]
800046d0:	f107 0014 	add.w	r0, r7, #20
800046d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
800046d8:	687b      	ldr	r3, [r7, #4]
800046da:	2201      	movs	r2, #1
800046dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
800046e0:	687b      	ldr	r3, [r7, #4]
800046e2:	2200      	movs	r2, #0
800046e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
800046e8:	687b      	ldr	r3, [r7, #4]
800046ea:	2200      	movs	r2, #0
800046ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
800046f0:	687b      	ldr	r3, [r7, #4]
800046f2:	2200      	movs	r2, #0
800046f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
800046f8:	6878      	ldr	r0, [r7, #4]
800046fa:	f7ff ffa5 	bl	80004648 <USB_EnableGlobalInt>

  return HAL_OK;
800046fe:	2300      	movs	r3, #0
}
80004700:	4618      	mov	r0, r3
80004702:	3708      	adds	r7, #8
80004704:	46bd      	mov	sp, r7
80004706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
8000470a:	b004      	add	sp, #16
8000470c:	4770      	bx	lr
	...

80004710 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
80004710:	b490      	push	{r4, r7}
80004712:	b084      	sub	sp, #16
80004714:	af00      	add	r7, sp, #0
80004716:	6078      	str	r0, [r7, #4]
80004718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
8000471a:	2300      	movs	r3, #0
8000471c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
8000471e:	687a      	ldr	r2, [r7, #4]
80004720:	683b      	ldr	r3, [r7, #0]
80004722:	781b      	ldrb	r3, [r3, #0]
80004724:	009b      	lsls	r3, r3, #2
80004726:	4413      	add	r3, r2
80004728:	881b      	ldrh	r3, [r3, #0]
8000472a:	b29b      	uxth	r3, r3
8000472c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
80004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004734:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
80004736:	683b      	ldr	r3, [r7, #0]
80004738:	78db      	ldrb	r3, [r3, #3]
8000473a:	2b03      	cmp	r3, #3
8000473c:	d819      	bhi.n	80004772 <USB_ActivateEndpoint+0x62>
8000473e:	a201      	add	r2, pc, #4	; (adr r2, 80004744 <USB_ActivateEndpoint+0x34>)
80004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
80004744:	80004755 	.word	0x80004755
80004748:	80004769 	.word	0x80004769
8000474c:	80004779 	.word	0x80004779
80004750:	8000475f 	.word	0x8000475f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
80004754:	89bb      	ldrh	r3, [r7, #12]
80004756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
8000475a:	81bb      	strh	r3, [r7, #12]
      break;
8000475c:	e00d      	b.n	8000477a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
8000475e:	89bb      	ldrh	r3, [r7, #12]
80004760:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
80004764:	81bb      	strh	r3, [r7, #12]
      break;
80004766:	e008      	b.n	8000477a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
80004768:	89bb      	ldrh	r3, [r7, #12]
8000476a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
8000476e:	81bb      	strh	r3, [r7, #12]
      break;
80004770:	e003      	b.n	8000477a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
80004772:	2301      	movs	r3, #1
80004774:	73fb      	strb	r3, [r7, #15]
      break;
80004776:	e000      	b.n	8000477a <USB_ActivateEndpoint+0x6a>
      break;
80004778:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
8000477a:	687a      	ldr	r2, [r7, #4]
8000477c:	683b      	ldr	r3, [r7, #0]
8000477e:	781b      	ldrb	r3, [r3, #0]
80004780:	009b      	lsls	r3, r3, #2
80004782:	441a      	add	r2, r3
80004784:	89bb      	ldrh	r3, [r7, #12]
80004786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
8000478a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
8000478e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
80004792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
80004796:	b29b      	uxth	r3, r3
80004798:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
8000479a:	687a      	ldr	r2, [r7, #4]
8000479c:	683b      	ldr	r3, [r7, #0]
8000479e:	781b      	ldrb	r3, [r3, #0]
800047a0:	009b      	lsls	r3, r3, #2
800047a2:	4413      	add	r3, r2
800047a4:	881b      	ldrh	r3, [r3, #0]
800047a6:	b29b      	uxth	r3, r3
800047a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
800047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800047b0:	b29a      	uxth	r2, r3
800047b2:	683b      	ldr	r3, [r7, #0]
800047b4:	781b      	ldrb	r3, [r3, #0]
800047b6:	b29b      	uxth	r3, r3
800047b8:	4313      	orrs	r3, r2
800047ba:	b29c      	uxth	r4, r3
800047bc:	687a      	ldr	r2, [r7, #4]
800047be:	683b      	ldr	r3, [r7, #0]
800047c0:	781b      	ldrb	r3, [r3, #0]
800047c2:	009b      	lsls	r3, r3, #2
800047c4:	441a      	add	r2, r3
800047c6:	4b8a      	ldr	r3, [pc, #552]	; (800049f0 <USB_ActivateEndpoint+0x2e0>)
800047c8:	4323      	orrs	r3, r4
800047ca:	b29b      	uxth	r3, r3
800047cc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
800047ce:	683b      	ldr	r3, [r7, #0]
800047d0:	7b1b      	ldrb	r3, [r3, #12]
800047d2:	2b00      	cmp	r3, #0
800047d4:	f040 8112 	bne.w	800049fc <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
800047d8:	683b      	ldr	r3, [r7, #0]
800047da:	785b      	ldrb	r3, [r3, #1]
800047dc:	2b00      	cmp	r3, #0
800047de:	d067      	beq.n	800048b0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
800047e0:	687c      	ldr	r4, [r7, #4]
800047e2:	687b      	ldr	r3, [r7, #4]
800047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
800047e8:	b29b      	uxth	r3, r3
800047ea:	441c      	add	r4, r3
800047ec:	683b      	ldr	r3, [r7, #0]
800047ee:	781b      	ldrb	r3, [r3, #0]
800047f0:	011b      	lsls	r3, r3, #4
800047f2:	4423      	add	r3, r4
800047f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
800047f8:	461c      	mov	r4, r3
800047fa:	683b      	ldr	r3, [r7, #0]
800047fc:	88db      	ldrh	r3, [r3, #6]
800047fe:	085b      	lsrs	r3, r3, #1
80004800:	b29b      	uxth	r3, r3
80004802:	005b      	lsls	r3, r3, #1
80004804:	b29b      	uxth	r3, r3
80004806:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
80004808:	687a      	ldr	r2, [r7, #4]
8000480a:	683b      	ldr	r3, [r7, #0]
8000480c:	781b      	ldrb	r3, [r3, #0]
8000480e:	009b      	lsls	r3, r3, #2
80004810:	4413      	add	r3, r2
80004812:	881b      	ldrh	r3, [r3, #0]
80004814:	b29c      	uxth	r4, r3
80004816:	4623      	mov	r3, r4
80004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
8000481c:	2b00      	cmp	r3, #0
8000481e:	d014      	beq.n	8000484a <USB_ActivateEndpoint+0x13a>
80004820:	687a      	ldr	r2, [r7, #4]
80004822:	683b      	ldr	r3, [r7, #0]
80004824:	781b      	ldrb	r3, [r3, #0]
80004826:	009b      	lsls	r3, r3, #2
80004828:	4413      	add	r3, r2
8000482a:	881b      	ldrh	r3, [r3, #0]
8000482c:	b29b      	uxth	r3, r3
8000482e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004836:	b29c      	uxth	r4, r3
80004838:	687a      	ldr	r2, [r7, #4]
8000483a:	683b      	ldr	r3, [r7, #0]
8000483c:	781b      	ldrb	r3, [r3, #0]
8000483e:	009b      	lsls	r3, r3, #2
80004840:	441a      	add	r2, r3
80004842:	4b6c      	ldr	r3, [pc, #432]	; (800049f4 <USB_ActivateEndpoint+0x2e4>)
80004844:	4323      	orrs	r3, r4
80004846:	b29b      	uxth	r3, r3
80004848:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
8000484a:	683b      	ldr	r3, [r7, #0]
8000484c:	78db      	ldrb	r3, [r3, #3]
8000484e:	2b01      	cmp	r3, #1
80004850:	d018      	beq.n	80004884 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
80004852:	687a      	ldr	r2, [r7, #4]
80004854:	683b      	ldr	r3, [r7, #0]
80004856:	781b      	ldrb	r3, [r3, #0]
80004858:	009b      	lsls	r3, r3, #2
8000485a:	4413      	add	r3, r2
8000485c:	881b      	ldrh	r3, [r3, #0]
8000485e:	b29b      	uxth	r3, r3
80004860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80004868:	b29c      	uxth	r4, r3
8000486a:	f084 0320 	eor.w	r3, r4, #32
8000486e:	b29c      	uxth	r4, r3
80004870:	687a      	ldr	r2, [r7, #4]
80004872:	683b      	ldr	r3, [r7, #0]
80004874:	781b      	ldrb	r3, [r3, #0]
80004876:	009b      	lsls	r3, r3, #2
80004878:	441a      	add	r2, r3
8000487a:	4b5d      	ldr	r3, [pc, #372]	; (800049f0 <USB_ActivateEndpoint+0x2e0>)
8000487c:	4323      	orrs	r3, r4
8000487e:	b29b      	uxth	r3, r3
80004880:	8013      	strh	r3, [r2, #0]
80004882:	e22b      	b.n	80004cdc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
80004884:	687a      	ldr	r2, [r7, #4]
80004886:	683b      	ldr	r3, [r7, #0]
80004888:	781b      	ldrb	r3, [r3, #0]
8000488a:	009b      	lsls	r3, r3, #2
8000488c:	4413      	add	r3, r2
8000488e:	881b      	ldrh	r3, [r3, #0]
80004890:	b29b      	uxth	r3, r3
80004892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
8000489a:	b29c      	uxth	r4, r3
8000489c:	687a      	ldr	r2, [r7, #4]
8000489e:	683b      	ldr	r3, [r7, #0]
800048a0:	781b      	ldrb	r3, [r3, #0]
800048a2:	009b      	lsls	r3, r3, #2
800048a4:	441a      	add	r2, r3
800048a6:	4b52      	ldr	r3, [pc, #328]	; (800049f0 <USB_ActivateEndpoint+0x2e0>)
800048a8:	4323      	orrs	r3, r4
800048aa:	b29b      	uxth	r3, r3
800048ac:	8013      	strh	r3, [r2, #0]
800048ae:	e215      	b.n	80004cdc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
800048b0:	687c      	ldr	r4, [r7, #4]
800048b2:	687b      	ldr	r3, [r7, #4]
800048b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
800048b8:	b29b      	uxth	r3, r3
800048ba:	441c      	add	r4, r3
800048bc:	683b      	ldr	r3, [r7, #0]
800048be:	781b      	ldrb	r3, [r3, #0]
800048c0:	011b      	lsls	r3, r3, #4
800048c2:	4423      	add	r3, r4
800048c4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
800048c8:	461c      	mov	r4, r3
800048ca:	683b      	ldr	r3, [r7, #0]
800048cc:	88db      	ldrh	r3, [r3, #6]
800048ce:	085b      	lsrs	r3, r3, #1
800048d0:	b29b      	uxth	r3, r3
800048d2:	005b      	lsls	r3, r3, #1
800048d4:	b29b      	uxth	r3, r3
800048d6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
800048d8:	687c      	ldr	r4, [r7, #4]
800048da:	687b      	ldr	r3, [r7, #4]
800048dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
800048e0:	b29b      	uxth	r3, r3
800048e2:	441c      	add	r4, r3
800048e4:	683b      	ldr	r3, [r7, #0]
800048e6:	781b      	ldrb	r3, [r3, #0]
800048e8:	011b      	lsls	r3, r3, #4
800048ea:	4423      	add	r3, r4
800048ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
800048f0:	461c      	mov	r4, r3
800048f2:	683b      	ldr	r3, [r7, #0]
800048f4:	691b      	ldr	r3, [r3, #16]
800048f6:	2b00      	cmp	r3, #0
800048f8:	d10e      	bne.n	80004918 <USB_ActivateEndpoint+0x208>
800048fa:	8823      	ldrh	r3, [r4, #0]
800048fc:	b29b      	uxth	r3, r3
800048fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
80004902:	b29b      	uxth	r3, r3
80004904:	8023      	strh	r3, [r4, #0]
80004906:	8823      	ldrh	r3, [r4, #0]
80004908:	b29b      	uxth	r3, r3
8000490a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
8000490e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
80004912:	b29b      	uxth	r3, r3
80004914:	8023      	strh	r3, [r4, #0]
80004916:	e02d      	b.n	80004974 <USB_ActivateEndpoint+0x264>
80004918:	683b      	ldr	r3, [r7, #0]
8000491a:	691b      	ldr	r3, [r3, #16]
8000491c:	2b3e      	cmp	r3, #62	; 0x3e
8000491e:	d812      	bhi.n	80004946 <USB_ActivateEndpoint+0x236>
80004920:	683b      	ldr	r3, [r7, #0]
80004922:	691b      	ldr	r3, [r3, #16]
80004924:	085b      	lsrs	r3, r3, #1
80004926:	60bb      	str	r3, [r7, #8]
80004928:	683b      	ldr	r3, [r7, #0]
8000492a:	691b      	ldr	r3, [r3, #16]
8000492c:	f003 0301 	and.w	r3, r3, #1
80004930:	2b00      	cmp	r3, #0
80004932:	d002      	beq.n	8000493a <USB_ActivateEndpoint+0x22a>
80004934:	68bb      	ldr	r3, [r7, #8]
80004936:	3301      	adds	r3, #1
80004938:	60bb      	str	r3, [r7, #8]
8000493a:	68bb      	ldr	r3, [r7, #8]
8000493c:	b29b      	uxth	r3, r3
8000493e:	029b      	lsls	r3, r3, #10
80004940:	b29b      	uxth	r3, r3
80004942:	8023      	strh	r3, [r4, #0]
80004944:	e016      	b.n	80004974 <USB_ActivateEndpoint+0x264>
80004946:	683b      	ldr	r3, [r7, #0]
80004948:	691b      	ldr	r3, [r3, #16]
8000494a:	095b      	lsrs	r3, r3, #5
8000494c:	60bb      	str	r3, [r7, #8]
8000494e:	683b      	ldr	r3, [r7, #0]
80004950:	691b      	ldr	r3, [r3, #16]
80004952:	f003 031f 	and.w	r3, r3, #31
80004956:	2b00      	cmp	r3, #0
80004958:	d102      	bne.n	80004960 <USB_ActivateEndpoint+0x250>
8000495a:	68bb      	ldr	r3, [r7, #8]
8000495c:	3b01      	subs	r3, #1
8000495e:	60bb      	str	r3, [r7, #8]
80004960:	68bb      	ldr	r3, [r7, #8]
80004962:	b29b      	uxth	r3, r3
80004964:	029b      	lsls	r3, r3, #10
80004966:	b29b      	uxth	r3, r3
80004968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
8000496c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
80004970:	b29b      	uxth	r3, r3
80004972:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
80004974:	687a      	ldr	r2, [r7, #4]
80004976:	683b      	ldr	r3, [r7, #0]
80004978:	781b      	ldrb	r3, [r3, #0]
8000497a:	009b      	lsls	r3, r3, #2
8000497c:	4413      	add	r3, r2
8000497e:	881b      	ldrh	r3, [r3, #0]
80004980:	b29c      	uxth	r4, r3
80004982:	4623      	mov	r3, r4
80004984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80004988:	2b00      	cmp	r3, #0
8000498a:	d014      	beq.n	800049b6 <USB_ActivateEndpoint+0x2a6>
8000498c:	687a      	ldr	r2, [r7, #4]
8000498e:	683b      	ldr	r3, [r7, #0]
80004990:	781b      	ldrb	r3, [r3, #0]
80004992:	009b      	lsls	r3, r3, #2
80004994:	4413      	add	r3, r2
80004996:	881b      	ldrh	r3, [r3, #0]
80004998:	b29b      	uxth	r3, r3
8000499a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
8000499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800049a2:	b29c      	uxth	r4, r3
800049a4:	687a      	ldr	r2, [r7, #4]
800049a6:	683b      	ldr	r3, [r7, #0]
800049a8:	781b      	ldrb	r3, [r3, #0]
800049aa:	009b      	lsls	r3, r3, #2
800049ac:	441a      	add	r2, r3
800049ae:	4b12      	ldr	r3, [pc, #72]	; (800049f8 <USB_ActivateEndpoint+0x2e8>)
800049b0:	4323      	orrs	r3, r4
800049b2:	b29b      	uxth	r3, r3
800049b4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
800049b6:	687a      	ldr	r2, [r7, #4]
800049b8:	683b      	ldr	r3, [r7, #0]
800049ba:	781b      	ldrb	r3, [r3, #0]
800049bc:	009b      	lsls	r3, r3, #2
800049be:	4413      	add	r3, r2
800049c0:	881b      	ldrh	r3, [r3, #0]
800049c2:	b29b      	uxth	r3, r3
800049c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
800049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800049cc:	b29c      	uxth	r4, r3
800049ce:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
800049d2:	b29c      	uxth	r4, r3
800049d4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
800049d8:	b29c      	uxth	r4, r3
800049da:	687a      	ldr	r2, [r7, #4]
800049dc:	683b      	ldr	r3, [r7, #0]
800049de:	781b      	ldrb	r3, [r3, #0]
800049e0:	009b      	lsls	r3, r3, #2
800049e2:	441a      	add	r2, r3
800049e4:	4b02      	ldr	r3, [pc, #8]	; (800049f0 <USB_ActivateEndpoint+0x2e0>)
800049e6:	4323      	orrs	r3, r4
800049e8:	b29b      	uxth	r3, r3
800049ea:	8013      	strh	r3, [r2, #0]
800049ec:	e176      	b.n	80004cdc <USB_ActivateEndpoint+0x5cc>
800049ee:	bf00      	nop
800049f0:	ffff8080 	.word	0xffff8080
800049f4:	ffff80c0 	.word	0xffff80c0
800049f8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
800049fc:	687a      	ldr	r2, [r7, #4]
800049fe:	683b      	ldr	r3, [r7, #0]
80004a00:	781b      	ldrb	r3, [r3, #0]
80004a02:	009b      	lsls	r3, r3, #2
80004a04:	4413      	add	r3, r2
80004a06:	881b      	ldrh	r3, [r3, #0]
80004a08:	b29b      	uxth	r3, r3
80004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004a12:	b29c      	uxth	r4, r3
80004a14:	687a      	ldr	r2, [r7, #4]
80004a16:	683b      	ldr	r3, [r7, #0]
80004a18:	781b      	ldrb	r3, [r3, #0]
80004a1a:	009b      	lsls	r3, r3, #2
80004a1c:	441a      	add	r2, r3
80004a1e:	4b96      	ldr	r3, [pc, #600]	; (80004c78 <USB_ActivateEndpoint+0x568>)
80004a20:	4323      	orrs	r3, r4
80004a22:	b29b      	uxth	r3, r3
80004a24:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
80004a26:	687c      	ldr	r4, [r7, #4]
80004a28:	687b      	ldr	r3, [r7, #4]
80004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80004a2e:	b29b      	uxth	r3, r3
80004a30:	441c      	add	r4, r3
80004a32:	683b      	ldr	r3, [r7, #0]
80004a34:	781b      	ldrb	r3, [r3, #0]
80004a36:	011b      	lsls	r3, r3, #4
80004a38:	4423      	add	r3, r4
80004a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
80004a3e:	461c      	mov	r4, r3
80004a40:	683b      	ldr	r3, [r7, #0]
80004a42:	891b      	ldrh	r3, [r3, #8]
80004a44:	085b      	lsrs	r3, r3, #1
80004a46:	b29b      	uxth	r3, r3
80004a48:	005b      	lsls	r3, r3, #1
80004a4a:	b29b      	uxth	r3, r3
80004a4c:	8023      	strh	r3, [r4, #0]
80004a4e:	687c      	ldr	r4, [r7, #4]
80004a50:	687b      	ldr	r3, [r7, #4]
80004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80004a56:	b29b      	uxth	r3, r3
80004a58:	441c      	add	r4, r3
80004a5a:	683b      	ldr	r3, [r7, #0]
80004a5c:	781b      	ldrb	r3, [r3, #0]
80004a5e:	011b      	lsls	r3, r3, #4
80004a60:	4423      	add	r3, r4
80004a62:	f503 6381 	add.w	r3, r3, #1032	; 0x408
80004a66:	461c      	mov	r4, r3
80004a68:	683b      	ldr	r3, [r7, #0]
80004a6a:	895b      	ldrh	r3, [r3, #10]
80004a6c:	085b      	lsrs	r3, r3, #1
80004a6e:	b29b      	uxth	r3, r3
80004a70:	005b      	lsls	r3, r3, #1
80004a72:	b29b      	uxth	r3, r3
80004a74:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
80004a76:	683b      	ldr	r3, [r7, #0]
80004a78:	785b      	ldrb	r3, [r3, #1]
80004a7a:	2b00      	cmp	r3, #0
80004a7c:	f040 8088 	bne.w	80004b90 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
80004a80:	687a      	ldr	r2, [r7, #4]
80004a82:	683b      	ldr	r3, [r7, #0]
80004a84:	781b      	ldrb	r3, [r3, #0]
80004a86:	009b      	lsls	r3, r3, #2
80004a88:	4413      	add	r3, r2
80004a8a:	881b      	ldrh	r3, [r3, #0]
80004a8c:	b29c      	uxth	r4, r3
80004a8e:	4623      	mov	r3, r4
80004a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80004a94:	2b00      	cmp	r3, #0
80004a96:	d014      	beq.n	80004ac2 <USB_ActivateEndpoint+0x3b2>
80004a98:	687a      	ldr	r2, [r7, #4]
80004a9a:	683b      	ldr	r3, [r7, #0]
80004a9c:	781b      	ldrb	r3, [r3, #0]
80004a9e:	009b      	lsls	r3, r3, #2
80004aa0:	4413      	add	r3, r2
80004aa2:	881b      	ldrh	r3, [r3, #0]
80004aa4:	b29b      	uxth	r3, r3
80004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004aae:	b29c      	uxth	r4, r3
80004ab0:	687a      	ldr	r2, [r7, #4]
80004ab2:	683b      	ldr	r3, [r7, #0]
80004ab4:	781b      	ldrb	r3, [r3, #0]
80004ab6:	009b      	lsls	r3, r3, #2
80004ab8:	441a      	add	r2, r3
80004aba:	4b70      	ldr	r3, [pc, #448]	; (80004c7c <USB_ActivateEndpoint+0x56c>)
80004abc:	4323      	orrs	r3, r4
80004abe:	b29b      	uxth	r3, r3
80004ac0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
80004ac2:	687a      	ldr	r2, [r7, #4]
80004ac4:	683b      	ldr	r3, [r7, #0]
80004ac6:	781b      	ldrb	r3, [r3, #0]
80004ac8:	009b      	lsls	r3, r3, #2
80004aca:	4413      	add	r3, r2
80004acc:	881b      	ldrh	r3, [r3, #0]
80004ace:	b29c      	uxth	r4, r3
80004ad0:	4623      	mov	r3, r4
80004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
80004ad6:	2b00      	cmp	r3, #0
80004ad8:	d014      	beq.n	80004b04 <USB_ActivateEndpoint+0x3f4>
80004ada:	687a      	ldr	r2, [r7, #4]
80004adc:	683b      	ldr	r3, [r7, #0]
80004ade:	781b      	ldrb	r3, [r3, #0]
80004ae0:	009b      	lsls	r3, r3, #2
80004ae2:	4413      	add	r3, r2
80004ae4:	881b      	ldrh	r3, [r3, #0]
80004ae6:	b29b      	uxth	r3, r3
80004ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004af0:	b29c      	uxth	r4, r3
80004af2:	687a      	ldr	r2, [r7, #4]
80004af4:	683b      	ldr	r3, [r7, #0]
80004af6:	781b      	ldrb	r3, [r3, #0]
80004af8:	009b      	lsls	r3, r3, #2
80004afa:	441a      	add	r2, r3
80004afc:	4b60      	ldr	r3, [pc, #384]	; (80004c80 <USB_ActivateEndpoint+0x570>)
80004afe:	4323      	orrs	r3, r4
80004b00:	b29b      	uxth	r3, r3
80004b02:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
80004b04:	687a      	ldr	r2, [r7, #4]
80004b06:	683b      	ldr	r3, [r7, #0]
80004b08:	781b      	ldrb	r3, [r3, #0]
80004b0a:	009b      	lsls	r3, r3, #2
80004b0c:	4413      	add	r3, r2
80004b0e:	881b      	ldrh	r3, [r3, #0]
80004b10:	b29b      	uxth	r3, r3
80004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004b1a:	b29c      	uxth	r4, r3
80004b1c:	687a      	ldr	r2, [r7, #4]
80004b1e:	683b      	ldr	r3, [r7, #0]
80004b20:	781b      	ldrb	r3, [r3, #0]
80004b22:	009b      	lsls	r3, r3, #2
80004b24:	441a      	add	r2, r3
80004b26:	4b56      	ldr	r3, [pc, #344]	; (80004c80 <USB_ActivateEndpoint+0x570>)
80004b28:	4323      	orrs	r3, r4
80004b2a:	b29b      	uxth	r3, r3
80004b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
80004b2e:	687a      	ldr	r2, [r7, #4]
80004b30:	683b      	ldr	r3, [r7, #0]
80004b32:	781b      	ldrb	r3, [r3, #0]
80004b34:	009b      	lsls	r3, r3, #2
80004b36:	4413      	add	r3, r2
80004b38:	881b      	ldrh	r3, [r3, #0]
80004b3a:	b29b      	uxth	r3, r3
80004b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
80004b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004b44:	b29c      	uxth	r4, r3
80004b46:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
80004b4a:	b29c      	uxth	r4, r3
80004b4c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
80004b50:	b29c      	uxth	r4, r3
80004b52:	687a      	ldr	r2, [r7, #4]
80004b54:	683b      	ldr	r3, [r7, #0]
80004b56:	781b      	ldrb	r3, [r3, #0]
80004b58:	009b      	lsls	r3, r3, #2
80004b5a:	441a      	add	r2, r3
80004b5c:	4b49      	ldr	r3, [pc, #292]	; (80004c84 <USB_ActivateEndpoint+0x574>)
80004b5e:	4323      	orrs	r3, r4
80004b60:	b29b      	uxth	r3, r3
80004b62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
80004b64:	687a      	ldr	r2, [r7, #4]
80004b66:	683b      	ldr	r3, [r7, #0]
80004b68:	781b      	ldrb	r3, [r3, #0]
80004b6a:	009b      	lsls	r3, r3, #2
80004b6c:	4413      	add	r3, r2
80004b6e:	881b      	ldrh	r3, [r3, #0]
80004b70:	b29b      	uxth	r3, r3
80004b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80004b7a:	b29c      	uxth	r4, r3
80004b7c:	687a      	ldr	r2, [r7, #4]
80004b7e:	683b      	ldr	r3, [r7, #0]
80004b80:	781b      	ldrb	r3, [r3, #0]
80004b82:	009b      	lsls	r3, r3, #2
80004b84:	441a      	add	r2, r3
80004b86:	4b3f      	ldr	r3, [pc, #252]	; (80004c84 <USB_ActivateEndpoint+0x574>)
80004b88:	4323      	orrs	r3, r4
80004b8a:	b29b      	uxth	r3, r3
80004b8c:	8013      	strh	r3, [r2, #0]
80004b8e:	e0a5      	b.n	80004cdc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
80004b90:	687a      	ldr	r2, [r7, #4]
80004b92:	683b      	ldr	r3, [r7, #0]
80004b94:	781b      	ldrb	r3, [r3, #0]
80004b96:	009b      	lsls	r3, r3, #2
80004b98:	4413      	add	r3, r2
80004b9a:	881b      	ldrh	r3, [r3, #0]
80004b9c:	b29c      	uxth	r4, r3
80004b9e:	4623      	mov	r3, r4
80004ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80004ba4:	2b00      	cmp	r3, #0
80004ba6:	d014      	beq.n	80004bd2 <USB_ActivateEndpoint+0x4c2>
80004ba8:	687a      	ldr	r2, [r7, #4]
80004baa:	683b      	ldr	r3, [r7, #0]
80004bac:	781b      	ldrb	r3, [r3, #0]
80004bae:	009b      	lsls	r3, r3, #2
80004bb0:	4413      	add	r3, r2
80004bb2:	881b      	ldrh	r3, [r3, #0]
80004bb4:	b29b      	uxth	r3, r3
80004bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004bbe:	b29c      	uxth	r4, r3
80004bc0:	687a      	ldr	r2, [r7, #4]
80004bc2:	683b      	ldr	r3, [r7, #0]
80004bc4:	781b      	ldrb	r3, [r3, #0]
80004bc6:	009b      	lsls	r3, r3, #2
80004bc8:	441a      	add	r2, r3
80004bca:	4b2c      	ldr	r3, [pc, #176]	; (80004c7c <USB_ActivateEndpoint+0x56c>)
80004bcc:	4323      	orrs	r3, r4
80004bce:	b29b      	uxth	r3, r3
80004bd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
80004bd2:	687a      	ldr	r2, [r7, #4]
80004bd4:	683b      	ldr	r3, [r7, #0]
80004bd6:	781b      	ldrb	r3, [r3, #0]
80004bd8:	009b      	lsls	r3, r3, #2
80004bda:	4413      	add	r3, r2
80004bdc:	881b      	ldrh	r3, [r3, #0]
80004bde:	b29c      	uxth	r4, r3
80004be0:	4623      	mov	r3, r4
80004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
80004be6:	2b00      	cmp	r3, #0
80004be8:	d014      	beq.n	80004c14 <USB_ActivateEndpoint+0x504>
80004bea:	687a      	ldr	r2, [r7, #4]
80004bec:	683b      	ldr	r3, [r7, #0]
80004bee:	781b      	ldrb	r3, [r3, #0]
80004bf0:	009b      	lsls	r3, r3, #2
80004bf2:	4413      	add	r3, r2
80004bf4:	881b      	ldrh	r3, [r3, #0]
80004bf6:	b29b      	uxth	r3, r3
80004bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004c00:	b29c      	uxth	r4, r3
80004c02:	687a      	ldr	r2, [r7, #4]
80004c04:	683b      	ldr	r3, [r7, #0]
80004c06:	781b      	ldrb	r3, [r3, #0]
80004c08:	009b      	lsls	r3, r3, #2
80004c0a:	441a      	add	r2, r3
80004c0c:	4b1c      	ldr	r3, [pc, #112]	; (80004c80 <USB_ActivateEndpoint+0x570>)
80004c0e:	4323      	orrs	r3, r4
80004c10:	b29b      	uxth	r3, r3
80004c12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
80004c14:	687a      	ldr	r2, [r7, #4]
80004c16:	683b      	ldr	r3, [r7, #0]
80004c18:	781b      	ldrb	r3, [r3, #0]
80004c1a:	009b      	lsls	r3, r3, #2
80004c1c:	4413      	add	r3, r2
80004c1e:	881b      	ldrh	r3, [r3, #0]
80004c20:	b29b      	uxth	r3, r3
80004c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004c2a:	b29c      	uxth	r4, r3
80004c2c:	687a      	ldr	r2, [r7, #4]
80004c2e:	683b      	ldr	r3, [r7, #0]
80004c30:	781b      	ldrb	r3, [r3, #0]
80004c32:	009b      	lsls	r3, r3, #2
80004c34:	441a      	add	r2, r3
80004c36:	4b11      	ldr	r3, [pc, #68]	; (80004c7c <USB_ActivateEndpoint+0x56c>)
80004c38:	4323      	orrs	r3, r4
80004c3a:	b29b      	uxth	r3, r3
80004c3c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
80004c3e:	683b      	ldr	r3, [r7, #0]
80004c40:	78db      	ldrb	r3, [r3, #3]
80004c42:	2b01      	cmp	r3, #1
80004c44:	d020      	beq.n	80004c88 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
80004c46:	687a      	ldr	r2, [r7, #4]
80004c48:	683b      	ldr	r3, [r7, #0]
80004c4a:	781b      	ldrb	r3, [r3, #0]
80004c4c:	009b      	lsls	r3, r3, #2
80004c4e:	4413      	add	r3, r2
80004c50:	881b      	ldrh	r3, [r3, #0]
80004c52:	b29b      	uxth	r3, r3
80004c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80004c5c:	b29c      	uxth	r4, r3
80004c5e:	f084 0320 	eor.w	r3, r4, #32
80004c62:	b29c      	uxth	r4, r3
80004c64:	687a      	ldr	r2, [r7, #4]
80004c66:	683b      	ldr	r3, [r7, #0]
80004c68:	781b      	ldrb	r3, [r3, #0]
80004c6a:	009b      	lsls	r3, r3, #2
80004c6c:	441a      	add	r2, r3
80004c6e:	4b05      	ldr	r3, [pc, #20]	; (80004c84 <USB_ActivateEndpoint+0x574>)
80004c70:	4323      	orrs	r3, r4
80004c72:	b29b      	uxth	r3, r3
80004c74:	8013      	strh	r3, [r2, #0]
80004c76:	e01c      	b.n	80004cb2 <USB_ActivateEndpoint+0x5a2>
80004c78:	ffff8180 	.word	0xffff8180
80004c7c:	ffffc080 	.word	0xffffc080
80004c80:	ffff80c0 	.word	0xffff80c0
80004c84:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
80004c88:	687a      	ldr	r2, [r7, #4]
80004c8a:	683b      	ldr	r3, [r7, #0]
80004c8c:	781b      	ldrb	r3, [r3, #0]
80004c8e:	009b      	lsls	r3, r3, #2
80004c90:	4413      	add	r3, r2
80004c92:	881b      	ldrh	r3, [r3, #0]
80004c94:	b29b      	uxth	r3, r3
80004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80004c9e:	b29c      	uxth	r4, r3
80004ca0:	687a      	ldr	r2, [r7, #4]
80004ca2:	683b      	ldr	r3, [r7, #0]
80004ca4:	781b      	ldrb	r3, [r3, #0]
80004ca6:	009b      	lsls	r3, r3, #2
80004ca8:	441a      	add	r2, r3
80004caa:	4b0f      	ldr	r3, [pc, #60]	; (80004ce8 <USB_ActivateEndpoint+0x5d8>)
80004cac:	4323      	orrs	r3, r4
80004cae:	b29b      	uxth	r3, r3
80004cb0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
80004cb2:	687a      	ldr	r2, [r7, #4]
80004cb4:	683b      	ldr	r3, [r7, #0]
80004cb6:	781b      	ldrb	r3, [r3, #0]
80004cb8:	009b      	lsls	r3, r3, #2
80004cba:	4413      	add	r3, r2
80004cbc:	881b      	ldrh	r3, [r3, #0]
80004cbe:	b29b      	uxth	r3, r3
80004cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
80004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004cc8:	b29c      	uxth	r4, r3
80004cca:	687a      	ldr	r2, [r7, #4]
80004ccc:	683b      	ldr	r3, [r7, #0]
80004cce:	781b      	ldrb	r3, [r3, #0]
80004cd0:	009b      	lsls	r3, r3, #2
80004cd2:	441a      	add	r2, r3
80004cd4:	4b04      	ldr	r3, [pc, #16]	; (80004ce8 <USB_ActivateEndpoint+0x5d8>)
80004cd6:	4323      	orrs	r3, r4
80004cd8:	b29b      	uxth	r3, r3
80004cda:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
80004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
80004cde:	4618      	mov	r0, r3
80004ce0:	3710      	adds	r7, #16
80004ce2:	46bd      	mov	sp, r7
80004ce4:	bc90      	pop	{r4, r7}
80004ce6:	4770      	bx	lr
80004ce8:	ffff8080 	.word	0xffff8080

80004cec <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
80004cec:	b490      	push	{r4, r7}
80004cee:	b082      	sub	sp, #8
80004cf0:	af00      	add	r7, sp, #0
80004cf2:	6078      	str	r0, [r7, #4]
80004cf4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
80004cf6:	683b      	ldr	r3, [r7, #0]
80004cf8:	7b1b      	ldrb	r3, [r3, #12]
80004cfa:	2b00      	cmp	r3, #0
80004cfc:	d171      	bne.n	80004de2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
80004cfe:	683b      	ldr	r3, [r7, #0]
80004d00:	785b      	ldrb	r3, [r3, #1]
80004d02:	2b00      	cmp	r3, #0
80004d04:	d036      	beq.n	80004d74 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
80004d06:	687a      	ldr	r2, [r7, #4]
80004d08:	683b      	ldr	r3, [r7, #0]
80004d0a:	781b      	ldrb	r3, [r3, #0]
80004d0c:	009b      	lsls	r3, r3, #2
80004d0e:	4413      	add	r3, r2
80004d10:	881b      	ldrh	r3, [r3, #0]
80004d12:	b29c      	uxth	r4, r3
80004d14:	4623      	mov	r3, r4
80004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
80004d1a:	2b00      	cmp	r3, #0
80004d1c:	d014      	beq.n	80004d48 <USB_DeactivateEndpoint+0x5c>
80004d1e:	687a      	ldr	r2, [r7, #4]
80004d20:	683b      	ldr	r3, [r7, #0]
80004d22:	781b      	ldrb	r3, [r3, #0]
80004d24:	009b      	lsls	r3, r3, #2
80004d26:	4413      	add	r3, r2
80004d28:	881b      	ldrh	r3, [r3, #0]
80004d2a:	b29b      	uxth	r3, r3
80004d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004d34:	b29c      	uxth	r4, r3
80004d36:	687a      	ldr	r2, [r7, #4]
80004d38:	683b      	ldr	r3, [r7, #0]
80004d3a:	781b      	ldrb	r3, [r3, #0]
80004d3c:	009b      	lsls	r3, r3, #2
80004d3e:	441a      	add	r2, r3
80004d40:	4b6b      	ldr	r3, [pc, #428]	; (80004ef0 <USB_DeactivateEndpoint+0x204>)
80004d42:	4323      	orrs	r3, r4
80004d44:	b29b      	uxth	r3, r3
80004d46:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
80004d48:	687a      	ldr	r2, [r7, #4]
80004d4a:	683b      	ldr	r3, [r7, #0]
80004d4c:	781b      	ldrb	r3, [r3, #0]
80004d4e:	009b      	lsls	r3, r3, #2
80004d50:	4413      	add	r3, r2
80004d52:	881b      	ldrh	r3, [r3, #0]
80004d54:	b29b      	uxth	r3, r3
80004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80004d5e:	b29c      	uxth	r4, r3
80004d60:	687a      	ldr	r2, [r7, #4]
80004d62:	683b      	ldr	r3, [r7, #0]
80004d64:	781b      	ldrb	r3, [r3, #0]
80004d66:	009b      	lsls	r3, r3, #2
80004d68:	441a      	add	r2, r3
80004d6a:	4b62      	ldr	r3, [pc, #392]	; (80004ef4 <USB_DeactivateEndpoint+0x208>)
80004d6c:	4323      	orrs	r3, r4
80004d6e:	b29b      	uxth	r3, r3
80004d70:	8013      	strh	r3, [r2, #0]
80004d72:	e144      	b.n	80004ffe <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
80004d74:	687a      	ldr	r2, [r7, #4]
80004d76:	683b      	ldr	r3, [r7, #0]
80004d78:	781b      	ldrb	r3, [r3, #0]
80004d7a:	009b      	lsls	r3, r3, #2
80004d7c:	4413      	add	r3, r2
80004d7e:	881b      	ldrh	r3, [r3, #0]
80004d80:	b29c      	uxth	r4, r3
80004d82:	4623      	mov	r3, r4
80004d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80004d88:	2b00      	cmp	r3, #0
80004d8a:	d014      	beq.n	80004db6 <USB_DeactivateEndpoint+0xca>
80004d8c:	687a      	ldr	r2, [r7, #4]
80004d8e:	683b      	ldr	r3, [r7, #0]
80004d90:	781b      	ldrb	r3, [r3, #0]
80004d92:	009b      	lsls	r3, r3, #2
80004d94:	4413      	add	r3, r2
80004d96:	881b      	ldrh	r3, [r3, #0]
80004d98:	b29b      	uxth	r3, r3
80004d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004da2:	b29c      	uxth	r4, r3
80004da4:	687a      	ldr	r2, [r7, #4]
80004da6:	683b      	ldr	r3, [r7, #0]
80004da8:	781b      	ldrb	r3, [r3, #0]
80004daa:	009b      	lsls	r3, r3, #2
80004dac:	441a      	add	r2, r3
80004dae:	4b52      	ldr	r3, [pc, #328]	; (80004ef8 <USB_DeactivateEndpoint+0x20c>)
80004db0:	4323      	orrs	r3, r4
80004db2:	b29b      	uxth	r3, r3
80004db4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
80004db6:	687a      	ldr	r2, [r7, #4]
80004db8:	683b      	ldr	r3, [r7, #0]
80004dba:	781b      	ldrb	r3, [r3, #0]
80004dbc:	009b      	lsls	r3, r3, #2
80004dbe:	4413      	add	r3, r2
80004dc0:	881b      	ldrh	r3, [r3, #0]
80004dc2:	b29b      	uxth	r3, r3
80004dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
80004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004dcc:	b29c      	uxth	r4, r3
80004dce:	687a      	ldr	r2, [r7, #4]
80004dd0:	683b      	ldr	r3, [r7, #0]
80004dd2:	781b      	ldrb	r3, [r3, #0]
80004dd4:	009b      	lsls	r3, r3, #2
80004dd6:	441a      	add	r2, r3
80004dd8:	4b46      	ldr	r3, [pc, #280]	; (80004ef4 <USB_DeactivateEndpoint+0x208>)
80004dda:	4323      	orrs	r3, r4
80004ddc:	b29b      	uxth	r3, r3
80004dde:	8013      	strh	r3, [r2, #0]
80004de0:	e10d      	b.n	80004ffe <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
80004de2:	683b      	ldr	r3, [r7, #0]
80004de4:	785b      	ldrb	r3, [r3, #1]
80004de6:	2b00      	cmp	r3, #0
80004de8:	f040 8088 	bne.w	80004efc <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
80004dec:	687a      	ldr	r2, [r7, #4]
80004dee:	683b      	ldr	r3, [r7, #0]
80004df0:	781b      	ldrb	r3, [r3, #0]
80004df2:	009b      	lsls	r3, r3, #2
80004df4:	4413      	add	r3, r2
80004df6:	881b      	ldrh	r3, [r3, #0]
80004df8:	b29c      	uxth	r4, r3
80004dfa:	4623      	mov	r3, r4
80004dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80004e00:	2b00      	cmp	r3, #0
80004e02:	d014      	beq.n	80004e2e <USB_DeactivateEndpoint+0x142>
80004e04:	687a      	ldr	r2, [r7, #4]
80004e06:	683b      	ldr	r3, [r7, #0]
80004e08:	781b      	ldrb	r3, [r3, #0]
80004e0a:	009b      	lsls	r3, r3, #2
80004e0c:	4413      	add	r3, r2
80004e0e:	881b      	ldrh	r3, [r3, #0]
80004e10:	b29b      	uxth	r3, r3
80004e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004e1a:	b29c      	uxth	r4, r3
80004e1c:	687a      	ldr	r2, [r7, #4]
80004e1e:	683b      	ldr	r3, [r7, #0]
80004e20:	781b      	ldrb	r3, [r3, #0]
80004e22:	009b      	lsls	r3, r3, #2
80004e24:	441a      	add	r2, r3
80004e26:	4b34      	ldr	r3, [pc, #208]	; (80004ef8 <USB_DeactivateEndpoint+0x20c>)
80004e28:	4323      	orrs	r3, r4
80004e2a:	b29b      	uxth	r3, r3
80004e2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
80004e2e:	687a      	ldr	r2, [r7, #4]
80004e30:	683b      	ldr	r3, [r7, #0]
80004e32:	781b      	ldrb	r3, [r3, #0]
80004e34:	009b      	lsls	r3, r3, #2
80004e36:	4413      	add	r3, r2
80004e38:	881b      	ldrh	r3, [r3, #0]
80004e3a:	b29c      	uxth	r4, r3
80004e3c:	4623      	mov	r3, r4
80004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
80004e42:	2b00      	cmp	r3, #0
80004e44:	d014      	beq.n	80004e70 <USB_DeactivateEndpoint+0x184>
80004e46:	687a      	ldr	r2, [r7, #4]
80004e48:	683b      	ldr	r3, [r7, #0]
80004e4a:	781b      	ldrb	r3, [r3, #0]
80004e4c:	009b      	lsls	r3, r3, #2
80004e4e:	4413      	add	r3, r2
80004e50:	881b      	ldrh	r3, [r3, #0]
80004e52:	b29b      	uxth	r3, r3
80004e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004e5c:	b29c      	uxth	r4, r3
80004e5e:	687a      	ldr	r2, [r7, #4]
80004e60:	683b      	ldr	r3, [r7, #0]
80004e62:	781b      	ldrb	r3, [r3, #0]
80004e64:	009b      	lsls	r3, r3, #2
80004e66:	441a      	add	r2, r3
80004e68:	4b21      	ldr	r3, [pc, #132]	; (80004ef0 <USB_DeactivateEndpoint+0x204>)
80004e6a:	4323      	orrs	r3, r4
80004e6c:	b29b      	uxth	r3, r3
80004e6e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
80004e70:	687a      	ldr	r2, [r7, #4]
80004e72:	683b      	ldr	r3, [r7, #0]
80004e74:	781b      	ldrb	r3, [r3, #0]
80004e76:	009b      	lsls	r3, r3, #2
80004e78:	4413      	add	r3, r2
80004e7a:	881b      	ldrh	r3, [r3, #0]
80004e7c:	b29b      	uxth	r3, r3
80004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004e86:	b29c      	uxth	r4, r3
80004e88:	687a      	ldr	r2, [r7, #4]
80004e8a:	683b      	ldr	r3, [r7, #0]
80004e8c:	781b      	ldrb	r3, [r3, #0]
80004e8e:	009b      	lsls	r3, r3, #2
80004e90:	441a      	add	r2, r3
80004e92:	4b17      	ldr	r3, [pc, #92]	; (80004ef0 <USB_DeactivateEndpoint+0x204>)
80004e94:	4323      	orrs	r3, r4
80004e96:	b29b      	uxth	r3, r3
80004e98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
80004e9a:	687a      	ldr	r2, [r7, #4]
80004e9c:	683b      	ldr	r3, [r7, #0]
80004e9e:	781b      	ldrb	r3, [r3, #0]
80004ea0:	009b      	lsls	r3, r3, #2
80004ea2:	4413      	add	r3, r2
80004ea4:	881b      	ldrh	r3, [r3, #0]
80004ea6:	b29b      	uxth	r3, r3
80004ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
80004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004eb0:	b29c      	uxth	r4, r3
80004eb2:	687a      	ldr	r2, [r7, #4]
80004eb4:	683b      	ldr	r3, [r7, #0]
80004eb6:	781b      	ldrb	r3, [r3, #0]
80004eb8:	009b      	lsls	r3, r3, #2
80004eba:	441a      	add	r2, r3
80004ebc:	4b0d      	ldr	r3, [pc, #52]	; (80004ef4 <USB_DeactivateEndpoint+0x208>)
80004ebe:	4323      	orrs	r3, r4
80004ec0:	b29b      	uxth	r3, r3
80004ec2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
80004ec4:	687a      	ldr	r2, [r7, #4]
80004ec6:	683b      	ldr	r3, [r7, #0]
80004ec8:	781b      	ldrb	r3, [r3, #0]
80004eca:	009b      	lsls	r3, r3, #2
80004ecc:	4413      	add	r3, r2
80004ece:	881b      	ldrh	r3, [r3, #0]
80004ed0:	b29b      	uxth	r3, r3
80004ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80004eda:	b29c      	uxth	r4, r3
80004edc:	687a      	ldr	r2, [r7, #4]
80004ede:	683b      	ldr	r3, [r7, #0]
80004ee0:	781b      	ldrb	r3, [r3, #0]
80004ee2:	009b      	lsls	r3, r3, #2
80004ee4:	441a      	add	r2, r3
80004ee6:	4b03      	ldr	r3, [pc, #12]	; (80004ef4 <USB_DeactivateEndpoint+0x208>)
80004ee8:	4323      	orrs	r3, r4
80004eea:	b29b      	uxth	r3, r3
80004eec:	8013      	strh	r3, [r2, #0]
80004eee:	e086      	b.n	80004ffe <USB_DeactivateEndpoint+0x312>
80004ef0:	ffff80c0 	.word	0xffff80c0
80004ef4:	ffff8080 	.word	0xffff8080
80004ef8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
80004efc:	687a      	ldr	r2, [r7, #4]
80004efe:	683b      	ldr	r3, [r7, #0]
80004f00:	781b      	ldrb	r3, [r3, #0]
80004f02:	009b      	lsls	r3, r3, #2
80004f04:	4413      	add	r3, r2
80004f06:	881b      	ldrh	r3, [r3, #0]
80004f08:	b29c      	uxth	r4, r3
80004f0a:	4623      	mov	r3, r4
80004f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80004f10:	2b00      	cmp	r3, #0
80004f12:	d014      	beq.n	80004f3e <USB_DeactivateEndpoint+0x252>
80004f14:	687a      	ldr	r2, [r7, #4]
80004f16:	683b      	ldr	r3, [r7, #0]
80004f18:	781b      	ldrb	r3, [r3, #0]
80004f1a:	009b      	lsls	r3, r3, #2
80004f1c:	4413      	add	r3, r2
80004f1e:	881b      	ldrh	r3, [r3, #0]
80004f20:	b29b      	uxth	r3, r3
80004f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004f2a:	b29c      	uxth	r4, r3
80004f2c:	687a      	ldr	r2, [r7, #4]
80004f2e:	683b      	ldr	r3, [r7, #0]
80004f30:	781b      	ldrb	r3, [r3, #0]
80004f32:	009b      	lsls	r3, r3, #2
80004f34:	441a      	add	r2, r3
80004f36:	4b35      	ldr	r3, [pc, #212]	; (8000500c <USB_DeactivateEndpoint+0x320>)
80004f38:	4323      	orrs	r3, r4
80004f3a:	b29b      	uxth	r3, r3
80004f3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
80004f3e:	687a      	ldr	r2, [r7, #4]
80004f40:	683b      	ldr	r3, [r7, #0]
80004f42:	781b      	ldrb	r3, [r3, #0]
80004f44:	009b      	lsls	r3, r3, #2
80004f46:	4413      	add	r3, r2
80004f48:	881b      	ldrh	r3, [r3, #0]
80004f4a:	b29c      	uxth	r4, r3
80004f4c:	4623      	mov	r3, r4
80004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
80004f52:	2b00      	cmp	r3, #0
80004f54:	d014      	beq.n	80004f80 <USB_DeactivateEndpoint+0x294>
80004f56:	687a      	ldr	r2, [r7, #4]
80004f58:	683b      	ldr	r3, [r7, #0]
80004f5a:	781b      	ldrb	r3, [r3, #0]
80004f5c:	009b      	lsls	r3, r3, #2
80004f5e:	4413      	add	r3, r2
80004f60:	881b      	ldrh	r3, [r3, #0]
80004f62:	b29b      	uxth	r3, r3
80004f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004f6c:	b29c      	uxth	r4, r3
80004f6e:	687a      	ldr	r2, [r7, #4]
80004f70:	683b      	ldr	r3, [r7, #0]
80004f72:	781b      	ldrb	r3, [r3, #0]
80004f74:	009b      	lsls	r3, r3, #2
80004f76:	441a      	add	r2, r3
80004f78:	4b25      	ldr	r3, [pc, #148]	; (80005010 <USB_DeactivateEndpoint+0x324>)
80004f7a:	4323      	orrs	r3, r4
80004f7c:	b29b      	uxth	r3, r3
80004f7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
80004f80:	687a      	ldr	r2, [r7, #4]
80004f82:	683b      	ldr	r3, [r7, #0]
80004f84:	781b      	ldrb	r3, [r3, #0]
80004f86:	009b      	lsls	r3, r3, #2
80004f88:	4413      	add	r3, r2
80004f8a:	881b      	ldrh	r3, [r3, #0]
80004f8c:	b29b      	uxth	r3, r3
80004f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004f96:	b29c      	uxth	r4, r3
80004f98:	687a      	ldr	r2, [r7, #4]
80004f9a:	683b      	ldr	r3, [r7, #0]
80004f9c:	781b      	ldrb	r3, [r3, #0]
80004f9e:	009b      	lsls	r3, r3, #2
80004fa0:	441a      	add	r2, r3
80004fa2:	4b1a      	ldr	r3, [pc, #104]	; (8000500c <USB_DeactivateEndpoint+0x320>)
80004fa4:	4323      	orrs	r3, r4
80004fa6:	b29b      	uxth	r3, r3
80004fa8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
80004faa:	687a      	ldr	r2, [r7, #4]
80004fac:	683b      	ldr	r3, [r7, #0]
80004fae:	781b      	ldrb	r3, [r3, #0]
80004fb0:	009b      	lsls	r3, r3, #2
80004fb2:	4413      	add	r3, r2
80004fb4:	881b      	ldrh	r3, [r3, #0]
80004fb6:	b29b      	uxth	r3, r3
80004fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80004fc0:	b29c      	uxth	r4, r3
80004fc2:	687a      	ldr	r2, [r7, #4]
80004fc4:	683b      	ldr	r3, [r7, #0]
80004fc6:	781b      	ldrb	r3, [r3, #0]
80004fc8:	009b      	lsls	r3, r3, #2
80004fca:	441a      	add	r2, r3
80004fcc:	4b11      	ldr	r3, [pc, #68]	; (80005014 <USB_DeactivateEndpoint+0x328>)
80004fce:	4323      	orrs	r3, r4
80004fd0:	b29b      	uxth	r3, r3
80004fd2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
80004fd4:	687a      	ldr	r2, [r7, #4]
80004fd6:	683b      	ldr	r3, [r7, #0]
80004fd8:	781b      	ldrb	r3, [r3, #0]
80004fda:	009b      	lsls	r3, r3, #2
80004fdc:	4413      	add	r3, r2
80004fde:	881b      	ldrh	r3, [r3, #0]
80004fe0:	b29b      	uxth	r3, r3
80004fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
80004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80004fea:	b29c      	uxth	r4, r3
80004fec:	687a      	ldr	r2, [r7, #4]
80004fee:	683b      	ldr	r3, [r7, #0]
80004ff0:	781b      	ldrb	r3, [r3, #0]
80004ff2:	009b      	lsls	r3, r3, #2
80004ff4:	441a      	add	r2, r3
80004ff6:	4b07      	ldr	r3, [pc, #28]	; (80005014 <USB_DeactivateEndpoint+0x328>)
80004ff8:	4323      	orrs	r3, r4
80004ffa:	b29b      	uxth	r3, r3
80004ffc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
80004ffe:	2300      	movs	r3, #0
}
80005000:	4618      	mov	r0, r3
80005002:	3708      	adds	r7, #8
80005004:	46bd      	mov	sp, r7
80005006:	bc90      	pop	{r4, r7}
80005008:	4770      	bx	lr
8000500a:	bf00      	nop
8000500c:	ffffc080 	.word	0xffffc080
80005010:	ffff80c0 	.word	0xffff80c0
80005014:	ffff8080 	.word	0xffff8080

80005018 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
80005018:	b590      	push	{r4, r7, lr}
8000501a:	b08d      	sub	sp, #52	; 0x34
8000501c:	af00      	add	r7, sp, #0
8000501e:	6078      	str	r0, [r7, #4]
80005020:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
80005022:	683b      	ldr	r3, [r7, #0]
80005024:	785b      	ldrb	r3, [r3, #1]
80005026:	2b01      	cmp	r3, #1
80005028:	f040 8160 	bne.w	800052ec <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
8000502c:	683b      	ldr	r3, [r7, #0]
8000502e:	699a      	ldr	r2, [r3, #24]
80005030:	683b      	ldr	r3, [r7, #0]
80005032:	691b      	ldr	r3, [r3, #16]
80005034:	429a      	cmp	r2, r3
80005036:	d909      	bls.n	8000504c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
80005038:	683b      	ldr	r3, [r7, #0]
8000503a:	691b      	ldr	r3, [r3, #16]
8000503c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
8000503e:	683b      	ldr	r3, [r7, #0]
80005040:	699a      	ldr	r2, [r3, #24]
80005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005044:	1ad2      	subs	r2, r2, r3
80005046:	683b      	ldr	r3, [r7, #0]
80005048:	619a      	str	r2, [r3, #24]
8000504a:	e005      	b.n	80005058 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
8000504c:	683b      	ldr	r3, [r7, #0]
8000504e:	699b      	ldr	r3, [r3, #24]
80005050:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
80005052:	683b      	ldr	r3, [r7, #0]
80005054:	2200      	movs	r2, #0
80005056:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
80005058:	683b      	ldr	r3, [r7, #0]
8000505a:	7b1b      	ldrb	r3, [r3, #12]
8000505c:	2b00      	cmp	r3, #0
8000505e:	d119      	bne.n	80005094 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
80005060:	683b      	ldr	r3, [r7, #0]
80005062:	6959      	ldr	r1, [r3, #20]
80005064:	683b      	ldr	r3, [r7, #0]
80005066:	88da      	ldrh	r2, [r3, #6]
80005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000506a:	b29b      	uxth	r3, r3
8000506c:	6878      	ldr	r0, [r7, #4]
8000506e:	f000 fba2 	bl	800057b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
80005072:	687c      	ldr	r4, [r7, #4]
80005074:	687b      	ldr	r3, [r7, #4]
80005076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
8000507a:	b29b      	uxth	r3, r3
8000507c:	441c      	add	r4, r3
8000507e:	683b      	ldr	r3, [r7, #0]
80005080:	781b      	ldrb	r3, [r3, #0]
80005082:	011b      	lsls	r3, r3, #4
80005084:	4423      	add	r3, r4
80005086:	f203 4304 	addw	r3, r3, #1028	; 0x404
8000508a:	461c      	mov	r4, r3
8000508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000508e:	b29b      	uxth	r3, r3
80005090:	8023      	strh	r3, [r4, #0]
80005092:	e10f      	b.n	800052b4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
80005094:	687a      	ldr	r2, [r7, #4]
80005096:	683b      	ldr	r3, [r7, #0]
80005098:	781b      	ldrb	r3, [r3, #0]
8000509a:	009b      	lsls	r3, r3, #2
8000509c:	4413      	add	r3, r2
8000509e:	881b      	ldrh	r3, [r3, #0]
800050a0:	b29b      	uxth	r3, r3
800050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
800050a6:	2b00      	cmp	r3, #0
800050a8:	d065      	beq.n	80005176 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
800050aa:	687c      	ldr	r4, [r7, #4]
800050ac:	683b      	ldr	r3, [r7, #0]
800050ae:	785b      	ldrb	r3, [r3, #1]
800050b0:	2b00      	cmp	r3, #0
800050b2:	d148      	bne.n	80005146 <USB_EPStartXfer+0x12e>
800050b4:	687c      	ldr	r4, [r7, #4]
800050b6:	687b      	ldr	r3, [r7, #4]
800050b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
800050bc:	b29b      	uxth	r3, r3
800050be:	441c      	add	r4, r3
800050c0:	683b      	ldr	r3, [r7, #0]
800050c2:	781b      	ldrb	r3, [r3, #0]
800050c4:	011b      	lsls	r3, r3, #4
800050c6:	4423      	add	r3, r4
800050c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
800050cc:	461c      	mov	r4, r3
800050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
800050d0:	2b00      	cmp	r3, #0
800050d2:	d10e      	bne.n	800050f2 <USB_EPStartXfer+0xda>
800050d4:	8823      	ldrh	r3, [r4, #0]
800050d6:	b29b      	uxth	r3, r3
800050d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
800050dc:	b29b      	uxth	r3, r3
800050de:	8023      	strh	r3, [r4, #0]
800050e0:	8823      	ldrh	r3, [r4, #0]
800050e2:	b29b      	uxth	r3, r3
800050e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
800050e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
800050ec:	b29b      	uxth	r3, r3
800050ee:	8023      	strh	r3, [r4, #0]
800050f0:	e03d      	b.n	8000516e <USB_EPStartXfer+0x156>
800050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
800050f4:	2b3e      	cmp	r3, #62	; 0x3e
800050f6:	d810      	bhi.n	8000511a <USB_EPStartXfer+0x102>
800050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
800050fa:	085b      	lsrs	r3, r3, #1
800050fc:	627b      	str	r3, [r7, #36]	; 0x24
800050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005100:	f003 0301 	and.w	r3, r3, #1
80005104:	2b00      	cmp	r3, #0
80005106:	d002      	beq.n	8000510e <USB_EPStartXfer+0xf6>
80005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
8000510a:	3301      	adds	r3, #1
8000510c:	627b      	str	r3, [r7, #36]	; 0x24
8000510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
80005110:	b29b      	uxth	r3, r3
80005112:	029b      	lsls	r3, r3, #10
80005114:	b29b      	uxth	r3, r3
80005116:	8023      	strh	r3, [r4, #0]
80005118:	e029      	b.n	8000516e <USB_EPStartXfer+0x156>
8000511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000511c:	095b      	lsrs	r3, r3, #5
8000511e:	627b      	str	r3, [r7, #36]	; 0x24
80005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005122:	f003 031f 	and.w	r3, r3, #31
80005126:	2b00      	cmp	r3, #0
80005128:	d102      	bne.n	80005130 <USB_EPStartXfer+0x118>
8000512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
8000512c:	3b01      	subs	r3, #1
8000512e:	627b      	str	r3, [r7, #36]	; 0x24
80005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
80005132:	b29b      	uxth	r3, r3
80005134:	029b      	lsls	r3, r3, #10
80005136:	b29b      	uxth	r3, r3
80005138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
8000513c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
80005140:	b29b      	uxth	r3, r3
80005142:	8023      	strh	r3, [r4, #0]
80005144:	e013      	b.n	8000516e <USB_EPStartXfer+0x156>
80005146:	683b      	ldr	r3, [r7, #0]
80005148:	785b      	ldrb	r3, [r3, #1]
8000514a:	2b01      	cmp	r3, #1
8000514c:	d10f      	bne.n	8000516e <USB_EPStartXfer+0x156>
8000514e:	687b      	ldr	r3, [r7, #4]
80005150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80005154:	b29b      	uxth	r3, r3
80005156:	441c      	add	r4, r3
80005158:	683b      	ldr	r3, [r7, #0]
8000515a:	781b      	ldrb	r3, [r3, #0]
8000515c:	011b      	lsls	r3, r3, #4
8000515e:	4423      	add	r3, r4
80005160:	f203 430c 	addw	r3, r3, #1036	; 0x40c
80005164:	60fb      	str	r3, [r7, #12]
80005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005168:	b29a      	uxth	r2, r3
8000516a:	68fb      	ldr	r3, [r7, #12]
8000516c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
8000516e:	683b      	ldr	r3, [r7, #0]
80005170:	895b      	ldrh	r3, [r3, #10]
80005172:	85fb      	strh	r3, [r7, #46]	; 0x2e
80005174:	e063      	b.n	8000523e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
80005176:	683b      	ldr	r3, [r7, #0]
80005178:	785b      	ldrb	r3, [r3, #1]
8000517a:	2b00      	cmp	r3, #0
8000517c:	d148      	bne.n	80005210 <USB_EPStartXfer+0x1f8>
8000517e:	687c      	ldr	r4, [r7, #4]
80005180:	687b      	ldr	r3, [r7, #4]
80005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80005186:	b29b      	uxth	r3, r3
80005188:	441c      	add	r4, r3
8000518a:	683b      	ldr	r3, [r7, #0]
8000518c:	781b      	ldrb	r3, [r3, #0]
8000518e:	011b      	lsls	r3, r3, #4
80005190:	4423      	add	r3, r4
80005192:	f203 4304 	addw	r3, r3, #1028	; 0x404
80005196:	461c      	mov	r4, r3
80005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000519a:	2b00      	cmp	r3, #0
8000519c:	d10e      	bne.n	800051bc <USB_EPStartXfer+0x1a4>
8000519e:	8823      	ldrh	r3, [r4, #0]
800051a0:	b29b      	uxth	r3, r3
800051a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
800051a6:	b29b      	uxth	r3, r3
800051a8:	8023      	strh	r3, [r4, #0]
800051aa:	8823      	ldrh	r3, [r4, #0]
800051ac:	b29b      	uxth	r3, r3
800051ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
800051b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
800051b6:	b29b      	uxth	r3, r3
800051b8:	8023      	strh	r3, [r4, #0]
800051ba:	e03d      	b.n	80005238 <USB_EPStartXfer+0x220>
800051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
800051be:	2b3e      	cmp	r3, #62	; 0x3e
800051c0:	d810      	bhi.n	800051e4 <USB_EPStartXfer+0x1cc>
800051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
800051c4:	085b      	lsrs	r3, r3, #1
800051c6:	623b      	str	r3, [r7, #32]
800051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
800051ca:	f003 0301 	and.w	r3, r3, #1
800051ce:	2b00      	cmp	r3, #0
800051d0:	d002      	beq.n	800051d8 <USB_EPStartXfer+0x1c0>
800051d2:	6a3b      	ldr	r3, [r7, #32]
800051d4:	3301      	adds	r3, #1
800051d6:	623b      	str	r3, [r7, #32]
800051d8:	6a3b      	ldr	r3, [r7, #32]
800051da:	b29b      	uxth	r3, r3
800051dc:	029b      	lsls	r3, r3, #10
800051de:	b29b      	uxth	r3, r3
800051e0:	8023      	strh	r3, [r4, #0]
800051e2:	e029      	b.n	80005238 <USB_EPStartXfer+0x220>
800051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
800051e6:	095b      	lsrs	r3, r3, #5
800051e8:	623b      	str	r3, [r7, #32]
800051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
800051ec:	f003 031f 	and.w	r3, r3, #31
800051f0:	2b00      	cmp	r3, #0
800051f2:	d102      	bne.n	800051fa <USB_EPStartXfer+0x1e2>
800051f4:	6a3b      	ldr	r3, [r7, #32]
800051f6:	3b01      	subs	r3, #1
800051f8:	623b      	str	r3, [r7, #32]
800051fa:	6a3b      	ldr	r3, [r7, #32]
800051fc:	b29b      	uxth	r3, r3
800051fe:	029b      	lsls	r3, r3, #10
80005200:	b29b      	uxth	r3, r3
80005202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
80005206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
8000520a:	b29b      	uxth	r3, r3
8000520c:	8023      	strh	r3, [r4, #0]
8000520e:	e013      	b.n	80005238 <USB_EPStartXfer+0x220>
80005210:	683b      	ldr	r3, [r7, #0]
80005212:	785b      	ldrb	r3, [r3, #1]
80005214:	2b01      	cmp	r3, #1
80005216:	d10f      	bne.n	80005238 <USB_EPStartXfer+0x220>
80005218:	687c      	ldr	r4, [r7, #4]
8000521a:	687b      	ldr	r3, [r7, #4]
8000521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80005220:	b29b      	uxth	r3, r3
80005222:	441c      	add	r4, r3
80005224:	683b      	ldr	r3, [r7, #0]
80005226:	781b      	ldrb	r3, [r3, #0]
80005228:	011b      	lsls	r3, r3, #4
8000522a:	4423      	add	r3, r4
8000522c:	f203 4304 	addw	r3, r3, #1028	; 0x404
80005230:	461c      	mov	r4, r3
80005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005234:	b29b      	uxth	r3, r3
80005236:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
80005238:	683b      	ldr	r3, [r7, #0]
8000523a:	891b      	ldrh	r3, [r3, #8]
8000523c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
8000523e:	683b      	ldr	r3, [r7, #0]
80005240:	6959      	ldr	r1, [r3, #20]
80005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005244:	b29b      	uxth	r3, r3
80005246:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
80005248:	6878      	ldr	r0, [r7, #4]
8000524a:	f000 fab4 	bl	800057b6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
8000524e:	683b      	ldr	r3, [r7, #0]
80005250:	785b      	ldrb	r3, [r3, #1]
80005252:	2b00      	cmp	r3, #0
80005254:	d115      	bne.n	80005282 <USB_EPStartXfer+0x26a>
80005256:	687a      	ldr	r2, [r7, #4]
80005258:	683b      	ldr	r3, [r7, #0]
8000525a:	781b      	ldrb	r3, [r3, #0]
8000525c:	009b      	lsls	r3, r3, #2
8000525e:	4413      	add	r3, r2
80005260:	881b      	ldrh	r3, [r3, #0]
80005262:	b29b      	uxth	r3, r3
80005264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
8000526c:	b29c      	uxth	r4, r3
8000526e:	687a      	ldr	r2, [r7, #4]
80005270:	683b      	ldr	r3, [r7, #0]
80005272:	781b      	ldrb	r3, [r3, #0]
80005274:	009b      	lsls	r3, r3, #2
80005276:	441a      	add	r2, r3
80005278:	4b9a      	ldr	r3, [pc, #616]	; (800054e4 <USB_EPStartXfer+0x4cc>)
8000527a:	4323      	orrs	r3, r4
8000527c:	b29b      	uxth	r3, r3
8000527e:	8013      	strh	r3, [r2, #0]
80005280:	e018      	b.n	800052b4 <USB_EPStartXfer+0x29c>
80005282:	683b      	ldr	r3, [r7, #0]
80005284:	785b      	ldrb	r3, [r3, #1]
80005286:	2b01      	cmp	r3, #1
80005288:	d114      	bne.n	800052b4 <USB_EPStartXfer+0x29c>
8000528a:	687a      	ldr	r2, [r7, #4]
8000528c:	683b      	ldr	r3, [r7, #0]
8000528e:	781b      	ldrb	r3, [r3, #0]
80005290:	009b      	lsls	r3, r3, #2
80005292:	4413      	add	r3, r2
80005294:	881b      	ldrh	r3, [r3, #0]
80005296:	b29b      	uxth	r3, r3
80005298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
8000529c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800052a0:	b29c      	uxth	r4, r3
800052a2:	687a      	ldr	r2, [r7, #4]
800052a4:	683b      	ldr	r3, [r7, #0]
800052a6:	781b      	ldrb	r3, [r3, #0]
800052a8:	009b      	lsls	r3, r3, #2
800052aa:	441a      	add	r2, r3
800052ac:	4b8e      	ldr	r3, [pc, #568]	; (800054e8 <USB_EPStartXfer+0x4d0>)
800052ae:	4323      	orrs	r3, r4
800052b0:	b29b      	uxth	r3, r3
800052b2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
800052b4:	687a      	ldr	r2, [r7, #4]
800052b6:	683b      	ldr	r3, [r7, #0]
800052b8:	781b      	ldrb	r3, [r3, #0]
800052ba:	009b      	lsls	r3, r3, #2
800052bc:	4413      	add	r3, r2
800052be:	881b      	ldrh	r3, [r3, #0]
800052c0:	b29b      	uxth	r3, r3
800052c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
800052c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
800052ca:	b29c      	uxth	r4, r3
800052cc:	f084 0310 	eor.w	r3, r4, #16
800052d0:	b29c      	uxth	r4, r3
800052d2:	f084 0320 	eor.w	r3, r4, #32
800052d6:	b29c      	uxth	r4, r3
800052d8:	687a      	ldr	r2, [r7, #4]
800052da:	683b      	ldr	r3, [r7, #0]
800052dc:	781b      	ldrb	r3, [r3, #0]
800052de:	009b      	lsls	r3, r3, #2
800052e0:	441a      	add	r2, r3
800052e2:	4b82      	ldr	r3, [pc, #520]	; (800054ec <USB_EPStartXfer+0x4d4>)
800052e4:	4323      	orrs	r3, r4
800052e6:	b29b      	uxth	r3, r3
800052e8:	8013      	strh	r3, [r2, #0]
800052ea:	e146      	b.n	8000557a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
800052ec:	683b      	ldr	r3, [r7, #0]
800052ee:	699a      	ldr	r2, [r3, #24]
800052f0:	683b      	ldr	r3, [r7, #0]
800052f2:	691b      	ldr	r3, [r3, #16]
800052f4:	429a      	cmp	r2, r3
800052f6:	d909      	bls.n	8000530c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
800052f8:	683b      	ldr	r3, [r7, #0]
800052fa:	691b      	ldr	r3, [r3, #16]
800052fc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
800052fe:	683b      	ldr	r3, [r7, #0]
80005300:	699a      	ldr	r2, [r3, #24]
80005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005304:	1ad2      	subs	r2, r2, r3
80005306:	683b      	ldr	r3, [r7, #0]
80005308:	619a      	str	r2, [r3, #24]
8000530a:	e005      	b.n	80005318 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
8000530c:	683b      	ldr	r3, [r7, #0]
8000530e:	699b      	ldr	r3, [r3, #24]
80005310:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
80005312:	683b      	ldr	r3, [r7, #0]
80005314:	2200      	movs	r2, #0
80005316:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
80005318:	683b      	ldr	r3, [r7, #0]
8000531a:	7b1b      	ldrb	r3, [r3, #12]
8000531c:	2b00      	cmp	r3, #0
8000531e:	d148      	bne.n	800053b2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
80005320:	687c      	ldr	r4, [r7, #4]
80005322:	687b      	ldr	r3, [r7, #4]
80005324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80005328:	b29b      	uxth	r3, r3
8000532a:	441c      	add	r4, r3
8000532c:	683b      	ldr	r3, [r7, #0]
8000532e:	781b      	ldrb	r3, [r3, #0]
80005330:	011b      	lsls	r3, r3, #4
80005332:	4423      	add	r3, r4
80005334:	f203 430c 	addw	r3, r3, #1036	; 0x40c
80005338:	461c      	mov	r4, r3
8000533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000533c:	2b00      	cmp	r3, #0
8000533e:	d10e      	bne.n	8000535e <USB_EPStartXfer+0x346>
80005340:	8823      	ldrh	r3, [r4, #0]
80005342:	b29b      	uxth	r3, r3
80005344:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
80005348:	b29b      	uxth	r3, r3
8000534a:	8023      	strh	r3, [r4, #0]
8000534c:	8823      	ldrh	r3, [r4, #0]
8000534e:	b29b      	uxth	r3, r3
80005350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
80005354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
80005358:	b29b      	uxth	r3, r3
8000535a:	8023      	strh	r3, [r4, #0]
8000535c:	e0f2      	b.n	80005544 <USB_EPStartXfer+0x52c>
8000535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005360:	2b3e      	cmp	r3, #62	; 0x3e
80005362:	d810      	bhi.n	80005386 <USB_EPStartXfer+0x36e>
80005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005366:	085b      	lsrs	r3, r3, #1
80005368:	61fb      	str	r3, [r7, #28]
8000536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000536c:	f003 0301 	and.w	r3, r3, #1
80005370:	2b00      	cmp	r3, #0
80005372:	d002      	beq.n	8000537a <USB_EPStartXfer+0x362>
80005374:	69fb      	ldr	r3, [r7, #28]
80005376:	3301      	adds	r3, #1
80005378:	61fb      	str	r3, [r7, #28]
8000537a:	69fb      	ldr	r3, [r7, #28]
8000537c:	b29b      	uxth	r3, r3
8000537e:	029b      	lsls	r3, r3, #10
80005380:	b29b      	uxth	r3, r3
80005382:	8023      	strh	r3, [r4, #0]
80005384:	e0de      	b.n	80005544 <USB_EPStartXfer+0x52c>
80005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005388:	095b      	lsrs	r3, r3, #5
8000538a:	61fb      	str	r3, [r7, #28]
8000538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000538e:	f003 031f 	and.w	r3, r3, #31
80005392:	2b00      	cmp	r3, #0
80005394:	d102      	bne.n	8000539c <USB_EPStartXfer+0x384>
80005396:	69fb      	ldr	r3, [r7, #28]
80005398:	3b01      	subs	r3, #1
8000539a:	61fb      	str	r3, [r7, #28]
8000539c:	69fb      	ldr	r3, [r7, #28]
8000539e:	b29b      	uxth	r3, r3
800053a0:	029b      	lsls	r3, r3, #10
800053a2:	b29b      	uxth	r3, r3
800053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
800053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
800053ac:	b29b      	uxth	r3, r3
800053ae:	8023      	strh	r3, [r4, #0]
800053b0:	e0c8      	b.n	80005544 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
800053b2:	683b      	ldr	r3, [r7, #0]
800053b4:	785b      	ldrb	r3, [r3, #1]
800053b6:	2b00      	cmp	r3, #0
800053b8:	d148      	bne.n	8000544c <USB_EPStartXfer+0x434>
800053ba:	687c      	ldr	r4, [r7, #4]
800053bc:	687b      	ldr	r3, [r7, #4]
800053be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
800053c2:	b29b      	uxth	r3, r3
800053c4:	441c      	add	r4, r3
800053c6:	683b      	ldr	r3, [r7, #0]
800053c8:	781b      	ldrb	r3, [r3, #0]
800053ca:	011b      	lsls	r3, r3, #4
800053cc:	4423      	add	r3, r4
800053ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
800053d2:	461c      	mov	r4, r3
800053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
800053d6:	2b00      	cmp	r3, #0
800053d8:	d10e      	bne.n	800053f8 <USB_EPStartXfer+0x3e0>
800053da:	8823      	ldrh	r3, [r4, #0]
800053dc:	b29b      	uxth	r3, r3
800053de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
800053e2:	b29b      	uxth	r3, r3
800053e4:	8023      	strh	r3, [r4, #0]
800053e6:	8823      	ldrh	r3, [r4, #0]
800053e8:	b29b      	uxth	r3, r3
800053ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
800053ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
800053f2:	b29b      	uxth	r3, r3
800053f4:	8023      	strh	r3, [r4, #0]
800053f6:	e03d      	b.n	80005474 <USB_EPStartXfer+0x45c>
800053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
800053fa:	2b3e      	cmp	r3, #62	; 0x3e
800053fc:	d810      	bhi.n	80005420 <USB_EPStartXfer+0x408>
800053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005400:	085b      	lsrs	r3, r3, #1
80005402:	61bb      	str	r3, [r7, #24]
80005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005406:	f003 0301 	and.w	r3, r3, #1
8000540a:	2b00      	cmp	r3, #0
8000540c:	d002      	beq.n	80005414 <USB_EPStartXfer+0x3fc>
8000540e:	69bb      	ldr	r3, [r7, #24]
80005410:	3301      	adds	r3, #1
80005412:	61bb      	str	r3, [r7, #24]
80005414:	69bb      	ldr	r3, [r7, #24]
80005416:	b29b      	uxth	r3, r3
80005418:	029b      	lsls	r3, r3, #10
8000541a:	b29b      	uxth	r3, r3
8000541c:	8023      	strh	r3, [r4, #0]
8000541e:	e029      	b.n	80005474 <USB_EPStartXfer+0x45c>
80005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005422:	095b      	lsrs	r3, r3, #5
80005424:	61bb      	str	r3, [r7, #24]
80005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005428:	f003 031f 	and.w	r3, r3, #31
8000542c:	2b00      	cmp	r3, #0
8000542e:	d102      	bne.n	80005436 <USB_EPStartXfer+0x41e>
80005430:	69bb      	ldr	r3, [r7, #24]
80005432:	3b01      	subs	r3, #1
80005434:	61bb      	str	r3, [r7, #24]
80005436:	69bb      	ldr	r3, [r7, #24]
80005438:	b29b      	uxth	r3, r3
8000543a:	029b      	lsls	r3, r3, #10
8000543c:	b29b      	uxth	r3, r3
8000543e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
80005442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
80005446:	b29b      	uxth	r3, r3
80005448:	8023      	strh	r3, [r4, #0]
8000544a:	e013      	b.n	80005474 <USB_EPStartXfer+0x45c>
8000544c:	683b      	ldr	r3, [r7, #0]
8000544e:	785b      	ldrb	r3, [r3, #1]
80005450:	2b01      	cmp	r3, #1
80005452:	d10f      	bne.n	80005474 <USB_EPStartXfer+0x45c>
80005454:	687c      	ldr	r4, [r7, #4]
80005456:	687b      	ldr	r3, [r7, #4]
80005458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
8000545c:	b29b      	uxth	r3, r3
8000545e:	441c      	add	r4, r3
80005460:	683b      	ldr	r3, [r7, #0]
80005462:	781b      	ldrb	r3, [r3, #0]
80005464:	011b      	lsls	r3, r3, #4
80005466:	4423      	add	r3, r4
80005468:	f203 4304 	addw	r3, r3, #1028	; 0x404
8000546c:	461c      	mov	r4, r3
8000546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005470:	b29b      	uxth	r3, r3
80005472:	8023      	strh	r3, [r4, #0]
80005474:	687c      	ldr	r4, [r7, #4]
80005476:	683b      	ldr	r3, [r7, #0]
80005478:	785b      	ldrb	r3, [r3, #1]
8000547a:	2b00      	cmp	r3, #0
8000547c:	d14e      	bne.n	8000551c <USB_EPStartXfer+0x504>
8000547e:	687c      	ldr	r4, [r7, #4]
80005480:	687b      	ldr	r3, [r7, #4]
80005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
80005486:	b29b      	uxth	r3, r3
80005488:	441c      	add	r4, r3
8000548a:	683b      	ldr	r3, [r7, #0]
8000548c:	781b      	ldrb	r3, [r3, #0]
8000548e:	011b      	lsls	r3, r3, #4
80005490:	4423      	add	r3, r4
80005492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
80005496:	461c      	mov	r4, r3
80005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000549a:	2b00      	cmp	r3, #0
8000549c:	d10e      	bne.n	800054bc <USB_EPStartXfer+0x4a4>
8000549e:	8823      	ldrh	r3, [r4, #0]
800054a0:	b29b      	uxth	r3, r3
800054a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
800054a6:	b29b      	uxth	r3, r3
800054a8:	8023      	strh	r3, [r4, #0]
800054aa:	8823      	ldrh	r3, [r4, #0]
800054ac:	b29b      	uxth	r3, r3
800054ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
800054b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
800054b6:	b29b      	uxth	r3, r3
800054b8:	8023      	strh	r3, [r4, #0]
800054ba:	e043      	b.n	80005544 <USB_EPStartXfer+0x52c>
800054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
800054be:	2b3e      	cmp	r3, #62	; 0x3e
800054c0:	d816      	bhi.n	800054f0 <USB_EPStartXfer+0x4d8>
800054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
800054c4:	085b      	lsrs	r3, r3, #1
800054c6:	617b      	str	r3, [r7, #20]
800054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
800054ca:	f003 0301 	and.w	r3, r3, #1
800054ce:	2b00      	cmp	r3, #0
800054d0:	d002      	beq.n	800054d8 <USB_EPStartXfer+0x4c0>
800054d2:	697b      	ldr	r3, [r7, #20]
800054d4:	3301      	adds	r3, #1
800054d6:	617b      	str	r3, [r7, #20]
800054d8:	697b      	ldr	r3, [r7, #20]
800054da:	b29b      	uxth	r3, r3
800054dc:	029b      	lsls	r3, r3, #10
800054de:	b29b      	uxth	r3, r3
800054e0:	8023      	strh	r3, [r4, #0]
800054e2:	e02f      	b.n	80005544 <USB_EPStartXfer+0x52c>
800054e4:	ffff80c0 	.word	0xffff80c0
800054e8:	ffffc080 	.word	0xffffc080
800054ec:	ffff8080 	.word	0xffff8080
800054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
800054f2:	095b      	lsrs	r3, r3, #5
800054f4:	617b      	str	r3, [r7, #20]
800054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
800054f8:	f003 031f 	and.w	r3, r3, #31
800054fc:	2b00      	cmp	r3, #0
800054fe:	d102      	bne.n	80005506 <USB_EPStartXfer+0x4ee>
80005500:	697b      	ldr	r3, [r7, #20]
80005502:	3b01      	subs	r3, #1
80005504:	617b      	str	r3, [r7, #20]
80005506:	697b      	ldr	r3, [r7, #20]
80005508:	b29b      	uxth	r3, r3
8000550a:	029b      	lsls	r3, r3, #10
8000550c:	b29b      	uxth	r3, r3
8000550e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
80005512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
80005516:	b29b      	uxth	r3, r3
80005518:	8023      	strh	r3, [r4, #0]
8000551a:	e013      	b.n	80005544 <USB_EPStartXfer+0x52c>
8000551c:	683b      	ldr	r3, [r7, #0]
8000551e:	785b      	ldrb	r3, [r3, #1]
80005520:	2b01      	cmp	r3, #1
80005522:	d10f      	bne.n	80005544 <USB_EPStartXfer+0x52c>
80005524:	687b      	ldr	r3, [r7, #4]
80005526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
8000552a:	b29b      	uxth	r3, r3
8000552c:	441c      	add	r4, r3
8000552e:	683b      	ldr	r3, [r7, #0]
80005530:	781b      	ldrb	r3, [r3, #0]
80005532:	011b      	lsls	r3, r3, #4
80005534:	4423      	add	r3, r4
80005536:	f203 430c 	addw	r3, r3, #1036	; 0x40c
8000553a:	613b      	str	r3, [r7, #16]
8000553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000553e:	b29a      	uxth	r2, r3
80005540:	693b      	ldr	r3, [r7, #16]
80005542:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
80005544:	687a      	ldr	r2, [r7, #4]
80005546:	683b      	ldr	r3, [r7, #0]
80005548:	781b      	ldrb	r3, [r3, #0]
8000554a:	009b      	lsls	r3, r3, #2
8000554c:	4413      	add	r3, r2
8000554e:	881b      	ldrh	r3, [r3, #0]
80005550:	b29b      	uxth	r3, r3
80005552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
80005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
8000555a:	b29c      	uxth	r4, r3
8000555c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
80005560:	b29c      	uxth	r4, r3
80005562:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
80005566:	b29c      	uxth	r4, r3
80005568:	687a      	ldr	r2, [r7, #4]
8000556a:	683b      	ldr	r3, [r7, #0]
8000556c:	781b      	ldrb	r3, [r3, #0]
8000556e:	009b      	lsls	r3, r3, #2
80005570:	441a      	add	r2, r3
80005572:	4b04      	ldr	r3, [pc, #16]	; (80005584 <USB_EPStartXfer+0x56c>)
80005574:	4323      	orrs	r3, r4
80005576:	b29b      	uxth	r3, r3
80005578:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
8000557a:	2300      	movs	r3, #0
}
8000557c:	4618      	mov	r0, r3
8000557e:	3734      	adds	r7, #52	; 0x34
80005580:	46bd      	mov	sp, r7
80005582:	bd90      	pop	{r4, r7, pc}
80005584:	ffff8080 	.word	0xffff8080

80005588 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
80005588:	b490      	push	{r4, r7}
8000558a:	b082      	sub	sp, #8
8000558c:	af00      	add	r7, sp, #0
8000558e:	6078      	str	r0, [r7, #4]
80005590:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
80005592:	683b      	ldr	r3, [r7, #0]
80005594:	785b      	ldrb	r3, [r3, #1]
80005596:	2b00      	cmp	r3, #0
80005598:	d018      	beq.n	800055cc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
8000559a:	687a      	ldr	r2, [r7, #4]
8000559c:	683b      	ldr	r3, [r7, #0]
8000559e:	781b      	ldrb	r3, [r3, #0]
800055a0:	009b      	lsls	r3, r3, #2
800055a2:	4413      	add	r3, r2
800055a4:	881b      	ldrh	r3, [r3, #0]
800055a6:	b29b      	uxth	r3, r3
800055a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
800055ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
800055b0:	b29c      	uxth	r4, r3
800055b2:	f084 0310 	eor.w	r3, r4, #16
800055b6:	b29c      	uxth	r4, r3
800055b8:	687a      	ldr	r2, [r7, #4]
800055ba:	683b      	ldr	r3, [r7, #0]
800055bc:	781b      	ldrb	r3, [r3, #0]
800055be:	009b      	lsls	r3, r3, #2
800055c0:	441a      	add	r2, r3
800055c2:	4b11      	ldr	r3, [pc, #68]	; (80005608 <USB_EPSetStall+0x80>)
800055c4:	4323      	orrs	r3, r4
800055c6:	b29b      	uxth	r3, r3
800055c8:	8013      	strh	r3, [r2, #0]
800055ca:	e017      	b.n	800055fc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
800055cc:	687a      	ldr	r2, [r7, #4]
800055ce:	683b      	ldr	r3, [r7, #0]
800055d0:	781b      	ldrb	r3, [r3, #0]
800055d2:	009b      	lsls	r3, r3, #2
800055d4:	4413      	add	r3, r2
800055d6:	881b      	ldrh	r3, [r3, #0]
800055d8:	b29b      	uxth	r3, r3
800055da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
800055de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800055e2:	b29c      	uxth	r4, r3
800055e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
800055e8:	b29c      	uxth	r4, r3
800055ea:	687a      	ldr	r2, [r7, #4]
800055ec:	683b      	ldr	r3, [r7, #0]
800055ee:	781b      	ldrb	r3, [r3, #0]
800055f0:	009b      	lsls	r3, r3, #2
800055f2:	441a      	add	r2, r3
800055f4:	4b04      	ldr	r3, [pc, #16]	; (80005608 <USB_EPSetStall+0x80>)
800055f6:	4323      	orrs	r3, r4
800055f8:	b29b      	uxth	r3, r3
800055fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
800055fc:	2300      	movs	r3, #0
}
800055fe:	4618      	mov	r0, r3
80005600:	3708      	adds	r7, #8
80005602:	46bd      	mov	sp, r7
80005604:	bc90      	pop	{r4, r7}
80005606:	4770      	bx	lr
80005608:	ffff8080 	.word	0xffff8080

8000560c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
8000560c:	b490      	push	{r4, r7}
8000560e:	b082      	sub	sp, #8
80005610:	af00      	add	r7, sp, #0
80005612:	6078      	str	r0, [r7, #4]
80005614:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
80005616:	683b      	ldr	r3, [r7, #0]
80005618:	7b1b      	ldrb	r3, [r3, #12]
8000561a:	2b00      	cmp	r3, #0
8000561c:	d17d      	bne.n	8000571a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
8000561e:	683b      	ldr	r3, [r7, #0]
80005620:	785b      	ldrb	r3, [r3, #1]
80005622:	2b00      	cmp	r3, #0
80005624:	d03d      	beq.n	800056a2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
80005626:	687a      	ldr	r2, [r7, #4]
80005628:	683b      	ldr	r3, [r7, #0]
8000562a:	781b      	ldrb	r3, [r3, #0]
8000562c:	009b      	lsls	r3, r3, #2
8000562e:	4413      	add	r3, r2
80005630:	881b      	ldrh	r3, [r3, #0]
80005632:	b29c      	uxth	r4, r3
80005634:	4623      	mov	r3, r4
80005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
8000563a:	2b00      	cmp	r3, #0
8000563c:	d014      	beq.n	80005668 <USB_EPClearStall+0x5c>
8000563e:	687a      	ldr	r2, [r7, #4]
80005640:	683b      	ldr	r3, [r7, #0]
80005642:	781b      	ldrb	r3, [r3, #0]
80005644:	009b      	lsls	r3, r3, #2
80005646:	4413      	add	r3, r2
80005648:	881b      	ldrh	r3, [r3, #0]
8000564a:	b29b      	uxth	r3, r3
8000564c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80005650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80005654:	b29c      	uxth	r4, r3
80005656:	687a      	ldr	r2, [r7, #4]
80005658:	683b      	ldr	r3, [r7, #0]
8000565a:	781b      	ldrb	r3, [r3, #0]
8000565c:	009b      	lsls	r3, r3, #2
8000565e:	441a      	add	r2, r3
80005660:	4b31      	ldr	r3, [pc, #196]	; (80005728 <USB_EPClearStall+0x11c>)
80005662:	4323      	orrs	r3, r4
80005664:	b29b      	uxth	r3, r3
80005666:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
80005668:	683b      	ldr	r3, [r7, #0]
8000566a:	78db      	ldrb	r3, [r3, #3]
8000566c:	2b01      	cmp	r3, #1
8000566e:	d054      	beq.n	8000571a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
80005670:	687a      	ldr	r2, [r7, #4]
80005672:	683b      	ldr	r3, [r7, #0]
80005674:	781b      	ldrb	r3, [r3, #0]
80005676:	009b      	lsls	r3, r3, #2
80005678:	4413      	add	r3, r2
8000567a:	881b      	ldrh	r3, [r3, #0]
8000567c:	b29b      	uxth	r3, r3
8000567e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80005682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80005686:	b29c      	uxth	r4, r3
80005688:	f084 0320 	eor.w	r3, r4, #32
8000568c:	b29c      	uxth	r4, r3
8000568e:	687a      	ldr	r2, [r7, #4]
80005690:	683b      	ldr	r3, [r7, #0]
80005692:	781b      	ldrb	r3, [r3, #0]
80005694:	009b      	lsls	r3, r3, #2
80005696:	441a      	add	r2, r3
80005698:	4b24      	ldr	r3, [pc, #144]	; (8000572c <USB_EPClearStall+0x120>)
8000569a:	4323      	orrs	r3, r4
8000569c:	b29b      	uxth	r3, r3
8000569e:	8013      	strh	r3, [r2, #0]
800056a0:	e03b      	b.n	8000571a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
800056a2:	687a      	ldr	r2, [r7, #4]
800056a4:	683b      	ldr	r3, [r7, #0]
800056a6:	781b      	ldrb	r3, [r3, #0]
800056a8:	009b      	lsls	r3, r3, #2
800056aa:	4413      	add	r3, r2
800056ac:	881b      	ldrh	r3, [r3, #0]
800056ae:	b29c      	uxth	r4, r3
800056b0:	4623      	mov	r3, r4
800056b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
800056b6:	2b00      	cmp	r3, #0
800056b8:	d014      	beq.n	800056e4 <USB_EPClearStall+0xd8>
800056ba:	687a      	ldr	r2, [r7, #4]
800056bc:	683b      	ldr	r3, [r7, #0]
800056be:	781b      	ldrb	r3, [r3, #0]
800056c0:	009b      	lsls	r3, r3, #2
800056c2:	4413      	add	r3, r2
800056c4:	881b      	ldrh	r3, [r3, #0]
800056c6:	b29b      	uxth	r3, r3
800056c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
800056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800056d0:	b29c      	uxth	r4, r3
800056d2:	687a      	ldr	r2, [r7, #4]
800056d4:	683b      	ldr	r3, [r7, #0]
800056d6:	781b      	ldrb	r3, [r3, #0]
800056d8:	009b      	lsls	r3, r3, #2
800056da:	441a      	add	r2, r3
800056dc:	4b14      	ldr	r3, [pc, #80]	; (80005730 <USB_EPClearStall+0x124>)
800056de:	4323      	orrs	r3, r4
800056e0:	b29b      	uxth	r3, r3
800056e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
800056e4:	687a      	ldr	r2, [r7, #4]
800056e6:	683b      	ldr	r3, [r7, #0]
800056e8:	781b      	ldrb	r3, [r3, #0]
800056ea:	009b      	lsls	r3, r3, #2
800056ec:	4413      	add	r3, r2
800056ee:	881b      	ldrh	r3, [r3, #0]
800056f0:	b29b      	uxth	r3, r3
800056f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
800056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800056fa:	b29c      	uxth	r4, r3
800056fc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
80005700:	b29c      	uxth	r4, r3
80005702:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
80005706:	b29c      	uxth	r4, r3
80005708:	687a      	ldr	r2, [r7, #4]
8000570a:	683b      	ldr	r3, [r7, #0]
8000570c:	781b      	ldrb	r3, [r3, #0]
8000570e:	009b      	lsls	r3, r3, #2
80005710:	441a      	add	r2, r3
80005712:	4b06      	ldr	r3, [pc, #24]	; (8000572c <USB_EPClearStall+0x120>)
80005714:	4323      	orrs	r3, r4
80005716:	b29b      	uxth	r3, r3
80005718:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
8000571a:	2300      	movs	r3, #0
}
8000571c:	4618      	mov	r0, r3
8000571e:	3708      	adds	r7, #8
80005720:	46bd      	mov	sp, r7
80005722:	bc90      	pop	{r4, r7}
80005724:	4770      	bx	lr
80005726:	bf00      	nop
80005728:	ffff80c0 	.word	0xffff80c0
8000572c:	ffff8080 	.word	0xffff8080
80005730:	ffffc080 	.word	0xffffc080

80005734 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
80005734:	b480      	push	{r7}
80005736:	b083      	sub	sp, #12
80005738:	af00      	add	r7, sp, #0
8000573a:	6078      	str	r0, [r7, #4]
8000573c:	460b      	mov	r3, r1
8000573e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
80005740:	78fb      	ldrb	r3, [r7, #3]
80005742:	2b00      	cmp	r3, #0
80005744:	d103      	bne.n	8000574e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
80005746:	687b      	ldr	r3, [r7, #4]
80005748:	2280      	movs	r2, #128	; 0x80
8000574a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
8000574e:	2300      	movs	r3, #0
}
80005750:	4618      	mov	r0, r3
80005752:	370c      	adds	r7, #12
80005754:	46bd      	mov	sp, r7
80005756:	bc80      	pop	{r7}
80005758:	4770      	bx	lr

8000575a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
8000575a:	b480      	push	{r7}
8000575c:	b083      	sub	sp, #12
8000575e:	af00      	add	r7, sp, #0
80005760:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
80005762:	2300      	movs	r3, #0
}
80005764:	4618      	mov	r0, r3
80005766:	370c      	adds	r7, #12
80005768:	46bd      	mov	sp, r7
8000576a:	bc80      	pop	{r7}
8000576c:	4770      	bx	lr

8000576e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
8000576e:	b480      	push	{r7}
80005770:	b083      	sub	sp, #12
80005772:	af00      	add	r7, sp, #0
80005774:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
80005776:	2300      	movs	r3, #0
}
80005778:	4618      	mov	r0, r3
8000577a:	370c      	adds	r7, #12
8000577c:	46bd      	mov	sp, r7
8000577e:	bc80      	pop	{r7}
80005780:	4770      	bx	lr

80005782 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
80005782:	b480      	push	{r7}
80005784:	b085      	sub	sp, #20
80005786:	af00      	add	r7, sp, #0
80005788:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
8000578a:	687b      	ldr	r3, [r7, #4]
8000578c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
80005790:	b29b      	uxth	r3, r3
80005792:	60fb      	str	r3, [r7, #12]
  return tmpreg;
80005794:	68fb      	ldr	r3, [r7, #12]
}
80005796:	4618      	mov	r0, r3
80005798:	3714      	adds	r7, #20
8000579a:	46bd      	mov	sp, r7
8000579c:	bc80      	pop	{r7}
8000579e:	4770      	bx	lr

800057a0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
800057a0:	b480      	push	{r7}
800057a2:	b083      	sub	sp, #12
800057a4:	af00      	add	r7, sp, #0
800057a6:	6078      	str	r0, [r7, #4]
800057a8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
800057aa:	2300      	movs	r3, #0
}
800057ac:	4618      	mov	r0, r3
800057ae:	370c      	adds	r7, #12
800057b0:	46bd      	mov	sp, r7
800057b2:	bc80      	pop	{r7}
800057b4:	4770      	bx	lr

800057b6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
800057b6:	b480      	push	{r7}
800057b8:	b08d      	sub	sp, #52	; 0x34
800057ba:	af00      	add	r7, sp, #0
800057bc:	60f8      	str	r0, [r7, #12]
800057be:	60b9      	str	r1, [r7, #8]
800057c0:	4611      	mov	r1, r2
800057c2:	461a      	mov	r2, r3
800057c4:	460b      	mov	r3, r1
800057c6:	80fb      	strh	r3, [r7, #6]
800057c8:	4613      	mov	r3, r2
800057ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
800057cc:	88bb      	ldrh	r3, [r7, #4]
800057ce:	3301      	adds	r3, #1
800057d0:	085b      	lsrs	r3, r3, #1
800057d2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
800057d4:	68fb      	ldr	r3, [r7, #12]
800057d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
800057d8:	68bb      	ldr	r3, [r7, #8]
800057da:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
800057dc:	88fb      	ldrh	r3, [r7, #6]
800057de:	005a      	lsls	r2, r3, #1
800057e0:	69fb      	ldr	r3, [r7, #28]
800057e2:	4413      	add	r3, r2
800057e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
800057e8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
800057ea:	6a3b      	ldr	r3, [r7, #32]
800057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
800057ee:	e01e      	b.n	8000582e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
800057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
800057f2:	781b      	ldrb	r3, [r3, #0]
800057f4:	61bb      	str	r3, [r7, #24]
    pBuf++;
800057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
800057f8:	3301      	adds	r3, #1
800057fa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
800057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
800057fe:	781b      	ldrb	r3, [r3, #0]
80005800:	b29b      	uxth	r3, r3
80005802:	021b      	lsls	r3, r3, #8
80005804:	b29b      	uxth	r3, r3
80005806:	461a      	mov	r2, r3
80005808:	69bb      	ldr	r3, [r7, #24]
8000580a:	4313      	orrs	r3, r2
8000580c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
8000580e:	697b      	ldr	r3, [r7, #20]
80005810:	b29a      	uxth	r2, r3
80005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005814:	801a      	strh	r2, [r3, #0]
    pdwVal++;
80005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
80005818:	3302      	adds	r3, #2
8000581a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
8000581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
8000581e:	3302      	adds	r3, #2
80005820:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
80005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
80005824:	3301      	adds	r3, #1
80005826:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
80005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
8000582a:	3b01      	subs	r3, #1
8000582c:	62fb      	str	r3, [r7, #44]	; 0x2c
8000582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
80005830:	2b00      	cmp	r3, #0
80005832:	d1dd      	bne.n	800057f0 <USB_WritePMA+0x3a>
  }
}
80005834:	bf00      	nop
80005836:	3734      	adds	r7, #52	; 0x34
80005838:	46bd      	mov	sp, r7
8000583a:	bc80      	pop	{r7}
8000583c:	4770      	bx	lr

8000583e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
8000583e:	b480      	push	{r7}
80005840:	b08b      	sub	sp, #44	; 0x2c
80005842:	af00      	add	r7, sp, #0
80005844:	60f8      	str	r0, [r7, #12]
80005846:	60b9      	str	r1, [r7, #8]
80005848:	4611      	mov	r1, r2
8000584a:	461a      	mov	r2, r3
8000584c:	460b      	mov	r3, r1
8000584e:	80fb      	strh	r3, [r7, #6]
80005850:	4613      	mov	r3, r2
80005852:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
80005854:	88bb      	ldrh	r3, [r7, #4]
80005856:	085b      	lsrs	r3, r3, #1
80005858:	b29b      	uxth	r3, r3
8000585a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
8000585c:	68fb      	ldr	r3, [r7, #12]
8000585e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
80005860:	68bb      	ldr	r3, [r7, #8]
80005862:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
80005864:	88fb      	ldrh	r3, [r7, #6]
80005866:	005a      	lsls	r2, r3, #1
80005868:	697b      	ldr	r3, [r7, #20]
8000586a:	4413      	add	r3, r2
8000586c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
80005870:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
80005872:	69bb      	ldr	r3, [r7, #24]
80005874:	627b      	str	r3, [r7, #36]	; 0x24
80005876:	e01b      	b.n	800058b0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
80005878:	6a3b      	ldr	r3, [r7, #32]
8000587a:	881b      	ldrh	r3, [r3, #0]
8000587c:	b29b      	uxth	r3, r3
8000587e:	613b      	str	r3, [r7, #16]
    pdwVal++;
80005880:	6a3b      	ldr	r3, [r7, #32]
80005882:	3302      	adds	r3, #2
80005884:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
80005886:	693b      	ldr	r3, [r7, #16]
80005888:	b2da      	uxtb	r2, r3
8000588a:	69fb      	ldr	r3, [r7, #28]
8000588c:	701a      	strb	r2, [r3, #0]
    pBuf++;
8000588e:	69fb      	ldr	r3, [r7, #28]
80005890:	3301      	adds	r3, #1
80005892:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
80005894:	693b      	ldr	r3, [r7, #16]
80005896:	0a1b      	lsrs	r3, r3, #8
80005898:	b2da      	uxtb	r2, r3
8000589a:	69fb      	ldr	r3, [r7, #28]
8000589c:	701a      	strb	r2, [r3, #0]
    pBuf++;
8000589e:	69fb      	ldr	r3, [r7, #28]
800058a0:	3301      	adds	r3, #1
800058a2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
800058a4:	6a3b      	ldr	r3, [r7, #32]
800058a6:	3302      	adds	r3, #2
800058a8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
800058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
800058ac:	3b01      	subs	r3, #1
800058ae:	627b      	str	r3, [r7, #36]	; 0x24
800058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
800058b2:	2b00      	cmp	r3, #0
800058b4:	d1e0      	bne.n	80005878 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
800058b6:	88bb      	ldrh	r3, [r7, #4]
800058b8:	f003 0301 	and.w	r3, r3, #1
800058bc:	b29b      	uxth	r3, r3
800058be:	2b00      	cmp	r3, #0
800058c0:	d007      	beq.n	800058d2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
800058c2:	6a3b      	ldr	r3, [r7, #32]
800058c4:	881b      	ldrh	r3, [r3, #0]
800058c6:	b29b      	uxth	r3, r3
800058c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
800058ca:	693b      	ldr	r3, [r7, #16]
800058cc:	b2da      	uxtb	r2, r3
800058ce:	69fb      	ldr	r3, [r7, #28]
800058d0:	701a      	strb	r2, [r3, #0]
  }
}
800058d2:	bf00      	nop
800058d4:	372c      	adds	r7, #44	; 0x2c
800058d6:	46bd      	mov	sp, r7
800058d8:	bc80      	pop	{r7}
800058da:	4770      	bx	lr

800058dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
800058dc:	b580      	push	{r7, lr}
800058de:	b084      	sub	sp, #16
800058e0:	af00      	add	r7, sp, #0
800058e2:	6078      	str	r0, [r7, #4]
800058e4:	460b      	mov	r3, r1
800058e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
800058e8:	2300      	movs	r3, #0
800058ea:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
800058ec:	687b      	ldr	r3, [r7, #4]
800058ee:	7c1b      	ldrb	r3, [r3, #16]
800058f0:	2b00      	cmp	r3, #0
800058f2:	d115      	bne.n	80005920 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
800058f4:	f44f 7300 	mov.w	r3, #512	; 0x200
800058f8:	2202      	movs	r2, #2
800058fa:	2181      	movs	r1, #129	; 0x81
800058fc:	6878      	ldr	r0, [r7, #4]
800058fe:	f001 feae 	bl	8000765e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
80005902:	687b      	ldr	r3, [r7, #4]
80005904:	2201      	movs	r2, #1
80005906:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
80005908:	f44f 7300 	mov.w	r3, #512	; 0x200
8000590c:	2202      	movs	r2, #2
8000590e:	2101      	movs	r1, #1
80005910:	6878      	ldr	r0, [r7, #4]
80005912:	f001 fea4 	bl	8000765e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
80005916:	687b      	ldr	r3, [r7, #4]
80005918:	2201      	movs	r2, #1
8000591a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
8000591e:	e012      	b.n	80005946 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
80005920:	2340      	movs	r3, #64	; 0x40
80005922:	2202      	movs	r2, #2
80005924:	2181      	movs	r1, #129	; 0x81
80005926:	6878      	ldr	r0, [r7, #4]
80005928:	f001 fe99 	bl	8000765e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
8000592c:	687b      	ldr	r3, [r7, #4]
8000592e:	2201      	movs	r2, #1
80005930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
80005932:	2340      	movs	r3, #64	; 0x40
80005934:	2202      	movs	r2, #2
80005936:	2101      	movs	r1, #1
80005938:	6878      	ldr	r0, [r7, #4]
8000593a:	f001 fe90 	bl	8000765e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
8000593e:	687b      	ldr	r3, [r7, #4]
80005940:	2201      	movs	r2, #1
80005942:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
80005946:	2308      	movs	r3, #8
80005948:	2203      	movs	r2, #3
8000594a:	2182      	movs	r1, #130	; 0x82
8000594c:	6878      	ldr	r0, [r7, #4]
8000594e:	f001 fe86 	bl	8000765e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
80005952:	687b      	ldr	r3, [r7, #4]
80005954:	2201      	movs	r2, #1
80005956:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
80005958:	f44f 7007 	mov.w	r0, #540	; 0x21c
8000595c:	f001 ffa0 	bl	800078a0 <USBD_static_malloc>
80005960:	4602      	mov	r2, r0
80005962:	687b      	ldr	r3, [r7, #4]
80005964:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
80005968:	687b      	ldr	r3, [r7, #4]
8000596a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
8000596e:	2b00      	cmp	r3, #0
80005970:	d102      	bne.n	80005978 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
80005972:	2301      	movs	r3, #1
80005974:	73fb      	strb	r3, [r7, #15]
80005976:	e026      	b.n	800059c6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
80005978:	687b      	ldr	r3, [r7, #4]
8000597a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
8000597e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
80005980:	687b      	ldr	r3, [r7, #4]
80005982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
80005986:	681b      	ldr	r3, [r3, #0]
80005988:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
8000598a:	68bb      	ldr	r3, [r7, #8]
8000598c:	2200      	movs	r2, #0
8000598e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
80005992:	68bb      	ldr	r3, [r7, #8]
80005994:	2200      	movs	r2, #0
80005996:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
8000599a:	687b      	ldr	r3, [r7, #4]
8000599c:	7c1b      	ldrb	r3, [r3, #16]
8000599e:	2b00      	cmp	r3, #0
800059a0:	d109      	bne.n	800059b6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
800059a2:	68bb      	ldr	r3, [r7, #8]
800059a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
800059a8:	f44f 7300 	mov.w	r3, #512	; 0x200
800059ac:	2101      	movs	r1, #1
800059ae:	6878      	ldr	r0, [r7, #4]
800059b0:	f001 ff3f 	bl	80007832 <USBD_LL_PrepareReceive>
800059b4:	e007      	b.n	800059c6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
800059b6:	68bb      	ldr	r3, [r7, #8]
800059b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
800059bc:	2340      	movs	r3, #64	; 0x40
800059be:	2101      	movs	r1, #1
800059c0:	6878      	ldr	r0, [r7, #4]
800059c2:	f001 ff36 	bl	80007832 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
800059c6:	7bfb      	ldrb	r3, [r7, #15]
}
800059c8:	4618      	mov	r0, r3
800059ca:	3710      	adds	r7, #16
800059cc:	46bd      	mov	sp, r7
800059ce:	bd80      	pop	{r7, pc}

800059d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
800059d0:	b580      	push	{r7, lr}
800059d2:	b084      	sub	sp, #16
800059d4:	af00      	add	r7, sp, #0
800059d6:	6078      	str	r0, [r7, #4]
800059d8:	460b      	mov	r3, r1
800059da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
800059dc:	2300      	movs	r3, #0
800059de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
800059e0:	2181      	movs	r1, #129	; 0x81
800059e2:	6878      	ldr	r0, [r7, #4]
800059e4:	f001 fe61 	bl	800076aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
800059e8:	687b      	ldr	r3, [r7, #4]
800059ea:	2200      	movs	r2, #0
800059ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
800059ee:	2101      	movs	r1, #1
800059f0:	6878      	ldr	r0, [r7, #4]
800059f2:	f001 fe5a 	bl	800076aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
800059f6:	687b      	ldr	r3, [r7, #4]
800059f8:	2200      	movs	r2, #0
800059fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
800059fe:	2182      	movs	r1, #130	; 0x82
80005a00:	6878      	ldr	r0, [r7, #4]
80005a02:	f001 fe52 	bl	800076aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
80005a06:	687b      	ldr	r3, [r7, #4]
80005a08:	2200      	movs	r2, #0
80005a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
80005a0c:	687b      	ldr	r3, [r7, #4]
80005a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005a12:	2b00      	cmp	r3, #0
80005a14:	d00e      	beq.n	80005a34 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
80005a16:	687b      	ldr	r3, [r7, #4]
80005a18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
80005a1c:	685b      	ldr	r3, [r3, #4]
80005a1e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
80005a20:	687b      	ldr	r3, [r7, #4]
80005a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005a26:	4618      	mov	r0, r3
80005a28:	f001 ff46 	bl	800078b8 <USBD_static_free>
    pdev->pClassData = NULL;
80005a2c:	687b      	ldr	r3, [r7, #4]
80005a2e:	2200      	movs	r2, #0
80005a30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
80005a34:	7bfb      	ldrb	r3, [r7, #15]
}
80005a36:	4618      	mov	r0, r3
80005a38:	3710      	adds	r7, #16
80005a3a:	46bd      	mov	sp, r7
80005a3c:	bd80      	pop	{r7, pc}

80005a3e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
80005a3e:	b580      	push	{r7, lr}
80005a40:	b086      	sub	sp, #24
80005a42:	af00      	add	r7, sp, #0
80005a44:	6078      	str	r0, [r7, #4]
80005a46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
80005a48:	687b      	ldr	r3, [r7, #4]
80005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005a4e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
80005a50:	2300      	movs	r3, #0
80005a52:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
80005a54:	2300      	movs	r3, #0
80005a56:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
80005a58:	2300      	movs	r3, #0
80005a5a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
80005a5c:	683b      	ldr	r3, [r7, #0]
80005a5e:	781b      	ldrb	r3, [r3, #0]
80005a60:	f003 0360 	and.w	r3, r3, #96	; 0x60
80005a64:	2b00      	cmp	r3, #0
80005a66:	d039      	beq.n	80005adc <USBD_CDC_Setup+0x9e>
80005a68:	2b20      	cmp	r3, #32
80005a6a:	d17c      	bne.n	80005b66 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
80005a6c:	683b      	ldr	r3, [r7, #0]
80005a6e:	88db      	ldrh	r3, [r3, #6]
80005a70:	2b00      	cmp	r3, #0
80005a72:	d029      	beq.n	80005ac8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
80005a74:	683b      	ldr	r3, [r7, #0]
80005a76:	781b      	ldrb	r3, [r3, #0]
80005a78:	b25b      	sxtb	r3, r3
80005a7a:	2b00      	cmp	r3, #0
80005a7c:	da11      	bge.n	80005aa2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
80005a7e:	687b      	ldr	r3, [r7, #4]
80005a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
80005a84:	689b      	ldr	r3, [r3, #8]
80005a86:	683a      	ldr	r2, [r7, #0]
80005a88:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
80005a8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
80005a8c:	683a      	ldr	r2, [r7, #0]
80005a8e:	88d2      	ldrh	r2, [r2, #6]
80005a90:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
80005a92:	6939      	ldr	r1, [r7, #16]
80005a94:	683b      	ldr	r3, [r7, #0]
80005a96:	88db      	ldrh	r3, [r3, #6]
80005a98:	461a      	mov	r2, r3
80005a9a:	6878      	ldr	r0, [r7, #4]
80005a9c:	f001 f9f6 	bl	80006e8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
80005aa0:	e068      	b.n	80005b74 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
80005aa2:	683b      	ldr	r3, [r7, #0]
80005aa4:	785a      	ldrb	r2, [r3, #1]
80005aa6:	693b      	ldr	r3, [r7, #16]
80005aa8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
80005aac:	683b      	ldr	r3, [r7, #0]
80005aae:	88db      	ldrh	r3, [r3, #6]
80005ab0:	b2da      	uxtb	r2, r3
80005ab2:	693b      	ldr	r3, [r7, #16]
80005ab4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
80005ab8:	6939      	ldr	r1, [r7, #16]
80005aba:	683b      	ldr	r3, [r7, #0]
80005abc:	88db      	ldrh	r3, [r3, #6]
80005abe:	461a      	mov	r2, r3
80005ac0:	6878      	ldr	r0, [r7, #4]
80005ac2:	f001 fa11 	bl	80006ee8 <USBD_CtlPrepareRx>
      break;
80005ac6:	e055      	b.n	80005b74 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
80005ac8:	687b      	ldr	r3, [r7, #4]
80005aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
80005ace:	689b      	ldr	r3, [r3, #8]
80005ad0:	683a      	ldr	r2, [r7, #0]
80005ad2:	7850      	ldrb	r0, [r2, #1]
80005ad4:	2200      	movs	r2, #0
80005ad6:	6839      	ldr	r1, [r7, #0]
80005ad8:	4798      	blx	r3
      break;
80005ada:	e04b      	b.n	80005b74 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
80005adc:	683b      	ldr	r3, [r7, #0]
80005ade:	785b      	ldrb	r3, [r3, #1]
80005ae0:	2b0a      	cmp	r3, #10
80005ae2:	d017      	beq.n	80005b14 <USBD_CDC_Setup+0xd6>
80005ae4:	2b0b      	cmp	r3, #11
80005ae6:	d029      	beq.n	80005b3c <USBD_CDC_Setup+0xfe>
80005ae8:	2b00      	cmp	r3, #0
80005aea:	d133      	bne.n	80005b54 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
80005aec:	687b      	ldr	r3, [r7, #4]
80005aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80005af2:	2b03      	cmp	r3, #3
80005af4:	d107      	bne.n	80005b06 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
80005af6:	f107 030c 	add.w	r3, r7, #12
80005afa:	2202      	movs	r2, #2
80005afc:	4619      	mov	r1, r3
80005afe:	6878      	ldr	r0, [r7, #4]
80005b00:	f001 f9c4 	bl	80006e8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
80005b04:	e02e      	b.n	80005b64 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
80005b06:	6839      	ldr	r1, [r7, #0]
80005b08:	6878      	ldr	r0, [r7, #4]
80005b0a:	f001 f955 	bl	80006db8 <USBD_CtlError>
            ret = USBD_FAIL;
80005b0e:	2302      	movs	r3, #2
80005b10:	75fb      	strb	r3, [r7, #23]
          break;
80005b12:	e027      	b.n	80005b64 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
80005b14:	687b      	ldr	r3, [r7, #4]
80005b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80005b1a:	2b03      	cmp	r3, #3
80005b1c:	d107      	bne.n	80005b2e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
80005b1e:	f107 030f 	add.w	r3, r7, #15
80005b22:	2201      	movs	r2, #1
80005b24:	4619      	mov	r1, r3
80005b26:	6878      	ldr	r0, [r7, #4]
80005b28:	f001 f9b0 	bl	80006e8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
80005b2c:	e01a      	b.n	80005b64 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
80005b2e:	6839      	ldr	r1, [r7, #0]
80005b30:	6878      	ldr	r0, [r7, #4]
80005b32:	f001 f941 	bl	80006db8 <USBD_CtlError>
            ret = USBD_FAIL;
80005b36:	2302      	movs	r3, #2
80005b38:	75fb      	strb	r3, [r7, #23]
          break;
80005b3a:	e013      	b.n	80005b64 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
80005b3c:	687b      	ldr	r3, [r7, #4]
80005b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80005b42:	2b03      	cmp	r3, #3
80005b44:	d00d      	beq.n	80005b62 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
80005b46:	6839      	ldr	r1, [r7, #0]
80005b48:	6878      	ldr	r0, [r7, #4]
80005b4a:	f001 f935 	bl	80006db8 <USBD_CtlError>
            ret = USBD_FAIL;
80005b4e:	2302      	movs	r3, #2
80005b50:	75fb      	strb	r3, [r7, #23]
          }
          break;
80005b52:	e006      	b.n	80005b62 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
80005b54:	6839      	ldr	r1, [r7, #0]
80005b56:	6878      	ldr	r0, [r7, #4]
80005b58:	f001 f92e 	bl	80006db8 <USBD_CtlError>
          ret = USBD_FAIL;
80005b5c:	2302      	movs	r3, #2
80005b5e:	75fb      	strb	r3, [r7, #23]
          break;
80005b60:	e000      	b.n	80005b64 <USBD_CDC_Setup+0x126>
          break;
80005b62:	bf00      	nop
      }
      break;
80005b64:	e006      	b.n	80005b74 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
80005b66:	6839      	ldr	r1, [r7, #0]
80005b68:	6878      	ldr	r0, [r7, #4]
80005b6a:	f001 f925 	bl	80006db8 <USBD_CtlError>
      ret = USBD_FAIL;
80005b6e:	2302      	movs	r3, #2
80005b70:	75fb      	strb	r3, [r7, #23]
      break;
80005b72:	bf00      	nop
  }

  return ret;
80005b74:	7dfb      	ldrb	r3, [r7, #23]
}
80005b76:	4618      	mov	r0, r3
80005b78:	3718      	adds	r7, #24
80005b7a:	46bd      	mov	sp, r7
80005b7c:	bd80      	pop	{r7, pc}

80005b7e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
80005b7e:	b580      	push	{r7, lr}
80005b80:	b084      	sub	sp, #16
80005b82:	af00      	add	r7, sp, #0
80005b84:	6078      	str	r0, [r7, #4]
80005b86:	460b      	mov	r3, r1
80005b88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
80005b8a:	687b      	ldr	r3, [r7, #4]
80005b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005b90:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
80005b92:	687b      	ldr	r3, [r7, #4]
80005b94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
80005b98:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
80005b9a:	687b      	ldr	r3, [r7, #4]
80005b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005ba0:	2b00      	cmp	r3, #0
80005ba2:	d037      	beq.n	80005c14 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
80005ba4:	78fa      	ldrb	r2, [r7, #3]
80005ba6:	6879      	ldr	r1, [r7, #4]
80005ba8:	4613      	mov	r3, r2
80005baa:	009b      	lsls	r3, r3, #2
80005bac:	4413      	add	r3, r2
80005bae:	009b      	lsls	r3, r3, #2
80005bb0:	440b      	add	r3, r1
80005bb2:	331c      	adds	r3, #28
80005bb4:	681b      	ldr	r3, [r3, #0]
80005bb6:	2b00      	cmp	r3, #0
80005bb8:	d026      	beq.n	80005c08 <USBD_CDC_DataIn+0x8a>
80005bba:	78fa      	ldrb	r2, [r7, #3]
80005bbc:	6879      	ldr	r1, [r7, #4]
80005bbe:	4613      	mov	r3, r2
80005bc0:	009b      	lsls	r3, r3, #2
80005bc2:	4413      	add	r3, r2
80005bc4:	009b      	lsls	r3, r3, #2
80005bc6:	440b      	add	r3, r1
80005bc8:	331c      	adds	r3, #28
80005bca:	681b      	ldr	r3, [r3, #0]
80005bcc:	78fa      	ldrb	r2, [r7, #3]
80005bce:	68b9      	ldr	r1, [r7, #8]
80005bd0:	0152      	lsls	r2, r2, #5
80005bd2:	440a      	add	r2, r1
80005bd4:	3238      	adds	r2, #56	; 0x38
80005bd6:	6812      	ldr	r2, [r2, #0]
80005bd8:	fbb3 f1f2 	udiv	r1, r3, r2
80005bdc:	fb02 f201 	mul.w	r2, r2, r1
80005be0:	1a9b      	subs	r3, r3, r2
80005be2:	2b00      	cmp	r3, #0
80005be4:	d110      	bne.n	80005c08 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
80005be6:	78fa      	ldrb	r2, [r7, #3]
80005be8:	6879      	ldr	r1, [r7, #4]
80005bea:	4613      	mov	r3, r2
80005bec:	009b      	lsls	r3, r3, #2
80005bee:	4413      	add	r3, r2
80005bf0:	009b      	lsls	r3, r3, #2
80005bf2:	440b      	add	r3, r1
80005bf4:	331c      	adds	r3, #28
80005bf6:	2200      	movs	r2, #0
80005bf8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
80005bfa:	78f9      	ldrb	r1, [r7, #3]
80005bfc:	2300      	movs	r3, #0
80005bfe:	2200      	movs	r2, #0
80005c00:	6878      	ldr	r0, [r7, #4]
80005c02:	f001 fdf3 	bl	800077ec <USBD_LL_Transmit>
80005c06:	e003      	b.n	80005c10 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
80005c08:	68fb      	ldr	r3, [r7, #12]
80005c0a:	2200      	movs	r2, #0
80005c0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
80005c10:	2300      	movs	r3, #0
80005c12:	e000      	b.n	80005c16 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
80005c14:	2302      	movs	r3, #2
  }
}
80005c16:	4618      	mov	r0, r3
80005c18:	3710      	adds	r7, #16
80005c1a:	46bd      	mov	sp, r7
80005c1c:	bd80      	pop	{r7, pc}

80005c1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
80005c1e:	b580      	push	{r7, lr}
80005c20:	b084      	sub	sp, #16
80005c22:	af00      	add	r7, sp, #0
80005c24:	6078      	str	r0, [r7, #4]
80005c26:	460b      	mov	r3, r1
80005c28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
80005c2a:	687b      	ldr	r3, [r7, #4]
80005c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005c30:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
80005c32:	78fb      	ldrb	r3, [r7, #3]
80005c34:	4619      	mov	r1, r3
80005c36:	6878      	ldr	r0, [r7, #4]
80005c38:	f001 fe1e 	bl	80007878 <USBD_LL_GetRxDataSize>
80005c3c:	4602      	mov	r2, r0
80005c3e:	68fb      	ldr	r3, [r7, #12]
80005c40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
80005c44:	687b      	ldr	r3, [r7, #4]
80005c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005c4a:	2b00      	cmp	r3, #0
80005c4c:	d00d      	beq.n	80005c6a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
80005c4e:	687b      	ldr	r3, [r7, #4]
80005c50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
80005c54:	68db      	ldr	r3, [r3, #12]
80005c56:	68fa      	ldr	r2, [r7, #12]
80005c58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
80005c5c:	68fa      	ldr	r2, [r7, #12]
80005c5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
80005c62:	4611      	mov	r1, r2
80005c64:	4798      	blx	r3

    return USBD_OK;
80005c66:	2300      	movs	r3, #0
80005c68:	e000      	b.n	80005c6c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
80005c6a:	2302      	movs	r3, #2
  }
}
80005c6c:	4618      	mov	r0, r3
80005c6e:	3710      	adds	r7, #16
80005c70:	46bd      	mov	sp, r7
80005c72:	bd80      	pop	{r7, pc}

80005c74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
80005c74:	b580      	push	{r7, lr}
80005c76:	b084      	sub	sp, #16
80005c78:	af00      	add	r7, sp, #0
80005c7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
80005c7c:	687b      	ldr	r3, [r7, #4]
80005c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005c82:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
80005c84:	687b      	ldr	r3, [r7, #4]
80005c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
80005c8a:	2b00      	cmp	r3, #0
80005c8c:	d015      	beq.n	80005cba <USBD_CDC_EP0_RxReady+0x46>
80005c8e:	68fb      	ldr	r3, [r7, #12]
80005c90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
80005c94:	2bff      	cmp	r3, #255	; 0xff
80005c96:	d010      	beq.n	80005cba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
80005c98:	687b      	ldr	r3, [r7, #4]
80005c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
80005c9e:	689b      	ldr	r3, [r3, #8]
80005ca0:	68fa      	ldr	r2, [r7, #12]
80005ca2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
80005ca6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
80005ca8:	68fa      	ldr	r2, [r7, #12]
80005caa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
80005cae:	b292      	uxth	r2, r2
80005cb0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
80005cb2:	68fb      	ldr	r3, [r7, #12]
80005cb4:	22ff      	movs	r2, #255	; 0xff
80005cb6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
80005cba:	2300      	movs	r3, #0
}
80005cbc:	4618      	mov	r0, r3
80005cbe:	3710      	adds	r7, #16
80005cc0:	46bd      	mov	sp, r7
80005cc2:	bd80      	pop	{r7, pc}

80005cc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
80005cc4:	b480      	push	{r7}
80005cc6:	b083      	sub	sp, #12
80005cc8:	af00      	add	r7, sp, #0
80005cca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
80005ccc:	687b      	ldr	r3, [r7, #4]
80005cce:	2243      	movs	r2, #67	; 0x43
80005cd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
80005cd2:	4b03      	ldr	r3, [pc, #12]	; (80005ce0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
80005cd4:	4618      	mov	r0, r3
80005cd6:	370c      	adds	r7, #12
80005cd8:	46bd      	mov	sp, r7
80005cda:	bc80      	pop	{r7}
80005cdc:	4770      	bx	lr
80005cde:	bf00      	nop
80005ce0:	20000098 	.word	0x20000098

80005ce4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
80005ce4:	b480      	push	{r7}
80005ce6:	b083      	sub	sp, #12
80005ce8:	af00      	add	r7, sp, #0
80005cea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
80005cec:	687b      	ldr	r3, [r7, #4]
80005cee:	2243      	movs	r2, #67	; 0x43
80005cf0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
80005cf2:	4b03      	ldr	r3, [pc, #12]	; (80005d00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
80005cf4:	4618      	mov	r0, r3
80005cf6:	370c      	adds	r7, #12
80005cf8:	46bd      	mov	sp, r7
80005cfa:	bc80      	pop	{r7}
80005cfc:	4770      	bx	lr
80005cfe:	bf00      	nop
80005d00:	20000054 	.word	0x20000054

80005d04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
80005d04:	b480      	push	{r7}
80005d06:	b083      	sub	sp, #12
80005d08:	af00      	add	r7, sp, #0
80005d0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
80005d0c:	687b      	ldr	r3, [r7, #4]
80005d0e:	2243      	movs	r2, #67	; 0x43
80005d10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
80005d12:	4b03      	ldr	r3, [pc, #12]	; (80005d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
80005d14:	4618      	mov	r0, r3
80005d16:	370c      	adds	r7, #12
80005d18:	46bd      	mov	sp, r7
80005d1a:	bc80      	pop	{r7}
80005d1c:	4770      	bx	lr
80005d1e:	bf00      	nop
80005d20:	200000dc 	.word	0x200000dc

80005d24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
80005d24:	b480      	push	{r7}
80005d26:	b083      	sub	sp, #12
80005d28:	af00      	add	r7, sp, #0
80005d2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
80005d2c:	687b      	ldr	r3, [r7, #4]
80005d2e:	220a      	movs	r2, #10
80005d30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
80005d32:	4b03      	ldr	r3, [pc, #12]	; (80005d40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
80005d34:	4618      	mov	r0, r3
80005d36:	370c      	adds	r7, #12
80005d38:	46bd      	mov	sp, r7
80005d3a:	bc80      	pop	{r7}
80005d3c:	4770      	bx	lr
80005d3e:	bf00      	nop
80005d40:	20000010 	.word	0x20000010

80005d44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
80005d44:	b480      	push	{r7}
80005d46:	b085      	sub	sp, #20
80005d48:	af00      	add	r7, sp, #0
80005d4a:	6078      	str	r0, [r7, #4]
80005d4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
80005d4e:	2302      	movs	r3, #2
80005d50:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
80005d52:	683b      	ldr	r3, [r7, #0]
80005d54:	2b00      	cmp	r3, #0
80005d56:	d005      	beq.n	80005d64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
80005d58:	687b      	ldr	r3, [r7, #4]
80005d5a:	683a      	ldr	r2, [r7, #0]
80005d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
80005d60:	2300      	movs	r3, #0
80005d62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
80005d64:	7bfb      	ldrb	r3, [r7, #15]
}
80005d66:	4618      	mov	r0, r3
80005d68:	3714      	adds	r7, #20
80005d6a:	46bd      	mov	sp, r7
80005d6c:	bc80      	pop	{r7}
80005d6e:	4770      	bx	lr

80005d70 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
80005d70:	b480      	push	{r7}
80005d72:	b087      	sub	sp, #28
80005d74:	af00      	add	r7, sp, #0
80005d76:	60f8      	str	r0, [r7, #12]
80005d78:	60b9      	str	r1, [r7, #8]
80005d7a:	4613      	mov	r3, r2
80005d7c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
80005d7e:	68fb      	ldr	r3, [r7, #12]
80005d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005d84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
80005d86:	697b      	ldr	r3, [r7, #20]
80005d88:	68ba      	ldr	r2, [r7, #8]
80005d8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
80005d8e:	88fa      	ldrh	r2, [r7, #6]
80005d90:	697b      	ldr	r3, [r7, #20]
80005d92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
80005d96:	2300      	movs	r3, #0
}
80005d98:	4618      	mov	r0, r3
80005d9a:	371c      	adds	r7, #28
80005d9c:	46bd      	mov	sp, r7
80005d9e:	bc80      	pop	{r7}
80005da0:	4770      	bx	lr

80005da2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
80005da2:	b480      	push	{r7}
80005da4:	b085      	sub	sp, #20
80005da6:	af00      	add	r7, sp, #0
80005da8:	6078      	str	r0, [r7, #4]
80005daa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
80005dac:	687b      	ldr	r3, [r7, #4]
80005dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005db2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
80005db4:	68fb      	ldr	r3, [r7, #12]
80005db6:	683a      	ldr	r2, [r7, #0]
80005db8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
80005dbc:	2300      	movs	r3, #0
}
80005dbe:	4618      	mov	r0, r3
80005dc0:	3714      	adds	r7, #20
80005dc2:	46bd      	mov	sp, r7
80005dc4:	bc80      	pop	{r7}
80005dc6:	4770      	bx	lr

80005dc8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
80005dc8:	b580      	push	{r7, lr}
80005dca:	b084      	sub	sp, #16
80005dcc:	af00      	add	r7, sp, #0
80005dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
80005dd0:	687b      	ldr	r3, [r7, #4]
80005dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005dd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
80005dd8:	687b      	ldr	r3, [r7, #4]
80005dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005dde:	2b00      	cmp	r3, #0
80005de0:	d01c      	beq.n	80005e1c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
80005de2:	68fb      	ldr	r3, [r7, #12]
80005de4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
80005de8:	2b00      	cmp	r3, #0
80005dea:	d115      	bne.n	80005e18 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
80005dec:	68fb      	ldr	r3, [r7, #12]
80005dee:	2201      	movs	r2, #1
80005df0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
80005df4:	68fb      	ldr	r3, [r7, #12]
80005df6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
80005dfa:	687b      	ldr	r3, [r7, #4]
80005dfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
80005dfe:	68fb      	ldr	r3, [r7, #12]
80005e00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
80005e04:	68fb      	ldr	r3, [r7, #12]
80005e06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
80005e0a:	b29b      	uxth	r3, r3
80005e0c:	2181      	movs	r1, #129	; 0x81
80005e0e:	6878      	ldr	r0, [r7, #4]
80005e10:	f001 fcec 	bl	800077ec <USBD_LL_Transmit>

      return USBD_OK;
80005e14:	2300      	movs	r3, #0
80005e16:	e002      	b.n	80005e1e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
80005e18:	2301      	movs	r3, #1
80005e1a:	e000      	b.n	80005e1e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
80005e1c:	2302      	movs	r3, #2
  }
}
80005e1e:	4618      	mov	r0, r3
80005e20:	3710      	adds	r7, #16
80005e22:	46bd      	mov	sp, r7
80005e24:	bd80      	pop	{r7, pc}

80005e26 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
80005e26:	b580      	push	{r7, lr}
80005e28:	b084      	sub	sp, #16
80005e2a:	af00      	add	r7, sp, #0
80005e2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
80005e2e:	687b      	ldr	r3, [r7, #4]
80005e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005e34:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
80005e36:	687b      	ldr	r3, [r7, #4]
80005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
80005e3c:	2b00      	cmp	r3, #0
80005e3e:	d017      	beq.n	80005e70 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
80005e40:	687b      	ldr	r3, [r7, #4]
80005e42:	7c1b      	ldrb	r3, [r3, #16]
80005e44:	2b00      	cmp	r3, #0
80005e46:	d109      	bne.n	80005e5c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
80005e48:	68fb      	ldr	r3, [r7, #12]
80005e4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
80005e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
80005e52:	2101      	movs	r1, #1
80005e54:	6878      	ldr	r0, [r7, #4]
80005e56:	f001 fcec 	bl	80007832 <USBD_LL_PrepareReceive>
80005e5a:	e007      	b.n	80005e6c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
80005e5c:	68fb      	ldr	r3, [r7, #12]
80005e5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
80005e62:	2340      	movs	r3, #64	; 0x40
80005e64:	2101      	movs	r1, #1
80005e66:	6878      	ldr	r0, [r7, #4]
80005e68:	f001 fce3 	bl	80007832 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
80005e6c:	2300      	movs	r3, #0
80005e6e:	e000      	b.n	80005e72 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
80005e70:	2302      	movs	r3, #2
  }
}
80005e72:	4618      	mov	r0, r3
80005e74:	3710      	adds	r7, #16
80005e76:	46bd      	mov	sp, r7
80005e78:	bd80      	pop	{r7, pc}

80005e7a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
80005e7a:	b580      	push	{r7, lr}
80005e7c:	b084      	sub	sp, #16
80005e7e:	af00      	add	r7, sp, #0
80005e80:	60f8      	str	r0, [r7, #12]
80005e82:	60b9      	str	r1, [r7, #8]
80005e84:	4613      	mov	r3, r2
80005e86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
80005e88:	68fb      	ldr	r3, [r7, #12]
80005e8a:	2b00      	cmp	r3, #0
80005e8c:	d101      	bne.n	80005e92 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
80005e8e:	2302      	movs	r3, #2
80005e90:	e01a      	b.n	80005ec8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
80005e92:	68fb      	ldr	r3, [r7, #12]
80005e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80005e98:	2b00      	cmp	r3, #0
80005e9a:	d003      	beq.n	80005ea4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
80005e9c:	68fb      	ldr	r3, [r7, #12]
80005e9e:	2200      	movs	r2, #0
80005ea0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
80005ea4:	68bb      	ldr	r3, [r7, #8]
80005ea6:	2b00      	cmp	r3, #0
80005ea8:	d003      	beq.n	80005eb2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
80005eaa:	68fb      	ldr	r3, [r7, #12]
80005eac:	68ba      	ldr	r2, [r7, #8]
80005eae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
80005eb2:	68fb      	ldr	r3, [r7, #12]
80005eb4:	2201      	movs	r2, #1
80005eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
80005eba:	68fb      	ldr	r3, [r7, #12]
80005ebc:	79fa      	ldrb	r2, [r7, #7]
80005ebe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
80005ec0:	68f8      	ldr	r0, [r7, #12]
80005ec2:	f001 fb57 	bl	80007574 <USBD_LL_Init>

  return USBD_OK;
80005ec6:	2300      	movs	r3, #0
}
80005ec8:	4618      	mov	r0, r3
80005eca:	3710      	adds	r7, #16
80005ecc:	46bd      	mov	sp, r7
80005ece:	bd80      	pop	{r7, pc}

80005ed0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
80005ed0:	b480      	push	{r7}
80005ed2:	b085      	sub	sp, #20
80005ed4:	af00      	add	r7, sp, #0
80005ed6:	6078      	str	r0, [r7, #4]
80005ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
80005eda:	2300      	movs	r3, #0
80005edc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
80005ede:	683b      	ldr	r3, [r7, #0]
80005ee0:	2b00      	cmp	r3, #0
80005ee2:	d006      	beq.n	80005ef2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
80005ee4:	687b      	ldr	r3, [r7, #4]
80005ee6:	683a      	ldr	r2, [r7, #0]
80005ee8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
80005eec:	2300      	movs	r3, #0
80005eee:	73fb      	strb	r3, [r7, #15]
80005ef0:	e001      	b.n	80005ef6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
80005ef2:	2302      	movs	r3, #2
80005ef4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
80005ef6:	7bfb      	ldrb	r3, [r7, #15]
}
80005ef8:	4618      	mov	r0, r3
80005efa:	3714      	adds	r7, #20
80005efc:	46bd      	mov	sp, r7
80005efe:	bc80      	pop	{r7}
80005f00:	4770      	bx	lr

80005f02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
80005f02:	b580      	push	{r7, lr}
80005f04:	b082      	sub	sp, #8
80005f06:	af00      	add	r7, sp, #0
80005f08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
80005f0a:	6878      	ldr	r0, [r7, #4]
80005f0c:	f001 fb8c 	bl	80007628 <USBD_LL_Start>

  return USBD_OK;
80005f10:	2300      	movs	r3, #0
}
80005f12:	4618      	mov	r0, r3
80005f14:	3708      	adds	r7, #8
80005f16:	46bd      	mov	sp, r7
80005f18:	bd80      	pop	{r7, pc}

80005f1a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
80005f1a:	b480      	push	{r7}
80005f1c:	b083      	sub	sp, #12
80005f1e:	af00      	add	r7, sp, #0
80005f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
80005f22:	2300      	movs	r3, #0
}
80005f24:	4618      	mov	r0, r3
80005f26:	370c      	adds	r7, #12
80005f28:	46bd      	mov	sp, r7
80005f2a:	bc80      	pop	{r7}
80005f2c:	4770      	bx	lr

80005f2e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
80005f2e:	b580      	push	{r7, lr}
80005f30:	b084      	sub	sp, #16
80005f32:	af00      	add	r7, sp, #0
80005f34:	6078      	str	r0, [r7, #4]
80005f36:	460b      	mov	r3, r1
80005f38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
80005f3a:	2302      	movs	r3, #2
80005f3c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
80005f3e:	687b      	ldr	r3, [r7, #4]
80005f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80005f44:	2b00      	cmp	r3, #0
80005f46:	d00c      	beq.n	80005f62 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
80005f48:	687b      	ldr	r3, [r7, #4]
80005f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80005f4e:	681b      	ldr	r3, [r3, #0]
80005f50:	78fa      	ldrb	r2, [r7, #3]
80005f52:	4611      	mov	r1, r2
80005f54:	6878      	ldr	r0, [r7, #4]
80005f56:	4798      	blx	r3
80005f58:	4603      	mov	r3, r0
80005f5a:	2b00      	cmp	r3, #0
80005f5c:	d101      	bne.n	80005f62 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
80005f5e:	2300      	movs	r3, #0
80005f60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
80005f62:	7bfb      	ldrb	r3, [r7, #15]
}
80005f64:	4618      	mov	r0, r3
80005f66:	3710      	adds	r7, #16
80005f68:	46bd      	mov	sp, r7
80005f6a:	bd80      	pop	{r7, pc}

80005f6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
80005f6c:	b580      	push	{r7, lr}
80005f6e:	b082      	sub	sp, #8
80005f70:	af00      	add	r7, sp, #0
80005f72:	6078      	str	r0, [r7, #4]
80005f74:	460b      	mov	r3, r1
80005f76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
80005f78:	687b      	ldr	r3, [r7, #4]
80005f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80005f7e:	685b      	ldr	r3, [r3, #4]
80005f80:	78fa      	ldrb	r2, [r7, #3]
80005f82:	4611      	mov	r1, r2
80005f84:	6878      	ldr	r0, [r7, #4]
80005f86:	4798      	blx	r3

  return USBD_OK;
80005f88:	2300      	movs	r3, #0
}
80005f8a:	4618      	mov	r0, r3
80005f8c:	3708      	adds	r7, #8
80005f8e:	46bd      	mov	sp, r7
80005f90:	bd80      	pop	{r7, pc}

80005f92 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
80005f92:	b580      	push	{r7, lr}
80005f94:	b082      	sub	sp, #8
80005f96:	af00      	add	r7, sp, #0
80005f98:	6078      	str	r0, [r7, #4]
80005f9a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
80005f9c:	687b      	ldr	r3, [r7, #4]
80005f9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
80005fa2:	6839      	ldr	r1, [r7, #0]
80005fa4:	4618      	mov	r0, r3
80005fa6:	f000 fecb 	bl	80006d40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
80005faa:	687b      	ldr	r3, [r7, #4]
80005fac:	2201      	movs	r2, #1
80005fae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
80005fb2:	687b      	ldr	r3, [r7, #4]
80005fb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
80005fb8:	461a      	mov	r2, r3
80005fba:	687b      	ldr	r3, [r7, #4]
80005fbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
80005fc0:	687b      	ldr	r3, [r7, #4]
80005fc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
80005fc6:	f003 031f 	and.w	r3, r3, #31
80005fca:	2b01      	cmp	r3, #1
80005fcc:	d00c      	beq.n	80005fe8 <USBD_LL_SetupStage+0x56>
80005fce:	2b01      	cmp	r3, #1
80005fd0:	d302      	bcc.n	80005fd8 <USBD_LL_SetupStage+0x46>
80005fd2:	2b02      	cmp	r3, #2
80005fd4:	d010      	beq.n	80005ff8 <USBD_LL_SetupStage+0x66>
80005fd6:	e017      	b.n	80006008 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
80005fd8:	687b      	ldr	r3, [r7, #4]
80005fda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
80005fde:	4619      	mov	r1, r3
80005fe0:	6878      	ldr	r0, [r7, #4]
80005fe2:	f000 f9cb 	bl	8000637c <USBD_StdDevReq>
      break;
80005fe6:	e01a      	b.n	8000601e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
80005fe8:	687b      	ldr	r3, [r7, #4]
80005fea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
80005fee:	4619      	mov	r1, r3
80005ff0:	6878      	ldr	r0, [r7, #4]
80005ff2:	f000 fa2d 	bl	80006450 <USBD_StdItfReq>
      break;
80005ff6:	e012      	b.n	8000601e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
80005ff8:	687b      	ldr	r3, [r7, #4]
80005ffa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
80005ffe:	4619      	mov	r1, r3
80006000:	6878      	ldr	r0, [r7, #4]
80006002:	f000 fa6b 	bl	800064dc <USBD_StdEPReq>
      break;
80006006:	e00a      	b.n	8000601e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
80006008:	687b      	ldr	r3, [r7, #4]
8000600a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
8000600e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
80006012:	b2db      	uxtb	r3, r3
80006014:	4619      	mov	r1, r3
80006016:	6878      	ldr	r0, [r7, #4]
80006018:	f001 fb66 	bl	800076e8 <USBD_LL_StallEP>
      break;
8000601c:	bf00      	nop
  }

  return USBD_OK;
8000601e:	2300      	movs	r3, #0
}
80006020:	4618      	mov	r0, r3
80006022:	3708      	adds	r7, #8
80006024:	46bd      	mov	sp, r7
80006026:	bd80      	pop	{r7, pc}

80006028 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
80006028:	b580      	push	{r7, lr}
8000602a:	b086      	sub	sp, #24
8000602c:	af00      	add	r7, sp, #0
8000602e:	60f8      	str	r0, [r7, #12]
80006030:	460b      	mov	r3, r1
80006032:	607a      	str	r2, [r7, #4]
80006034:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
80006036:	7afb      	ldrb	r3, [r7, #11]
80006038:	2b00      	cmp	r3, #0
8000603a:	d14b      	bne.n	800060d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
8000603c:	68fb      	ldr	r3, [r7, #12]
8000603e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
80006042:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
80006044:	68fb      	ldr	r3, [r7, #12]
80006046:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
8000604a:	2b03      	cmp	r3, #3
8000604c:	d134      	bne.n	800060b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
8000604e:	697b      	ldr	r3, [r7, #20]
80006050:	68da      	ldr	r2, [r3, #12]
80006052:	697b      	ldr	r3, [r7, #20]
80006054:	691b      	ldr	r3, [r3, #16]
80006056:	429a      	cmp	r2, r3
80006058:	d919      	bls.n	8000608e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
8000605a:	697b      	ldr	r3, [r7, #20]
8000605c:	68da      	ldr	r2, [r3, #12]
8000605e:	697b      	ldr	r3, [r7, #20]
80006060:	691b      	ldr	r3, [r3, #16]
80006062:	1ad2      	subs	r2, r2, r3
80006064:	697b      	ldr	r3, [r7, #20]
80006066:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
80006068:	697b      	ldr	r3, [r7, #20]
8000606a:	68da      	ldr	r2, [r3, #12]
8000606c:	697b      	ldr	r3, [r7, #20]
8000606e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
80006070:	429a      	cmp	r2, r3
80006072:	d203      	bcs.n	8000607c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
80006074:	697b      	ldr	r3, [r7, #20]
80006076:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
80006078:	b29b      	uxth	r3, r3
8000607a:	e002      	b.n	80006082 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
8000607c:	697b      	ldr	r3, [r7, #20]
8000607e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
80006080:	b29b      	uxth	r3, r3
80006082:	461a      	mov	r2, r3
80006084:	6879      	ldr	r1, [r7, #4]
80006086:	68f8      	ldr	r0, [r7, #12]
80006088:	f000 ff4c 	bl	80006f24 <USBD_CtlContinueRx>
8000608c:	e038      	b.n	80006100 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
8000608e:	68fb      	ldr	r3, [r7, #12]
80006090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80006094:	691b      	ldr	r3, [r3, #16]
80006096:	2b00      	cmp	r3, #0
80006098:	d00a      	beq.n	800060b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
8000609a:	68fb      	ldr	r3, [r7, #12]
8000609c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
800060a0:	2b03      	cmp	r3, #3
800060a2:	d105      	bne.n	800060b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
800060a4:	68fb      	ldr	r3, [r7, #12]
800060a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800060aa:	691b      	ldr	r3, [r3, #16]
800060ac:	68f8      	ldr	r0, [r7, #12]
800060ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
800060b0:	68f8      	ldr	r0, [r7, #12]
800060b2:	f000 ff49 	bl	80006f48 <USBD_CtlSendStatus>
800060b6:	e023      	b.n	80006100 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
800060b8:	68fb      	ldr	r3, [r7, #12]
800060ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
800060be:	2b05      	cmp	r3, #5
800060c0:	d11e      	bne.n	80006100 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
800060c2:	68fb      	ldr	r3, [r7, #12]
800060c4:	2200      	movs	r2, #0
800060c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
800060ca:	2100      	movs	r1, #0
800060cc:	68f8      	ldr	r0, [r7, #12]
800060ce:	f001 fb0b 	bl	800076e8 <USBD_LL_StallEP>
800060d2:	e015      	b.n	80006100 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
800060d4:	68fb      	ldr	r3, [r7, #12]
800060d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800060da:	699b      	ldr	r3, [r3, #24]
800060dc:	2b00      	cmp	r3, #0
800060de:	d00d      	beq.n	800060fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
800060e0:	68fb      	ldr	r3, [r7, #12]
800060e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
800060e6:	2b03      	cmp	r3, #3
800060e8:	d108      	bne.n	800060fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
800060ea:	68fb      	ldr	r3, [r7, #12]
800060ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800060f0:	699b      	ldr	r3, [r3, #24]
800060f2:	7afa      	ldrb	r2, [r7, #11]
800060f4:	4611      	mov	r1, r2
800060f6:	68f8      	ldr	r0, [r7, #12]
800060f8:	4798      	blx	r3
800060fa:	e001      	b.n	80006100 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
800060fc:	2302      	movs	r3, #2
800060fe:	e000      	b.n	80006102 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
80006100:	2300      	movs	r3, #0
}
80006102:	4618      	mov	r0, r3
80006104:	3718      	adds	r7, #24
80006106:	46bd      	mov	sp, r7
80006108:	bd80      	pop	{r7, pc}

8000610a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
8000610a:	b580      	push	{r7, lr}
8000610c:	b086      	sub	sp, #24
8000610e:	af00      	add	r7, sp, #0
80006110:	60f8      	str	r0, [r7, #12]
80006112:	460b      	mov	r3, r1
80006114:	607a      	str	r2, [r7, #4]
80006116:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
80006118:	7afb      	ldrb	r3, [r7, #11]
8000611a:	2b00      	cmp	r3, #0
8000611c:	d17f      	bne.n	8000621e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
8000611e:	68fb      	ldr	r3, [r7, #12]
80006120:	3314      	adds	r3, #20
80006122:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
80006124:	68fb      	ldr	r3, [r7, #12]
80006126:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
8000612a:	2b02      	cmp	r3, #2
8000612c:	d15c      	bne.n	800061e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
8000612e:	697b      	ldr	r3, [r7, #20]
80006130:	68da      	ldr	r2, [r3, #12]
80006132:	697b      	ldr	r3, [r7, #20]
80006134:	691b      	ldr	r3, [r3, #16]
80006136:	429a      	cmp	r2, r3
80006138:	d915      	bls.n	80006166 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
8000613a:	697b      	ldr	r3, [r7, #20]
8000613c:	68da      	ldr	r2, [r3, #12]
8000613e:	697b      	ldr	r3, [r7, #20]
80006140:	691b      	ldr	r3, [r3, #16]
80006142:	1ad2      	subs	r2, r2, r3
80006144:	697b      	ldr	r3, [r7, #20]
80006146:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
80006148:	697b      	ldr	r3, [r7, #20]
8000614a:	68db      	ldr	r3, [r3, #12]
8000614c:	b29b      	uxth	r3, r3
8000614e:	461a      	mov	r2, r3
80006150:	6879      	ldr	r1, [r7, #4]
80006152:	68f8      	ldr	r0, [r7, #12]
80006154:	f000 feb6 	bl	80006ec4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
80006158:	2300      	movs	r3, #0
8000615a:	2200      	movs	r2, #0
8000615c:	2100      	movs	r1, #0
8000615e:	68f8      	ldr	r0, [r7, #12]
80006160:	f001 fb67 	bl	80007832 <USBD_LL_PrepareReceive>
80006164:	e04e      	b.n	80006204 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
80006166:	697b      	ldr	r3, [r7, #20]
80006168:	689b      	ldr	r3, [r3, #8]
8000616a:	697a      	ldr	r2, [r7, #20]
8000616c:	6912      	ldr	r2, [r2, #16]
8000616e:	fbb3 f1f2 	udiv	r1, r3, r2
80006172:	fb02 f201 	mul.w	r2, r2, r1
80006176:	1a9b      	subs	r3, r3, r2
80006178:	2b00      	cmp	r3, #0
8000617a:	d11c      	bne.n	800061b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
8000617c:	697b      	ldr	r3, [r7, #20]
8000617e:	689a      	ldr	r2, [r3, #8]
80006180:	697b      	ldr	r3, [r7, #20]
80006182:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
80006184:	429a      	cmp	r2, r3
80006186:	d316      	bcc.n	800061b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
80006188:	697b      	ldr	r3, [r7, #20]
8000618a:	689a      	ldr	r2, [r3, #8]
8000618c:	68fb      	ldr	r3, [r7, #12]
8000618e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
80006192:	429a      	cmp	r2, r3
80006194:	d20f      	bcs.n	800061b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
80006196:	2200      	movs	r2, #0
80006198:	2100      	movs	r1, #0
8000619a:	68f8      	ldr	r0, [r7, #12]
8000619c:	f000 fe92 	bl	80006ec4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
800061a0:	68fb      	ldr	r3, [r7, #12]
800061a2:	2200      	movs	r2, #0
800061a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
800061a8:	2300      	movs	r3, #0
800061aa:	2200      	movs	r2, #0
800061ac:	2100      	movs	r1, #0
800061ae:	68f8      	ldr	r0, [r7, #12]
800061b0:	f001 fb3f 	bl	80007832 <USBD_LL_PrepareReceive>
800061b4:	e026      	b.n	80006204 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
800061b6:	68fb      	ldr	r3, [r7, #12]
800061b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800061bc:	68db      	ldr	r3, [r3, #12]
800061be:	2b00      	cmp	r3, #0
800061c0:	d00a      	beq.n	800061d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
800061c2:	68fb      	ldr	r3, [r7, #12]
800061c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
800061c8:	2b03      	cmp	r3, #3
800061ca:	d105      	bne.n	800061d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
800061cc:	68fb      	ldr	r3, [r7, #12]
800061ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800061d2:	68db      	ldr	r3, [r3, #12]
800061d4:	68f8      	ldr	r0, [r7, #12]
800061d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
800061d8:	2180      	movs	r1, #128	; 0x80
800061da:	68f8      	ldr	r0, [r7, #12]
800061dc:	f001 fa84 	bl	800076e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
800061e0:	68f8      	ldr	r0, [r7, #12]
800061e2:	f000 fec4 	bl	80006f6e <USBD_CtlReceiveStatus>
800061e6:	e00d      	b.n	80006204 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
800061e8:	68fb      	ldr	r3, [r7, #12]
800061ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
800061ee:	2b04      	cmp	r3, #4
800061f0:	d004      	beq.n	800061fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
800061f2:	68fb      	ldr	r3, [r7, #12]
800061f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
800061f8:	2b00      	cmp	r3, #0
800061fa:	d103      	bne.n	80006204 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
800061fc:	2180      	movs	r1, #128	; 0x80
800061fe:	68f8      	ldr	r0, [r7, #12]
80006200:	f001 fa72 	bl	800076e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
80006204:	68fb      	ldr	r3, [r7, #12]
80006206:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
8000620a:	2b01      	cmp	r3, #1
8000620c:	d11d      	bne.n	8000624a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
8000620e:	68f8      	ldr	r0, [r7, #12]
80006210:	f7ff fe83 	bl	80005f1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
80006214:	68fb      	ldr	r3, [r7, #12]
80006216:	2200      	movs	r2, #0
80006218:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
8000621c:	e015      	b.n	8000624a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
8000621e:	68fb      	ldr	r3, [r7, #12]
80006220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80006224:	695b      	ldr	r3, [r3, #20]
80006226:	2b00      	cmp	r3, #0
80006228:	d00d      	beq.n	80006246 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
8000622a:	68fb      	ldr	r3, [r7, #12]
8000622c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
80006230:	2b03      	cmp	r3, #3
80006232:	d108      	bne.n	80006246 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
80006234:	68fb      	ldr	r3, [r7, #12]
80006236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
8000623a:	695b      	ldr	r3, [r3, #20]
8000623c:	7afa      	ldrb	r2, [r7, #11]
8000623e:	4611      	mov	r1, r2
80006240:	68f8      	ldr	r0, [r7, #12]
80006242:	4798      	blx	r3
80006244:	e001      	b.n	8000624a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
80006246:	2302      	movs	r3, #2
80006248:	e000      	b.n	8000624c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
8000624a:	2300      	movs	r3, #0
}
8000624c:	4618      	mov	r0, r3
8000624e:	3718      	adds	r7, #24
80006250:	46bd      	mov	sp, r7
80006252:	bd80      	pop	{r7, pc}

80006254 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
80006254:	b580      	push	{r7, lr}
80006256:	b082      	sub	sp, #8
80006258:	af00      	add	r7, sp, #0
8000625a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
8000625c:	2340      	movs	r3, #64	; 0x40
8000625e:	2200      	movs	r2, #0
80006260:	2100      	movs	r1, #0
80006262:	6878      	ldr	r0, [r7, #4]
80006264:	f001 f9fb 	bl	8000765e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
80006268:	687b      	ldr	r3, [r7, #4]
8000626a:	2201      	movs	r2, #1
8000626c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
80006270:	687b      	ldr	r3, [r7, #4]
80006272:	2240      	movs	r2, #64	; 0x40
80006274:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
80006278:	2340      	movs	r3, #64	; 0x40
8000627a:	2200      	movs	r2, #0
8000627c:	2180      	movs	r1, #128	; 0x80
8000627e:	6878      	ldr	r0, [r7, #4]
80006280:	f001 f9ed 	bl	8000765e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
80006284:	687b      	ldr	r3, [r7, #4]
80006286:	2201      	movs	r2, #1
80006288:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
8000628a:	687b      	ldr	r3, [r7, #4]
8000628c:	2240      	movs	r2, #64	; 0x40
8000628e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
80006290:	687b      	ldr	r3, [r7, #4]
80006292:	2201      	movs	r2, #1
80006294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
80006298:	687b      	ldr	r3, [r7, #4]
8000629a:	2200      	movs	r2, #0
8000629c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
800062a0:	687b      	ldr	r3, [r7, #4]
800062a2:	2200      	movs	r2, #0
800062a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
800062a6:	687b      	ldr	r3, [r7, #4]
800062a8:	2200      	movs	r2, #0
800062aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
800062ae:	687b      	ldr	r3, [r7, #4]
800062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
800062b4:	2b00      	cmp	r3, #0
800062b6:	d009      	beq.n	800062cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
800062b8:	687b      	ldr	r3, [r7, #4]
800062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800062be:	685b      	ldr	r3, [r3, #4]
800062c0:	687a      	ldr	r2, [r7, #4]
800062c2:	6852      	ldr	r2, [r2, #4]
800062c4:	b2d2      	uxtb	r2, r2
800062c6:	4611      	mov	r1, r2
800062c8:	6878      	ldr	r0, [r7, #4]
800062ca:	4798      	blx	r3
  }

  return USBD_OK;
800062cc:	2300      	movs	r3, #0
}
800062ce:	4618      	mov	r0, r3
800062d0:	3708      	adds	r7, #8
800062d2:	46bd      	mov	sp, r7
800062d4:	bd80      	pop	{r7, pc}

800062d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
800062d6:	b480      	push	{r7}
800062d8:	b083      	sub	sp, #12
800062da:	af00      	add	r7, sp, #0
800062dc:	6078      	str	r0, [r7, #4]
800062de:	460b      	mov	r3, r1
800062e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
800062e2:	687b      	ldr	r3, [r7, #4]
800062e4:	78fa      	ldrb	r2, [r7, #3]
800062e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
800062e8:	2300      	movs	r3, #0
}
800062ea:	4618      	mov	r0, r3
800062ec:	370c      	adds	r7, #12
800062ee:	46bd      	mov	sp, r7
800062f0:	bc80      	pop	{r7}
800062f2:	4770      	bx	lr

800062f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
800062f4:	b480      	push	{r7}
800062f6:	b083      	sub	sp, #12
800062f8:	af00      	add	r7, sp, #0
800062fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
800062fc:	687b      	ldr	r3, [r7, #4]
800062fe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
80006302:	687b      	ldr	r3, [r7, #4]
80006304:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
80006308:	687b      	ldr	r3, [r7, #4]
8000630a:	2204      	movs	r2, #4
8000630c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
80006310:	2300      	movs	r3, #0
}
80006312:	4618      	mov	r0, r3
80006314:	370c      	adds	r7, #12
80006316:	46bd      	mov	sp, r7
80006318:	bc80      	pop	{r7}
8000631a:	4770      	bx	lr

8000631c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
8000631c:	b480      	push	{r7}
8000631e:	b083      	sub	sp, #12
80006320:	af00      	add	r7, sp, #0
80006322:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
80006324:	687b      	ldr	r3, [r7, #4]
80006326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
8000632a:	2b04      	cmp	r3, #4
8000632c:	d105      	bne.n	8000633a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
8000632e:	687b      	ldr	r3, [r7, #4]
80006330:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
80006334:	687b      	ldr	r3, [r7, #4]
80006336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
8000633a:	2300      	movs	r3, #0
}
8000633c:	4618      	mov	r0, r3
8000633e:	370c      	adds	r7, #12
80006340:	46bd      	mov	sp, r7
80006342:	bc80      	pop	{r7}
80006344:	4770      	bx	lr

80006346 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
80006346:	b580      	push	{r7, lr}
80006348:	b082      	sub	sp, #8
8000634a:	af00      	add	r7, sp, #0
8000634c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
8000634e:	687b      	ldr	r3, [r7, #4]
80006350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006354:	2b03      	cmp	r3, #3
80006356:	d10b      	bne.n	80006370 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
80006358:	687b      	ldr	r3, [r7, #4]
8000635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
8000635e:	69db      	ldr	r3, [r3, #28]
80006360:	2b00      	cmp	r3, #0
80006362:	d005      	beq.n	80006370 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
80006364:	687b      	ldr	r3, [r7, #4]
80006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
8000636a:	69db      	ldr	r3, [r3, #28]
8000636c:	6878      	ldr	r0, [r7, #4]
8000636e:	4798      	blx	r3
    }
  }

  return USBD_OK;
80006370:	2300      	movs	r3, #0
}
80006372:	4618      	mov	r0, r3
80006374:	3708      	adds	r7, #8
80006376:	46bd      	mov	sp, r7
80006378:	bd80      	pop	{r7, pc}
	...

8000637c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
8000637c:	b580      	push	{r7, lr}
8000637e:	b084      	sub	sp, #16
80006380:	af00      	add	r7, sp, #0
80006382:	6078      	str	r0, [r7, #4]
80006384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
80006386:	2300      	movs	r3, #0
80006388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
8000638a:	683b      	ldr	r3, [r7, #0]
8000638c:	781b      	ldrb	r3, [r3, #0]
8000638e:	f003 0360 	and.w	r3, r3, #96	; 0x60
80006392:	2b20      	cmp	r3, #32
80006394:	d004      	beq.n	800063a0 <USBD_StdDevReq+0x24>
80006396:	2b40      	cmp	r3, #64	; 0x40
80006398:	d002      	beq.n	800063a0 <USBD_StdDevReq+0x24>
8000639a:	2b00      	cmp	r3, #0
8000639c:	d008      	beq.n	800063b0 <USBD_StdDevReq+0x34>
8000639e:	e04c      	b.n	8000643a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
800063a0:	687b      	ldr	r3, [r7, #4]
800063a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800063a6:	689b      	ldr	r3, [r3, #8]
800063a8:	6839      	ldr	r1, [r7, #0]
800063aa:	6878      	ldr	r0, [r7, #4]
800063ac:	4798      	blx	r3
      break;
800063ae:	e049      	b.n	80006444 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
800063b0:	683b      	ldr	r3, [r7, #0]
800063b2:	785b      	ldrb	r3, [r3, #1]
800063b4:	2b09      	cmp	r3, #9
800063b6:	d83a      	bhi.n	8000642e <USBD_StdDevReq+0xb2>
800063b8:	a201      	add	r2, pc, #4	; (adr r2, 800063c0 <USBD_StdDevReq+0x44>)
800063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
800063be:	bf00      	nop
800063c0:	80006411 	.word	0x80006411
800063c4:	80006425 	.word	0x80006425
800063c8:	8000642f 	.word	0x8000642f
800063cc:	8000641b 	.word	0x8000641b
800063d0:	8000642f 	.word	0x8000642f
800063d4:	800063f3 	.word	0x800063f3
800063d8:	800063e9 	.word	0x800063e9
800063dc:	8000642f 	.word	0x8000642f
800063e0:	80006407 	.word	0x80006407
800063e4:	800063fd 	.word	0x800063fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
800063e8:	6839      	ldr	r1, [r7, #0]
800063ea:	6878      	ldr	r0, [r7, #4]
800063ec:	f000 f9d4 	bl	80006798 <USBD_GetDescriptor>
          break;
800063f0:	e022      	b.n	80006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
800063f2:	6839      	ldr	r1, [r7, #0]
800063f4:	6878      	ldr	r0, [r7, #4]
800063f6:	f000 fb37 	bl	80006a68 <USBD_SetAddress>
          break;
800063fa:	e01d      	b.n	80006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
800063fc:	6839      	ldr	r1, [r7, #0]
800063fe:	6878      	ldr	r0, [r7, #4]
80006400:	f000 fb74 	bl	80006aec <USBD_SetConfig>
          break;
80006404:	e018      	b.n	80006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
80006406:	6839      	ldr	r1, [r7, #0]
80006408:	6878      	ldr	r0, [r7, #4]
8000640a:	f000 fbfd 	bl	80006c08 <USBD_GetConfig>
          break;
8000640e:	e013      	b.n	80006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
80006410:	6839      	ldr	r1, [r7, #0]
80006412:	6878      	ldr	r0, [r7, #4]
80006414:	f000 fc2c 	bl	80006c70 <USBD_GetStatus>
          break;
80006418:	e00e      	b.n	80006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
8000641a:	6839      	ldr	r1, [r7, #0]
8000641c:	6878      	ldr	r0, [r7, #4]
8000641e:	f000 fc5a 	bl	80006cd6 <USBD_SetFeature>
          break;
80006422:	e009      	b.n	80006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
80006424:	6839      	ldr	r1, [r7, #0]
80006426:	6878      	ldr	r0, [r7, #4]
80006428:	f000 fc69 	bl	80006cfe <USBD_ClrFeature>
          break;
8000642c:	e004      	b.n	80006438 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
8000642e:	6839      	ldr	r1, [r7, #0]
80006430:	6878      	ldr	r0, [r7, #4]
80006432:	f000 fcc1 	bl	80006db8 <USBD_CtlError>
          break;
80006436:	bf00      	nop
      }
      break;
80006438:	e004      	b.n	80006444 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
8000643a:	6839      	ldr	r1, [r7, #0]
8000643c:	6878      	ldr	r0, [r7, #4]
8000643e:	f000 fcbb 	bl	80006db8 <USBD_CtlError>
      break;
80006442:	bf00      	nop
  }

  return ret;
80006444:	7bfb      	ldrb	r3, [r7, #15]
}
80006446:	4618      	mov	r0, r3
80006448:	3710      	adds	r7, #16
8000644a:	46bd      	mov	sp, r7
8000644c:	bd80      	pop	{r7, pc}
8000644e:	bf00      	nop

80006450 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
80006450:	b580      	push	{r7, lr}
80006452:	b084      	sub	sp, #16
80006454:	af00      	add	r7, sp, #0
80006456:	6078      	str	r0, [r7, #4]
80006458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
8000645a:	2300      	movs	r3, #0
8000645c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
8000645e:	683b      	ldr	r3, [r7, #0]
80006460:	781b      	ldrb	r3, [r3, #0]
80006462:	f003 0360 	and.w	r3, r3, #96	; 0x60
80006466:	2b20      	cmp	r3, #32
80006468:	d003      	beq.n	80006472 <USBD_StdItfReq+0x22>
8000646a:	2b40      	cmp	r3, #64	; 0x40
8000646c:	d001      	beq.n	80006472 <USBD_StdItfReq+0x22>
8000646e:	2b00      	cmp	r3, #0
80006470:	d12a      	bne.n	800064c8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
80006472:	687b      	ldr	r3, [r7, #4]
80006474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006478:	3b01      	subs	r3, #1
8000647a:	2b02      	cmp	r3, #2
8000647c:	d81d      	bhi.n	800064ba <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
8000647e:	683b      	ldr	r3, [r7, #0]
80006480:	889b      	ldrh	r3, [r3, #4]
80006482:	b2db      	uxtb	r3, r3
80006484:	2b01      	cmp	r3, #1
80006486:	d813      	bhi.n	800064b0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
80006488:	687b      	ldr	r3, [r7, #4]
8000648a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
8000648e:	689b      	ldr	r3, [r3, #8]
80006490:	6839      	ldr	r1, [r7, #0]
80006492:	6878      	ldr	r0, [r7, #4]
80006494:	4798      	blx	r3
80006496:	4603      	mov	r3, r0
80006498:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
8000649a:	683b      	ldr	r3, [r7, #0]
8000649c:	88db      	ldrh	r3, [r3, #6]
8000649e:	2b00      	cmp	r3, #0
800064a0:	d110      	bne.n	800064c4 <USBD_StdItfReq+0x74>
800064a2:	7bfb      	ldrb	r3, [r7, #15]
800064a4:	2b00      	cmp	r3, #0
800064a6:	d10d      	bne.n	800064c4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
800064a8:	6878      	ldr	r0, [r7, #4]
800064aa:	f000 fd4d 	bl	80006f48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
800064ae:	e009      	b.n	800064c4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
800064b0:	6839      	ldr	r1, [r7, #0]
800064b2:	6878      	ldr	r0, [r7, #4]
800064b4:	f000 fc80 	bl	80006db8 <USBD_CtlError>
          break;
800064b8:	e004      	b.n	800064c4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
800064ba:	6839      	ldr	r1, [r7, #0]
800064bc:	6878      	ldr	r0, [r7, #4]
800064be:	f000 fc7b 	bl	80006db8 <USBD_CtlError>
          break;
800064c2:	e000      	b.n	800064c6 <USBD_StdItfReq+0x76>
          break;
800064c4:	bf00      	nop
      }
      break;
800064c6:	e004      	b.n	800064d2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
800064c8:	6839      	ldr	r1, [r7, #0]
800064ca:	6878      	ldr	r0, [r7, #4]
800064cc:	f000 fc74 	bl	80006db8 <USBD_CtlError>
      break;
800064d0:	bf00      	nop
  }

  return USBD_OK;
800064d2:	2300      	movs	r3, #0
}
800064d4:	4618      	mov	r0, r3
800064d6:	3710      	adds	r7, #16
800064d8:	46bd      	mov	sp, r7
800064da:	bd80      	pop	{r7, pc}

800064dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
800064dc:	b580      	push	{r7, lr}
800064de:	b084      	sub	sp, #16
800064e0:	af00      	add	r7, sp, #0
800064e2:	6078      	str	r0, [r7, #4]
800064e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
800064e6:	2300      	movs	r3, #0
800064e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
800064ea:	683b      	ldr	r3, [r7, #0]
800064ec:	889b      	ldrh	r3, [r3, #4]
800064ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
800064f0:	683b      	ldr	r3, [r7, #0]
800064f2:	781b      	ldrb	r3, [r3, #0]
800064f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
800064f8:	2b20      	cmp	r3, #32
800064fa:	d004      	beq.n	80006506 <USBD_StdEPReq+0x2a>
800064fc:	2b40      	cmp	r3, #64	; 0x40
800064fe:	d002      	beq.n	80006506 <USBD_StdEPReq+0x2a>
80006500:	2b00      	cmp	r3, #0
80006502:	d008      	beq.n	80006516 <USBD_StdEPReq+0x3a>
80006504:	e13d      	b.n	80006782 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
80006506:	687b      	ldr	r3, [r7, #4]
80006508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
8000650c:	689b      	ldr	r3, [r3, #8]
8000650e:	6839      	ldr	r1, [r7, #0]
80006510:	6878      	ldr	r0, [r7, #4]
80006512:	4798      	blx	r3
      break;
80006514:	e13a      	b.n	8000678c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
80006516:	683b      	ldr	r3, [r7, #0]
80006518:	781b      	ldrb	r3, [r3, #0]
8000651a:	f003 0360 	and.w	r3, r3, #96	; 0x60
8000651e:	2b20      	cmp	r3, #32
80006520:	d10a      	bne.n	80006538 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
80006522:	687b      	ldr	r3, [r7, #4]
80006524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80006528:	689b      	ldr	r3, [r3, #8]
8000652a:	6839      	ldr	r1, [r7, #0]
8000652c:	6878      	ldr	r0, [r7, #4]
8000652e:	4798      	blx	r3
80006530:	4603      	mov	r3, r0
80006532:	73fb      	strb	r3, [r7, #15]

        return ret;
80006534:	7bfb      	ldrb	r3, [r7, #15]
80006536:	e12a      	b.n	8000678e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
80006538:	683b      	ldr	r3, [r7, #0]
8000653a:	785b      	ldrb	r3, [r3, #1]
8000653c:	2b01      	cmp	r3, #1
8000653e:	d03e      	beq.n	800065be <USBD_StdEPReq+0xe2>
80006540:	2b03      	cmp	r3, #3
80006542:	d002      	beq.n	8000654a <USBD_StdEPReq+0x6e>
80006544:	2b00      	cmp	r3, #0
80006546:	d070      	beq.n	8000662a <USBD_StdEPReq+0x14e>
80006548:	e115      	b.n	80006776 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
8000654a:	687b      	ldr	r3, [r7, #4]
8000654c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006550:	2b02      	cmp	r3, #2
80006552:	d002      	beq.n	8000655a <USBD_StdEPReq+0x7e>
80006554:	2b03      	cmp	r3, #3
80006556:	d015      	beq.n	80006584 <USBD_StdEPReq+0xa8>
80006558:	e02b      	b.n	800065b2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
8000655a:	7bbb      	ldrb	r3, [r7, #14]
8000655c:	2b00      	cmp	r3, #0
8000655e:	d00c      	beq.n	8000657a <USBD_StdEPReq+0x9e>
80006560:	7bbb      	ldrb	r3, [r7, #14]
80006562:	2b80      	cmp	r3, #128	; 0x80
80006564:	d009      	beq.n	8000657a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
80006566:	7bbb      	ldrb	r3, [r7, #14]
80006568:	4619      	mov	r1, r3
8000656a:	6878      	ldr	r0, [r7, #4]
8000656c:	f001 f8bc 	bl	800076e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
80006570:	2180      	movs	r1, #128	; 0x80
80006572:	6878      	ldr	r0, [r7, #4]
80006574:	f001 f8b8 	bl	800076e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
80006578:	e020      	b.n	800065bc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
8000657a:	6839      	ldr	r1, [r7, #0]
8000657c:	6878      	ldr	r0, [r7, #4]
8000657e:	f000 fc1b 	bl	80006db8 <USBD_CtlError>
              break;
80006582:	e01b      	b.n	800065bc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
80006584:	683b      	ldr	r3, [r7, #0]
80006586:	885b      	ldrh	r3, [r3, #2]
80006588:	2b00      	cmp	r3, #0
8000658a:	d10e      	bne.n	800065aa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
8000658c:	7bbb      	ldrb	r3, [r7, #14]
8000658e:	2b00      	cmp	r3, #0
80006590:	d00b      	beq.n	800065aa <USBD_StdEPReq+0xce>
80006592:	7bbb      	ldrb	r3, [r7, #14]
80006594:	2b80      	cmp	r3, #128	; 0x80
80006596:	d008      	beq.n	800065aa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
80006598:	683b      	ldr	r3, [r7, #0]
8000659a:	88db      	ldrh	r3, [r3, #6]
8000659c:	2b00      	cmp	r3, #0
8000659e:	d104      	bne.n	800065aa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
800065a0:	7bbb      	ldrb	r3, [r7, #14]
800065a2:	4619      	mov	r1, r3
800065a4:	6878      	ldr	r0, [r7, #4]
800065a6:	f001 f89f 	bl	800076e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
800065aa:	6878      	ldr	r0, [r7, #4]
800065ac:	f000 fccc 	bl	80006f48 <USBD_CtlSendStatus>

              break;
800065b0:	e004      	b.n	800065bc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
800065b2:	6839      	ldr	r1, [r7, #0]
800065b4:	6878      	ldr	r0, [r7, #4]
800065b6:	f000 fbff 	bl	80006db8 <USBD_CtlError>
              break;
800065ba:	bf00      	nop
          }
          break;
800065bc:	e0e0      	b.n	80006780 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
800065be:	687b      	ldr	r3, [r7, #4]
800065c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
800065c4:	2b02      	cmp	r3, #2
800065c6:	d002      	beq.n	800065ce <USBD_StdEPReq+0xf2>
800065c8:	2b03      	cmp	r3, #3
800065ca:	d015      	beq.n	800065f8 <USBD_StdEPReq+0x11c>
800065cc:	e026      	b.n	8000661c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
800065ce:	7bbb      	ldrb	r3, [r7, #14]
800065d0:	2b00      	cmp	r3, #0
800065d2:	d00c      	beq.n	800065ee <USBD_StdEPReq+0x112>
800065d4:	7bbb      	ldrb	r3, [r7, #14]
800065d6:	2b80      	cmp	r3, #128	; 0x80
800065d8:	d009      	beq.n	800065ee <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
800065da:	7bbb      	ldrb	r3, [r7, #14]
800065dc:	4619      	mov	r1, r3
800065de:	6878      	ldr	r0, [r7, #4]
800065e0:	f001 f882 	bl	800076e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
800065e4:	2180      	movs	r1, #128	; 0x80
800065e6:	6878      	ldr	r0, [r7, #4]
800065e8:	f001 f87e 	bl	800076e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
800065ec:	e01c      	b.n	80006628 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
800065ee:	6839      	ldr	r1, [r7, #0]
800065f0:	6878      	ldr	r0, [r7, #4]
800065f2:	f000 fbe1 	bl	80006db8 <USBD_CtlError>
              break;
800065f6:	e017      	b.n	80006628 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
800065f8:	683b      	ldr	r3, [r7, #0]
800065fa:	885b      	ldrh	r3, [r3, #2]
800065fc:	2b00      	cmp	r3, #0
800065fe:	d112      	bne.n	80006626 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
80006600:	7bbb      	ldrb	r3, [r7, #14]
80006602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
80006606:	2b00      	cmp	r3, #0
80006608:	d004      	beq.n	80006614 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
8000660a:	7bbb      	ldrb	r3, [r7, #14]
8000660c:	4619      	mov	r1, r3
8000660e:	6878      	ldr	r0, [r7, #4]
80006610:	f001 f889 	bl	80007726 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
80006614:	6878      	ldr	r0, [r7, #4]
80006616:	f000 fc97 	bl	80006f48 <USBD_CtlSendStatus>
              }
              break;
8000661a:	e004      	b.n	80006626 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
8000661c:	6839      	ldr	r1, [r7, #0]
8000661e:	6878      	ldr	r0, [r7, #4]
80006620:	f000 fbca 	bl	80006db8 <USBD_CtlError>
              break;
80006624:	e000      	b.n	80006628 <USBD_StdEPReq+0x14c>
              break;
80006626:	bf00      	nop
          }
          break;
80006628:	e0aa      	b.n	80006780 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
8000662a:	687b      	ldr	r3, [r7, #4]
8000662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006630:	2b02      	cmp	r3, #2
80006632:	d002      	beq.n	8000663a <USBD_StdEPReq+0x15e>
80006634:	2b03      	cmp	r3, #3
80006636:	d032      	beq.n	8000669e <USBD_StdEPReq+0x1c2>
80006638:	e097      	b.n	8000676a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
8000663a:	7bbb      	ldrb	r3, [r7, #14]
8000663c:	2b00      	cmp	r3, #0
8000663e:	d007      	beq.n	80006650 <USBD_StdEPReq+0x174>
80006640:	7bbb      	ldrb	r3, [r7, #14]
80006642:	2b80      	cmp	r3, #128	; 0x80
80006644:	d004      	beq.n	80006650 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
80006646:	6839      	ldr	r1, [r7, #0]
80006648:	6878      	ldr	r0, [r7, #4]
8000664a:	f000 fbb5 	bl	80006db8 <USBD_CtlError>
                break;
8000664e:	e091      	b.n	80006774 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
80006650:	f997 300e 	ldrsb.w	r3, [r7, #14]
80006654:	2b00      	cmp	r3, #0
80006656:	da0b      	bge.n	80006670 <USBD_StdEPReq+0x194>
80006658:	7bbb      	ldrb	r3, [r7, #14]
8000665a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
8000665e:	4613      	mov	r3, r2
80006660:	009b      	lsls	r3, r3, #2
80006662:	4413      	add	r3, r2
80006664:	009b      	lsls	r3, r3, #2
80006666:	3310      	adds	r3, #16
80006668:	687a      	ldr	r2, [r7, #4]
8000666a:	4413      	add	r3, r2
8000666c:	3304      	adds	r3, #4
8000666e:	e00b      	b.n	80006688 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
80006670:	7bbb      	ldrb	r3, [r7, #14]
80006672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
80006676:	4613      	mov	r3, r2
80006678:	009b      	lsls	r3, r3, #2
8000667a:	4413      	add	r3, r2
8000667c:	009b      	lsls	r3, r3, #2
8000667e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
80006682:	687a      	ldr	r2, [r7, #4]
80006684:	4413      	add	r3, r2
80006686:	3304      	adds	r3, #4
80006688:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
8000668a:	68bb      	ldr	r3, [r7, #8]
8000668c:	2200      	movs	r2, #0
8000668e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
80006690:	68bb      	ldr	r3, [r7, #8]
80006692:	2202      	movs	r2, #2
80006694:	4619      	mov	r1, r3
80006696:	6878      	ldr	r0, [r7, #4]
80006698:	f000 fbf8 	bl	80006e8c <USBD_CtlSendData>
              break;
8000669c:	e06a      	b.n	80006774 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
8000669e:	f997 300e 	ldrsb.w	r3, [r7, #14]
800066a2:	2b00      	cmp	r3, #0
800066a4:	da11      	bge.n	800066ca <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
800066a6:	7bbb      	ldrb	r3, [r7, #14]
800066a8:	f003 020f 	and.w	r2, r3, #15
800066ac:	6879      	ldr	r1, [r7, #4]
800066ae:	4613      	mov	r3, r2
800066b0:	009b      	lsls	r3, r3, #2
800066b2:	4413      	add	r3, r2
800066b4:	009b      	lsls	r3, r3, #2
800066b6:	440b      	add	r3, r1
800066b8:	3318      	adds	r3, #24
800066ba:	681b      	ldr	r3, [r3, #0]
800066bc:	2b00      	cmp	r3, #0
800066be:	d117      	bne.n	800066f0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
800066c0:	6839      	ldr	r1, [r7, #0]
800066c2:	6878      	ldr	r0, [r7, #4]
800066c4:	f000 fb78 	bl	80006db8 <USBD_CtlError>
                  break;
800066c8:	e054      	b.n	80006774 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
800066ca:	7bbb      	ldrb	r3, [r7, #14]
800066cc:	f003 020f 	and.w	r2, r3, #15
800066d0:	6879      	ldr	r1, [r7, #4]
800066d2:	4613      	mov	r3, r2
800066d4:	009b      	lsls	r3, r3, #2
800066d6:	4413      	add	r3, r2
800066d8:	009b      	lsls	r3, r3, #2
800066da:	440b      	add	r3, r1
800066dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
800066e0:	681b      	ldr	r3, [r3, #0]
800066e2:	2b00      	cmp	r3, #0
800066e4:	d104      	bne.n	800066f0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
800066e6:	6839      	ldr	r1, [r7, #0]
800066e8:	6878      	ldr	r0, [r7, #4]
800066ea:	f000 fb65 	bl	80006db8 <USBD_CtlError>
                  break;
800066ee:	e041      	b.n	80006774 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
800066f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
800066f4:	2b00      	cmp	r3, #0
800066f6:	da0b      	bge.n	80006710 <USBD_StdEPReq+0x234>
800066f8:	7bbb      	ldrb	r3, [r7, #14]
800066fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
800066fe:	4613      	mov	r3, r2
80006700:	009b      	lsls	r3, r3, #2
80006702:	4413      	add	r3, r2
80006704:	009b      	lsls	r3, r3, #2
80006706:	3310      	adds	r3, #16
80006708:	687a      	ldr	r2, [r7, #4]
8000670a:	4413      	add	r3, r2
8000670c:	3304      	adds	r3, #4
8000670e:	e00b      	b.n	80006728 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
80006710:	7bbb      	ldrb	r3, [r7, #14]
80006712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
80006716:	4613      	mov	r3, r2
80006718:	009b      	lsls	r3, r3, #2
8000671a:	4413      	add	r3, r2
8000671c:	009b      	lsls	r3, r3, #2
8000671e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
80006722:	687a      	ldr	r2, [r7, #4]
80006724:	4413      	add	r3, r2
80006726:	3304      	adds	r3, #4
80006728:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
8000672a:	7bbb      	ldrb	r3, [r7, #14]
8000672c:	2b00      	cmp	r3, #0
8000672e:	d002      	beq.n	80006736 <USBD_StdEPReq+0x25a>
80006730:	7bbb      	ldrb	r3, [r7, #14]
80006732:	2b80      	cmp	r3, #128	; 0x80
80006734:	d103      	bne.n	8000673e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
80006736:	68bb      	ldr	r3, [r7, #8]
80006738:	2200      	movs	r2, #0
8000673a:	601a      	str	r2, [r3, #0]
8000673c:	e00e      	b.n	8000675c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
8000673e:	7bbb      	ldrb	r3, [r7, #14]
80006740:	4619      	mov	r1, r3
80006742:	6878      	ldr	r0, [r7, #4]
80006744:	f001 f80e 	bl	80007764 <USBD_LL_IsStallEP>
80006748:	4603      	mov	r3, r0
8000674a:	2b00      	cmp	r3, #0
8000674c:	d003      	beq.n	80006756 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
8000674e:	68bb      	ldr	r3, [r7, #8]
80006750:	2201      	movs	r2, #1
80006752:	601a      	str	r2, [r3, #0]
80006754:	e002      	b.n	8000675c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
80006756:	68bb      	ldr	r3, [r7, #8]
80006758:	2200      	movs	r2, #0
8000675a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
8000675c:	68bb      	ldr	r3, [r7, #8]
8000675e:	2202      	movs	r2, #2
80006760:	4619      	mov	r1, r3
80006762:	6878      	ldr	r0, [r7, #4]
80006764:	f000 fb92 	bl	80006e8c <USBD_CtlSendData>
              break;
80006768:	e004      	b.n	80006774 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
8000676a:	6839      	ldr	r1, [r7, #0]
8000676c:	6878      	ldr	r0, [r7, #4]
8000676e:	f000 fb23 	bl	80006db8 <USBD_CtlError>
              break;
80006772:	bf00      	nop
          }
          break;
80006774:	e004      	b.n	80006780 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
80006776:	6839      	ldr	r1, [r7, #0]
80006778:	6878      	ldr	r0, [r7, #4]
8000677a:	f000 fb1d 	bl	80006db8 <USBD_CtlError>
          break;
8000677e:	bf00      	nop
      }
      break;
80006780:	e004      	b.n	8000678c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
80006782:	6839      	ldr	r1, [r7, #0]
80006784:	6878      	ldr	r0, [r7, #4]
80006786:	f000 fb17 	bl	80006db8 <USBD_CtlError>
      break;
8000678a:	bf00      	nop
  }

  return ret;
8000678c:	7bfb      	ldrb	r3, [r7, #15]
}
8000678e:	4618      	mov	r0, r3
80006790:	3710      	adds	r7, #16
80006792:	46bd      	mov	sp, r7
80006794:	bd80      	pop	{r7, pc}
	...

80006798 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
80006798:	b580      	push	{r7, lr}
8000679a:	b084      	sub	sp, #16
8000679c:	af00      	add	r7, sp, #0
8000679e:	6078      	str	r0, [r7, #4]
800067a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
800067a2:	2300      	movs	r3, #0
800067a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
800067a6:	2300      	movs	r3, #0
800067a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
800067aa:	2300      	movs	r3, #0
800067ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
800067ae:	683b      	ldr	r3, [r7, #0]
800067b0:	885b      	ldrh	r3, [r3, #2]
800067b2:	0a1b      	lsrs	r3, r3, #8
800067b4:	b29b      	uxth	r3, r3
800067b6:	3b01      	subs	r3, #1
800067b8:	2b06      	cmp	r3, #6
800067ba:	f200 8128 	bhi.w	80006a0e <USBD_GetDescriptor+0x276>
800067be:	a201      	add	r2, pc, #4	; (adr r2, 800067c4 <USBD_GetDescriptor+0x2c>)
800067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
800067c4:	800067e1 	.word	0x800067e1
800067c8:	800067f9 	.word	0x800067f9
800067cc:	80006839 	.word	0x80006839
800067d0:	80006a0f 	.word	0x80006a0f
800067d4:	80006a0f 	.word	0x80006a0f
800067d8:	800069af 	.word	0x800069af
800067dc:	800069db 	.word	0x800069db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
800067e0:	687b      	ldr	r3, [r7, #4]
800067e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
800067e6:	681b      	ldr	r3, [r3, #0]
800067e8:	687a      	ldr	r2, [r7, #4]
800067ea:	7c12      	ldrb	r2, [r2, #16]
800067ec:	f107 0108 	add.w	r1, r7, #8
800067f0:	4610      	mov	r0, r2
800067f2:	4798      	blx	r3
800067f4:	60f8      	str	r0, [r7, #12]
      break;
800067f6:	e112      	b.n	80006a1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
800067f8:	687b      	ldr	r3, [r7, #4]
800067fa:	7c1b      	ldrb	r3, [r3, #16]
800067fc:	2b00      	cmp	r3, #0
800067fe:	d10d      	bne.n	8000681c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
80006800:	687b      	ldr	r3, [r7, #4]
80006802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80006806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80006808:	f107 0208 	add.w	r2, r7, #8
8000680c:	4610      	mov	r0, r2
8000680e:	4798      	blx	r3
80006810:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
80006812:	68fb      	ldr	r3, [r7, #12]
80006814:	3301      	adds	r3, #1
80006816:	2202      	movs	r2, #2
80006818:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
8000681a:	e100      	b.n	80006a1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
8000681c:	687b      	ldr	r3, [r7, #4]
8000681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
80006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80006824:	f107 0208 	add.w	r2, r7, #8
80006828:	4610      	mov	r0, r2
8000682a:	4798      	blx	r3
8000682c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
8000682e:	68fb      	ldr	r3, [r7, #12]
80006830:	3301      	adds	r3, #1
80006832:	2202      	movs	r2, #2
80006834:	701a      	strb	r2, [r3, #0]
      break;
80006836:	e0f2      	b.n	80006a1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
80006838:	683b      	ldr	r3, [r7, #0]
8000683a:	885b      	ldrh	r3, [r3, #2]
8000683c:	b2db      	uxtb	r3, r3
8000683e:	2b05      	cmp	r3, #5
80006840:	f200 80ac 	bhi.w	8000699c <USBD_GetDescriptor+0x204>
80006844:	a201      	add	r2, pc, #4	; (adr r2, 8000684c <USBD_GetDescriptor+0xb4>)
80006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
8000684a:	bf00      	nop
8000684c:	80006865 	.word	0x80006865
80006850:	80006899 	.word	0x80006899
80006854:	800068cd 	.word	0x800068cd
80006858:	80006901 	.word	0x80006901
8000685c:	80006935 	.word	0x80006935
80006860:	80006969 	.word	0x80006969
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
80006864:	687b      	ldr	r3, [r7, #4]
80006866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
8000686a:	685b      	ldr	r3, [r3, #4]
8000686c:	2b00      	cmp	r3, #0
8000686e:	d00b      	beq.n	80006888 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
80006870:	687b      	ldr	r3, [r7, #4]
80006872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
80006876:	685b      	ldr	r3, [r3, #4]
80006878:	687a      	ldr	r2, [r7, #4]
8000687a:	7c12      	ldrb	r2, [r2, #16]
8000687c:	f107 0108 	add.w	r1, r7, #8
80006880:	4610      	mov	r0, r2
80006882:	4798      	blx	r3
80006884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
80006886:	e091      	b.n	800069ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
80006888:	6839      	ldr	r1, [r7, #0]
8000688a:	6878      	ldr	r0, [r7, #4]
8000688c:	f000 fa94 	bl	80006db8 <USBD_CtlError>
            err++;
80006890:	7afb      	ldrb	r3, [r7, #11]
80006892:	3301      	adds	r3, #1
80006894:	72fb      	strb	r3, [r7, #11]
          break;
80006896:	e089      	b.n	800069ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
80006898:	687b      	ldr	r3, [r7, #4]
8000689a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
8000689e:	689b      	ldr	r3, [r3, #8]
800068a0:	2b00      	cmp	r3, #0
800068a2:	d00b      	beq.n	800068bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
800068a4:	687b      	ldr	r3, [r7, #4]
800068a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
800068aa:	689b      	ldr	r3, [r3, #8]
800068ac:	687a      	ldr	r2, [r7, #4]
800068ae:	7c12      	ldrb	r2, [r2, #16]
800068b0:	f107 0108 	add.w	r1, r7, #8
800068b4:	4610      	mov	r0, r2
800068b6:	4798      	blx	r3
800068b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
800068ba:	e077      	b.n	800069ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
800068bc:	6839      	ldr	r1, [r7, #0]
800068be:	6878      	ldr	r0, [r7, #4]
800068c0:	f000 fa7a 	bl	80006db8 <USBD_CtlError>
            err++;
800068c4:	7afb      	ldrb	r3, [r7, #11]
800068c6:	3301      	adds	r3, #1
800068c8:	72fb      	strb	r3, [r7, #11]
          break;
800068ca:	e06f      	b.n	800069ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
800068cc:	687b      	ldr	r3, [r7, #4]
800068ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
800068d2:	68db      	ldr	r3, [r3, #12]
800068d4:	2b00      	cmp	r3, #0
800068d6:	d00b      	beq.n	800068f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
800068d8:	687b      	ldr	r3, [r7, #4]
800068da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
800068de:	68db      	ldr	r3, [r3, #12]
800068e0:	687a      	ldr	r2, [r7, #4]
800068e2:	7c12      	ldrb	r2, [r2, #16]
800068e4:	f107 0108 	add.w	r1, r7, #8
800068e8:	4610      	mov	r0, r2
800068ea:	4798      	blx	r3
800068ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
800068ee:	e05d      	b.n	800069ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
800068f0:	6839      	ldr	r1, [r7, #0]
800068f2:	6878      	ldr	r0, [r7, #4]
800068f4:	f000 fa60 	bl	80006db8 <USBD_CtlError>
            err++;
800068f8:	7afb      	ldrb	r3, [r7, #11]
800068fa:	3301      	adds	r3, #1
800068fc:	72fb      	strb	r3, [r7, #11]
          break;
800068fe:	e055      	b.n	800069ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
80006900:	687b      	ldr	r3, [r7, #4]
80006902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
80006906:	691b      	ldr	r3, [r3, #16]
80006908:	2b00      	cmp	r3, #0
8000690a:	d00b      	beq.n	80006924 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
8000690c:	687b      	ldr	r3, [r7, #4]
8000690e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
80006912:	691b      	ldr	r3, [r3, #16]
80006914:	687a      	ldr	r2, [r7, #4]
80006916:	7c12      	ldrb	r2, [r2, #16]
80006918:	f107 0108 	add.w	r1, r7, #8
8000691c:	4610      	mov	r0, r2
8000691e:	4798      	blx	r3
80006920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
80006922:	e043      	b.n	800069ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
80006924:	6839      	ldr	r1, [r7, #0]
80006926:	6878      	ldr	r0, [r7, #4]
80006928:	f000 fa46 	bl	80006db8 <USBD_CtlError>
            err++;
8000692c:	7afb      	ldrb	r3, [r7, #11]
8000692e:	3301      	adds	r3, #1
80006930:	72fb      	strb	r3, [r7, #11]
          break;
80006932:	e03b      	b.n	800069ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
80006934:	687b      	ldr	r3, [r7, #4]
80006936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
8000693a:	695b      	ldr	r3, [r3, #20]
8000693c:	2b00      	cmp	r3, #0
8000693e:	d00b      	beq.n	80006958 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
80006940:	687b      	ldr	r3, [r7, #4]
80006942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
80006946:	695b      	ldr	r3, [r3, #20]
80006948:	687a      	ldr	r2, [r7, #4]
8000694a:	7c12      	ldrb	r2, [r2, #16]
8000694c:	f107 0108 	add.w	r1, r7, #8
80006950:	4610      	mov	r0, r2
80006952:	4798      	blx	r3
80006954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
80006956:	e029      	b.n	800069ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
80006958:	6839      	ldr	r1, [r7, #0]
8000695a:	6878      	ldr	r0, [r7, #4]
8000695c:	f000 fa2c 	bl	80006db8 <USBD_CtlError>
            err++;
80006960:	7afb      	ldrb	r3, [r7, #11]
80006962:	3301      	adds	r3, #1
80006964:	72fb      	strb	r3, [r7, #11]
          break;
80006966:	e021      	b.n	800069ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
80006968:	687b      	ldr	r3, [r7, #4]
8000696a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
8000696e:	699b      	ldr	r3, [r3, #24]
80006970:	2b00      	cmp	r3, #0
80006972:	d00b      	beq.n	8000698c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
80006974:	687b      	ldr	r3, [r7, #4]
80006976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
8000697a:	699b      	ldr	r3, [r3, #24]
8000697c:	687a      	ldr	r2, [r7, #4]
8000697e:	7c12      	ldrb	r2, [r2, #16]
80006980:	f107 0108 	add.w	r1, r7, #8
80006984:	4610      	mov	r0, r2
80006986:	4798      	blx	r3
80006988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
8000698a:	e00f      	b.n	800069ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
8000698c:	6839      	ldr	r1, [r7, #0]
8000698e:	6878      	ldr	r0, [r7, #4]
80006990:	f000 fa12 	bl	80006db8 <USBD_CtlError>
            err++;
80006994:	7afb      	ldrb	r3, [r7, #11]
80006996:	3301      	adds	r3, #1
80006998:	72fb      	strb	r3, [r7, #11]
          break;
8000699a:	e007      	b.n	800069ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
8000699c:	6839      	ldr	r1, [r7, #0]
8000699e:	6878      	ldr	r0, [r7, #4]
800069a0:	f000 fa0a 	bl	80006db8 <USBD_CtlError>
          err++;
800069a4:	7afb      	ldrb	r3, [r7, #11]
800069a6:	3301      	adds	r3, #1
800069a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
800069aa:	e038      	b.n	80006a1e <USBD_GetDescriptor+0x286>
800069ac:	e037      	b.n	80006a1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
800069ae:	687b      	ldr	r3, [r7, #4]
800069b0:	7c1b      	ldrb	r3, [r3, #16]
800069b2:	2b00      	cmp	r3, #0
800069b4:	d109      	bne.n	800069ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
800069b6:	687b      	ldr	r3, [r7, #4]
800069b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800069bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
800069be:	f107 0208 	add.w	r2, r7, #8
800069c2:	4610      	mov	r0, r2
800069c4:	4798      	blx	r3
800069c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
800069c8:	e029      	b.n	80006a1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
800069ca:	6839      	ldr	r1, [r7, #0]
800069cc:	6878      	ldr	r0, [r7, #4]
800069ce:	f000 f9f3 	bl	80006db8 <USBD_CtlError>
        err++;
800069d2:	7afb      	ldrb	r3, [r7, #11]
800069d4:	3301      	adds	r3, #1
800069d6:	72fb      	strb	r3, [r7, #11]
      break;
800069d8:	e021      	b.n	80006a1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
800069da:	687b      	ldr	r3, [r7, #4]
800069dc:	7c1b      	ldrb	r3, [r3, #16]
800069de:	2b00      	cmp	r3, #0
800069e0:	d10d      	bne.n	800069fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
800069e2:	687b      	ldr	r3, [r7, #4]
800069e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
800069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
800069ea:	f107 0208 	add.w	r2, r7, #8
800069ee:	4610      	mov	r0, r2
800069f0:	4798      	blx	r3
800069f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
800069f4:	68fb      	ldr	r3, [r7, #12]
800069f6:	3301      	adds	r3, #1
800069f8:	2207      	movs	r2, #7
800069fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
800069fc:	e00f      	b.n	80006a1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
800069fe:	6839      	ldr	r1, [r7, #0]
80006a00:	6878      	ldr	r0, [r7, #4]
80006a02:	f000 f9d9 	bl	80006db8 <USBD_CtlError>
        err++;
80006a06:	7afb      	ldrb	r3, [r7, #11]
80006a08:	3301      	adds	r3, #1
80006a0a:	72fb      	strb	r3, [r7, #11]
      break;
80006a0c:	e007      	b.n	80006a1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
80006a0e:	6839      	ldr	r1, [r7, #0]
80006a10:	6878      	ldr	r0, [r7, #4]
80006a12:	f000 f9d1 	bl	80006db8 <USBD_CtlError>
      err++;
80006a16:	7afb      	ldrb	r3, [r7, #11]
80006a18:	3301      	adds	r3, #1
80006a1a:	72fb      	strb	r3, [r7, #11]
      break;
80006a1c:	bf00      	nop
  }

  if (err != 0U)
80006a1e:	7afb      	ldrb	r3, [r7, #11]
80006a20:	2b00      	cmp	r3, #0
80006a22:	d11c      	bne.n	80006a5e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
80006a24:	893b      	ldrh	r3, [r7, #8]
80006a26:	2b00      	cmp	r3, #0
80006a28:	d011      	beq.n	80006a4e <USBD_GetDescriptor+0x2b6>
80006a2a:	683b      	ldr	r3, [r7, #0]
80006a2c:	88db      	ldrh	r3, [r3, #6]
80006a2e:	2b00      	cmp	r3, #0
80006a30:	d00d      	beq.n	80006a4e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
80006a32:	683b      	ldr	r3, [r7, #0]
80006a34:	88da      	ldrh	r2, [r3, #6]
80006a36:	893b      	ldrh	r3, [r7, #8]
80006a38:	4293      	cmp	r3, r2
80006a3a:	bf28      	it	cs
80006a3c:	4613      	movcs	r3, r2
80006a3e:	b29b      	uxth	r3, r3
80006a40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
80006a42:	893b      	ldrh	r3, [r7, #8]
80006a44:	461a      	mov	r2, r3
80006a46:	68f9      	ldr	r1, [r7, #12]
80006a48:	6878      	ldr	r0, [r7, #4]
80006a4a:	f000 fa1f 	bl	80006e8c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
80006a4e:	683b      	ldr	r3, [r7, #0]
80006a50:	88db      	ldrh	r3, [r3, #6]
80006a52:	2b00      	cmp	r3, #0
80006a54:	d104      	bne.n	80006a60 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
80006a56:	6878      	ldr	r0, [r7, #4]
80006a58:	f000 fa76 	bl	80006f48 <USBD_CtlSendStatus>
80006a5c:	e000      	b.n	80006a60 <USBD_GetDescriptor+0x2c8>
    return;
80006a5e:	bf00      	nop
    }
  }
}
80006a60:	3710      	adds	r7, #16
80006a62:	46bd      	mov	sp, r7
80006a64:	bd80      	pop	{r7, pc}
80006a66:	bf00      	nop

80006a68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
80006a68:	b580      	push	{r7, lr}
80006a6a:	b084      	sub	sp, #16
80006a6c:	af00      	add	r7, sp, #0
80006a6e:	6078      	str	r0, [r7, #4]
80006a70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
80006a72:	683b      	ldr	r3, [r7, #0]
80006a74:	889b      	ldrh	r3, [r3, #4]
80006a76:	2b00      	cmp	r3, #0
80006a78:	d130      	bne.n	80006adc <USBD_SetAddress+0x74>
80006a7a:	683b      	ldr	r3, [r7, #0]
80006a7c:	88db      	ldrh	r3, [r3, #6]
80006a7e:	2b00      	cmp	r3, #0
80006a80:	d12c      	bne.n	80006adc <USBD_SetAddress+0x74>
80006a82:	683b      	ldr	r3, [r7, #0]
80006a84:	885b      	ldrh	r3, [r3, #2]
80006a86:	2b7f      	cmp	r3, #127	; 0x7f
80006a88:	d828      	bhi.n	80006adc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
80006a8a:	683b      	ldr	r3, [r7, #0]
80006a8c:	885b      	ldrh	r3, [r3, #2]
80006a8e:	b2db      	uxtb	r3, r3
80006a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
80006a94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
80006a96:	687b      	ldr	r3, [r7, #4]
80006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006a9c:	2b03      	cmp	r3, #3
80006a9e:	d104      	bne.n	80006aaa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
80006aa0:	6839      	ldr	r1, [r7, #0]
80006aa2:	6878      	ldr	r0, [r7, #4]
80006aa4:	f000 f988 	bl	80006db8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
80006aa8:	e01c      	b.n	80006ae4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
80006aaa:	687b      	ldr	r3, [r7, #4]
80006aac:	7bfa      	ldrb	r2, [r7, #15]
80006aae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
80006ab2:	7bfb      	ldrb	r3, [r7, #15]
80006ab4:	4619      	mov	r1, r3
80006ab6:	6878      	ldr	r0, [r7, #4]
80006ab8:	f000 fe79 	bl	800077ae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
80006abc:	6878      	ldr	r0, [r7, #4]
80006abe:	f000 fa43 	bl	80006f48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
80006ac2:	7bfb      	ldrb	r3, [r7, #15]
80006ac4:	2b00      	cmp	r3, #0
80006ac6:	d004      	beq.n	80006ad2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
80006ac8:	687b      	ldr	r3, [r7, #4]
80006aca:	2202      	movs	r2, #2
80006acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
80006ad0:	e008      	b.n	80006ae4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
80006ad2:	687b      	ldr	r3, [r7, #4]
80006ad4:	2201      	movs	r2, #1
80006ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
80006ada:	e003      	b.n	80006ae4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
80006adc:	6839      	ldr	r1, [r7, #0]
80006ade:	6878      	ldr	r0, [r7, #4]
80006ae0:	f000 f96a 	bl	80006db8 <USBD_CtlError>
  }
}
80006ae4:	bf00      	nop
80006ae6:	3710      	adds	r7, #16
80006ae8:	46bd      	mov	sp, r7
80006aea:	bd80      	pop	{r7, pc}

80006aec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
80006aec:	b580      	push	{r7, lr}
80006aee:	b082      	sub	sp, #8
80006af0:	af00      	add	r7, sp, #0
80006af2:	6078      	str	r0, [r7, #4]
80006af4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
80006af6:	683b      	ldr	r3, [r7, #0]
80006af8:	885b      	ldrh	r3, [r3, #2]
80006afa:	b2da      	uxtb	r2, r3
80006afc:	4b41      	ldr	r3, [pc, #260]	; (80006c04 <USBD_SetConfig+0x118>)
80006afe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
80006b00:	4b40      	ldr	r3, [pc, #256]	; (80006c04 <USBD_SetConfig+0x118>)
80006b02:	781b      	ldrb	r3, [r3, #0]
80006b04:	2b01      	cmp	r3, #1
80006b06:	d904      	bls.n	80006b12 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
80006b08:	6839      	ldr	r1, [r7, #0]
80006b0a:	6878      	ldr	r0, [r7, #4]
80006b0c:	f000 f954 	bl	80006db8 <USBD_CtlError>
80006b10:	e075      	b.n	80006bfe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
80006b12:	687b      	ldr	r3, [r7, #4]
80006b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006b18:	2b02      	cmp	r3, #2
80006b1a:	d002      	beq.n	80006b22 <USBD_SetConfig+0x36>
80006b1c:	2b03      	cmp	r3, #3
80006b1e:	d023      	beq.n	80006b68 <USBD_SetConfig+0x7c>
80006b20:	e062      	b.n	80006be8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
80006b22:	4b38      	ldr	r3, [pc, #224]	; (80006c04 <USBD_SetConfig+0x118>)
80006b24:	781b      	ldrb	r3, [r3, #0]
80006b26:	2b00      	cmp	r3, #0
80006b28:	d01a      	beq.n	80006b60 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
80006b2a:	4b36      	ldr	r3, [pc, #216]	; (80006c04 <USBD_SetConfig+0x118>)
80006b2c:	781b      	ldrb	r3, [r3, #0]
80006b2e:	461a      	mov	r2, r3
80006b30:	687b      	ldr	r3, [r7, #4]
80006b32:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
80006b34:	687b      	ldr	r3, [r7, #4]
80006b36:	2203      	movs	r2, #3
80006b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
80006b3c:	4b31      	ldr	r3, [pc, #196]	; (80006c04 <USBD_SetConfig+0x118>)
80006b3e:	781b      	ldrb	r3, [r3, #0]
80006b40:	4619      	mov	r1, r3
80006b42:	6878      	ldr	r0, [r7, #4]
80006b44:	f7ff f9f3 	bl	80005f2e <USBD_SetClassConfig>
80006b48:	4603      	mov	r3, r0
80006b4a:	2b02      	cmp	r3, #2
80006b4c:	d104      	bne.n	80006b58 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
80006b4e:	6839      	ldr	r1, [r7, #0]
80006b50:	6878      	ldr	r0, [r7, #4]
80006b52:	f000 f931 	bl	80006db8 <USBD_CtlError>
            return;
80006b56:	e052      	b.n	80006bfe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
80006b58:	6878      	ldr	r0, [r7, #4]
80006b5a:	f000 f9f5 	bl	80006f48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
80006b5e:	e04e      	b.n	80006bfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
80006b60:	6878      	ldr	r0, [r7, #4]
80006b62:	f000 f9f1 	bl	80006f48 <USBD_CtlSendStatus>
        break;
80006b66:	e04a      	b.n	80006bfe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
80006b68:	4b26      	ldr	r3, [pc, #152]	; (80006c04 <USBD_SetConfig+0x118>)
80006b6a:	781b      	ldrb	r3, [r3, #0]
80006b6c:	2b00      	cmp	r3, #0
80006b6e:	d112      	bne.n	80006b96 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
80006b70:	687b      	ldr	r3, [r7, #4]
80006b72:	2202      	movs	r2, #2
80006b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
80006b78:	4b22      	ldr	r3, [pc, #136]	; (80006c04 <USBD_SetConfig+0x118>)
80006b7a:	781b      	ldrb	r3, [r3, #0]
80006b7c:	461a      	mov	r2, r3
80006b7e:	687b      	ldr	r3, [r7, #4]
80006b80:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
80006b82:	4b20      	ldr	r3, [pc, #128]	; (80006c04 <USBD_SetConfig+0x118>)
80006b84:	781b      	ldrb	r3, [r3, #0]
80006b86:	4619      	mov	r1, r3
80006b88:	6878      	ldr	r0, [r7, #4]
80006b8a:	f7ff f9ef 	bl	80005f6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
80006b8e:	6878      	ldr	r0, [r7, #4]
80006b90:	f000 f9da 	bl	80006f48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
80006b94:	e033      	b.n	80006bfe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
80006b96:	4b1b      	ldr	r3, [pc, #108]	; (80006c04 <USBD_SetConfig+0x118>)
80006b98:	781b      	ldrb	r3, [r3, #0]
80006b9a:	461a      	mov	r2, r3
80006b9c:	687b      	ldr	r3, [r7, #4]
80006b9e:	685b      	ldr	r3, [r3, #4]
80006ba0:	429a      	cmp	r2, r3
80006ba2:	d01d      	beq.n	80006be0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
80006ba4:	687b      	ldr	r3, [r7, #4]
80006ba6:	685b      	ldr	r3, [r3, #4]
80006ba8:	b2db      	uxtb	r3, r3
80006baa:	4619      	mov	r1, r3
80006bac:	6878      	ldr	r0, [r7, #4]
80006bae:	f7ff f9dd 	bl	80005f6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
80006bb2:	4b14      	ldr	r3, [pc, #80]	; (80006c04 <USBD_SetConfig+0x118>)
80006bb4:	781b      	ldrb	r3, [r3, #0]
80006bb6:	461a      	mov	r2, r3
80006bb8:	687b      	ldr	r3, [r7, #4]
80006bba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
80006bbc:	4b11      	ldr	r3, [pc, #68]	; (80006c04 <USBD_SetConfig+0x118>)
80006bbe:	781b      	ldrb	r3, [r3, #0]
80006bc0:	4619      	mov	r1, r3
80006bc2:	6878      	ldr	r0, [r7, #4]
80006bc4:	f7ff f9b3 	bl	80005f2e <USBD_SetClassConfig>
80006bc8:	4603      	mov	r3, r0
80006bca:	2b02      	cmp	r3, #2
80006bcc:	d104      	bne.n	80006bd8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
80006bce:	6839      	ldr	r1, [r7, #0]
80006bd0:	6878      	ldr	r0, [r7, #4]
80006bd2:	f000 f8f1 	bl	80006db8 <USBD_CtlError>
            return;
80006bd6:	e012      	b.n	80006bfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
80006bd8:	6878      	ldr	r0, [r7, #4]
80006bda:	f000 f9b5 	bl	80006f48 <USBD_CtlSendStatus>
        break;
80006bde:	e00e      	b.n	80006bfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
80006be0:	6878      	ldr	r0, [r7, #4]
80006be2:	f000 f9b1 	bl	80006f48 <USBD_CtlSendStatus>
        break;
80006be6:	e00a      	b.n	80006bfe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
80006be8:	6839      	ldr	r1, [r7, #0]
80006bea:	6878      	ldr	r0, [r7, #4]
80006bec:	f000 f8e4 	bl	80006db8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
80006bf0:	4b04      	ldr	r3, [pc, #16]	; (80006c04 <USBD_SetConfig+0x118>)
80006bf2:	781b      	ldrb	r3, [r3, #0]
80006bf4:	4619      	mov	r1, r3
80006bf6:	6878      	ldr	r0, [r7, #4]
80006bf8:	f7ff f9b8 	bl	80005f6c <USBD_ClrClassConfig>
        break;
80006bfc:	bf00      	nop
    }
  }
}
80006bfe:	3708      	adds	r7, #8
80006c00:	46bd      	mov	sp, r7
80006c02:	bd80      	pop	{r7, pc}
80006c04:	2000019c 	.word	0x2000019c

80006c08 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
80006c08:	b580      	push	{r7, lr}
80006c0a:	b082      	sub	sp, #8
80006c0c:	af00      	add	r7, sp, #0
80006c0e:	6078      	str	r0, [r7, #4]
80006c10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
80006c12:	683b      	ldr	r3, [r7, #0]
80006c14:	88db      	ldrh	r3, [r3, #6]
80006c16:	2b01      	cmp	r3, #1
80006c18:	d004      	beq.n	80006c24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
80006c1a:	6839      	ldr	r1, [r7, #0]
80006c1c:	6878      	ldr	r0, [r7, #4]
80006c1e:	f000 f8cb 	bl	80006db8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
80006c22:	e021      	b.n	80006c68 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
80006c24:	687b      	ldr	r3, [r7, #4]
80006c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006c2a:	2b01      	cmp	r3, #1
80006c2c:	db17      	blt.n	80006c5e <USBD_GetConfig+0x56>
80006c2e:	2b02      	cmp	r3, #2
80006c30:	dd02      	ble.n	80006c38 <USBD_GetConfig+0x30>
80006c32:	2b03      	cmp	r3, #3
80006c34:	d00b      	beq.n	80006c4e <USBD_GetConfig+0x46>
80006c36:	e012      	b.n	80006c5e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
80006c38:	687b      	ldr	r3, [r7, #4]
80006c3a:	2200      	movs	r2, #0
80006c3c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
80006c3e:	687b      	ldr	r3, [r7, #4]
80006c40:	3308      	adds	r3, #8
80006c42:	2201      	movs	r2, #1
80006c44:	4619      	mov	r1, r3
80006c46:	6878      	ldr	r0, [r7, #4]
80006c48:	f000 f920 	bl	80006e8c <USBD_CtlSendData>
        break;
80006c4c:	e00c      	b.n	80006c68 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
80006c4e:	687b      	ldr	r3, [r7, #4]
80006c50:	3304      	adds	r3, #4
80006c52:	2201      	movs	r2, #1
80006c54:	4619      	mov	r1, r3
80006c56:	6878      	ldr	r0, [r7, #4]
80006c58:	f000 f918 	bl	80006e8c <USBD_CtlSendData>
        break;
80006c5c:	e004      	b.n	80006c68 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
80006c5e:	6839      	ldr	r1, [r7, #0]
80006c60:	6878      	ldr	r0, [r7, #4]
80006c62:	f000 f8a9 	bl	80006db8 <USBD_CtlError>
        break;
80006c66:	bf00      	nop
}
80006c68:	bf00      	nop
80006c6a:	3708      	adds	r7, #8
80006c6c:	46bd      	mov	sp, r7
80006c6e:	bd80      	pop	{r7, pc}

80006c70 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
80006c70:	b580      	push	{r7, lr}
80006c72:	b082      	sub	sp, #8
80006c74:	af00      	add	r7, sp, #0
80006c76:	6078      	str	r0, [r7, #4]
80006c78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
80006c7a:	687b      	ldr	r3, [r7, #4]
80006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006c80:	3b01      	subs	r3, #1
80006c82:	2b02      	cmp	r3, #2
80006c84:	d81e      	bhi.n	80006cc4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
80006c86:	683b      	ldr	r3, [r7, #0]
80006c88:	88db      	ldrh	r3, [r3, #6]
80006c8a:	2b02      	cmp	r3, #2
80006c8c:	d004      	beq.n	80006c98 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
80006c8e:	6839      	ldr	r1, [r7, #0]
80006c90:	6878      	ldr	r0, [r7, #4]
80006c92:	f000 f891 	bl	80006db8 <USBD_CtlError>
        break;
80006c96:	e01a      	b.n	80006cce <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
80006c98:	687b      	ldr	r3, [r7, #4]
80006c9a:	2201      	movs	r2, #1
80006c9c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
80006c9e:	687b      	ldr	r3, [r7, #4]
80006ca0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
80006ca4:	2b00      	cmp	r3, #0
80006ca6:	d005      	beq.n	80006cb4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
80006ca8:	687b      	ldr	r3, [r7, #4]
80006caa:	68db      	ldr	r3, [r3, #12]
80006cac:	f043 0202 	orr.w	r2, r3, #2
80006cb0:	687b      	ldr	r3, [r7, #4]
80006cb2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
80006cb4:	687b      	ldr	r3, [r7, #4]
80006cb6:	330c      	adds	r3, #12
80006cb8:	2202      	movs	r2, #2
80006cba:	4619      	mov	r1, r3
80006cbc:	6878      	ldr	r0, [r7, #4]
80006cbe:	f000 f8e5 	bl	80006e8c <USBD_CtlSendData>
      break;
80006cc2:	e004      	b.n	80006cce <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
80006cc4:	6839      	ldr	r1, [r7, #0]
80006cc6:	6878      	ldr	r0, [r7, #4]
80006cc8:	f000 f876 	bl	80006db8 <USBD_CtlError>
      break;
80006ccc:	bf00      	nop
  }
}
80006cce:	bf00      	nop
80006cd0:	3708      	adds	r7, #8
80006cd2:	46bd      	mov	sp, r7
80006cd4:	bd80      	pop	{r7, pc}

80006cd6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
80006cd6:	b580      	push	{r7, lr}
80006cd8:	b082      	sub	sp, #8
80006cda:	af00      	add	r7, sp, #0
80006cdc:	6078      	str	r0, [r7, #4]
80006cde:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
80006ce0:	683b      	ldr	r3, [r7, #0]
80006ce2:	885b      	ldrh	r3, [r3, #2]
80006ce4:	2b01      	cmp	r3, #1
80006ce6:	d106      	bne.n	80006cf6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
80006ce8:	687b      	ldr	r3, [r7, #4]
80006cea:	2201      	movs	r2, #1
80006cec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
80006cf0:	6878      	ldr	r0, [r7, #4]
80006cf2:	f000 f929 	bl	80006f48 <USBD_CtlSendStatus>
  }
}
80006cf6:	bf00      	nop
80006cf8:	3708      	adds	r7, #8
80006cfa:	46bd      	mov	sp, r7
80006cfc:	bd80      	pop	{r7, pc}

80006cfe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
80006cfe:	b580      	push	{r7, lr}
80006d00:	b082      	sub	sp, #8
80006d02:	af00      	add	r7, sp, #0
80006d04:	6078      	str	r0, [r7, #4]
80006d06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
80006d08:	687b      	ldr	r3, [r7, #4]
80006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
80006d0e:	3b01      	subs	r3, #1
80006d10:	2b02      	cmp	r3, #2
80006d12:	d80b      	bhi.n	80006d2c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
80006d14:	683b      	ldr	r3, [r7, #0]
80006d16:	885b      	ldrh	r3, [r3, #2]
80006d18:	2b01      	cmp	r3, #1
80006d1a:	d10c      	bne.n	80006d36 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
80006d1c:	687b      	ldr	r3, [r7, #4]
80006d1e:	2200      	movs	r2, #0
80006d20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
80006d24:	6878      	ldr	r0, [r7, #4]
80006d26:	f000 f90f 	bl	80006f48 <USBD_CtlSendStatus>
      }
      break;
80006d2a:	e004      	b.n	80006d36 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
80006d2c:	6839      	ldr	r1, [r7, #0]
80006d2e:	6878      	ldr	r0, [r7, #4]
80006d30:	f000 f842 	bl	80006db8 <USBD_CtlError>
      break;
80006d34:	e000      	b.n	80006d38 <USBD_ClrFeature+0x3a>
      break;
80006d36:	bf00      	nop
  }
}
80006d38:	bf00      	nop
80006d3a:	3708      	adds	r7, #8
80006d3c:	46bd      	mov	sp, r7
80006d3e:	bd80      	pop	{r7, pc}

80006d40 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
80006d40:	b480      	push	{r7}
80006d42:	b083      	sub	sp, #12
80006d44:	af00      	add	r7, sp, #0
80006d46:	6078      	str	r0, [r7, #4]
80006d48:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
80006d4a:	683b      	ldr	r3, [r7, #0]
80006d4c:	781a      	ldrb	r2, [r3, #0]
80006d4e:	687b      	ldr	r3, [r7, #4]
80006d50:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
80006d52:	683b      	ldr	r3, [r7, #0]
80006d54:	785a      	ldrb	r2, [r3, #1]
80006d56:	687b      	ldr	r3, [r7, #4]
80006d58:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
80006d5a:	683b      	ldr	r3, [r7, #0]
80006d5c:	3302      	adds	r3, #2
80006d5e:	781b      	ldrb	r3, [r3, #0]
80006d60:	b29a      	uxth	r2, r3
80006d62:	683b      	ldr	r3, [r7, #0]
80006d64:	3303      	adds	r3, #3
80006d66:	781b      	ldrb	r3, [r3, #0]
80006d68:	b29b      	uxth	r3, r3
80006d6a:	021b      	lsls	r3, r3, #8
80006d6c:	b29b      	uxth	r3, r3
80006d6e:	4413      	add	r3, r2
80006d70:	b29a      	uxth	r2, r3
80006d72:	687b      	ldr	r3, [r7, #4]
80006d74:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
80006d76:	683b      	ldr	r3, [r7, #0]
80006d78:	3304      	adds	r3, #4
80006d7a:	781b      	ldrb	r3, [r3, #0]
80006d7c:	b29a      	uxth	r2, r3
80006d7e:	683b      	ldr	r3, [r7, #0]
80006d80:	3305      	adds	r3, #5
80006d82:	781b      	ldrb	r3, [r3, #0]
80006d84:	b29b      	uxth	r3, r3
80006d86:	021b      	lsls	r3, r3, #8
80006d88:	b29b      	uxth	r3, r3
80006d8a:	4413      	add	r3, r2
80006d8c:	b29a      	uxth	r2, r3
80006d8e:	687b      	ldr	r3, [r7, #4]
80006d90:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
80006d92:	683b      	ldr	r3, [r7, #0]
80006d94:	3306      	adds	r3, #6
80006d96:	781b      	ldrb	r3, [r3, #0]
80006d98:	b29a      	uxth	r2, r3
80006d9a:	683b      	ldr	r3, [r7, #0]
80006d9c:	3307      	adds	r3, #7
80006d9e:	781b      	ldrb	r3, [r3, #0]
80006da0:	b29b      	uxth	r3, r3
80006da2:	021b      	lsls	r3, r3, #8
80006da4:	b29b      	uxth	r3, r3
80006da6:	4413      	add	r3, r2
80006da8:	b29a      	uxth	r2, r3
80006daa:	687b      	ldr	r3, [r7, #4]
80006dac:	80da      	strh	r2, [r3, #6]

}
80006dae:	bf00      	nop
80006db0:	370c      	adds	r7, #12
80006db2:	46bd      	mov	sp, r7
80006db4:	bc80      	pop	{r7}
80006db6:	4770      	bx	lr

80006db8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
80006db8:	b580      	push	{r7, lr}
80006dba:	b082      	sub	sp, #8
80006dbc:	af00      	add	r7, sp, #0
80006dbe:	6078      	str	r0, [r7, #4]
80006dc0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
80006dc2:	2180      	movs	r1, #128	; 0x80
80006dc4:	6878      	ldr	r0, [r7, #4]
80006dc6:	f000 fc8f 	bl	800076e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
80006dca:	2100      	movs	r1, #0
80006dcc:	6878      	ldr	r0, [r7, #4]
80006dce:	f000 fc8b 	bl	800076e8 <USBD_LL_StallEP>
}
80006dd2:	bf00      	nop
80006dd4:	3708      	adds	r7, #8
80006dd6:	46bd      	mov	sp, r7
80006dd8:	bd80      	pop	{r7, pc}

80006dda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
80006dda:	b580      	push	{r7, lr}
80006ddc:	b086      	sub	sp, #24
80006dde:	af00      	add	r7, sp, #0
80006de0:	60f8      	str	r0, [r7, #12]
80006de2:	60b9      	str	r1, [r7, #8]
80006de4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
80006de6:	2300      	movs	r3, #0
80006de8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
80006dea:	68fb      	ldr	r3, [r7, #12]
80006dec:	2b00      	cmp	r3, #0
80006dee:	d032      	beq.n	80006e56 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
80006df0:	68f8      	ldr	r0, [r7, #12]
80006df2:	f000 f834 	bl	80006e5e <USBD_GetLen>
80006df6:	4603      	mov	r3, r0
80006df8:	3301      	adds	r3, #1
80006dfa:	b29b      	uxth	r3, r3
80006dfc:	005b      	lsls	r3, r3, #1
80006dfe:	b29a      	uxth	r2, r3
80006e00:	687b      	ldr	r3, [r7, #4]
80006e02:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
80006e04:	7dfb      	ldrb	r3, [r7, #23]
80006e06:	1c5a      	adds	r2, r3, #1
80006e08:	75fa      	strb	r2, [r7, #23]
80006e0a:	461a      	mov	r2, r3
80006e0c:	68bb      	ldr	r3, [r7, #8]
80006e0e:	4413      	add	r3, r2
80006e10:	687a      	ldr	r2, [r7, #4]
80006e12:	7812      	ldrb	r2, [r2, #0]
80006e14:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
80006e16:	7dfb      	ldrb	r3, [r7, #23]
80006e18:	1c5a      	adds	r2, r3, #1
80006e1a:	75fa      	strb	r2, [r7, #23]
80006e1c:	461a      	mov	r2, r3
80006e1e:	68bb      	ldr	r3, [r7, #8]
80006e20:	4413      	add	r3, r2
80006e22:	2203      	movs	r2, #3
80006e24:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
80006e26:	e012      	b.n	80006e4e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
80006e28:	68fb      	ldr	r3, [r7, #12]
80006e2a:	1c5a      	adds	r2, r3, #1
80006e2c:	60fa      	str	r2, [r7, #12]
80006e2e:	7dfa      	ldrb	r2, [r7, #23]
80006e30:	1c51      	adds	r1, r2, #1
80006e32:	75f9      	strb	r1, [r7, #23]
80006e34:	4611      	mov	r1, r2
80006e36:	68ba      	ldr	r2, [r7, #8]
80006e38:	440a      	add	r2, r1
80006e3a:	781b      	ldrb	r3, [r3, #0]
80006e3c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
80006e3e:	7dfb      	ldrb	r3, [r7, #23]
80006e40:	1c5a      	adds	r2, r3, #1
80006e42:	75fa      	strb	r2, [r7, #23]
80006e44:	461a      	mov	r2, r3
80006e46:	68bb      	ldr	r3, [r7, #8]
80006e48:	4413      	add	r3, r2
80006e4a:	2200      	movs	r2, #0
80006e4c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
80006e4e:	68fb      	ldr	r3, [r7, #12]
80006e50:	781b      	ldrb	r3, [r3, #0]
80006e52:	2b00      	cmp	r3, #0
80006e54:	d1e8      	bne.n	80006e28 <USBD_GetString+0x4e>
    }
  }
}
80006e56:	bf00      	nop
80006e58:	3718      	adds	r7, #24
80006e5a:	46bd      	mov	sp, r7
80006e5c:	bd80      	pop	{r7, pc}

80006e5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
80006e5e:	b480      	push	{r7}
80006e60:	b085      	sub	sp, #20
80006e62:	af00      	add	r7, sp, #0
80006e64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
80006e66:	2300      	movs	r3, #0
80006e68:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
80006e6a:	e005      	b.n	80006e78 <USBD_GetLen+0x1a>
  {
    len++;
80006e6c:	7bfb      	ldrb	r3, [r7, #15]
80006e6e:	3301      	adds	r3, #1
80006e70:	73fb      	strb	r3, [r7, #15]
    buf++;
80006e72:	687b      	ldr	r3, [r7, #4]
80006e74:	3301      	adds	r3, #1
80006e76:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
80006e78:	687b      	ldr	r3, [r7, #4]
80006e7a:	781b      	ldrb	r3, [r3, #0]
80006e7c:	2b00      	cmp	r3, #0
80006e7e:	d1f5      	bne.n	80006e6c <USBD_GetLen+0xe>
  }

  return len;
80006e80:	7bfb      	ldrb	r3, [r7, #15]
}
80006e82:	4618      	mov	r0, r3
80006e84:	3714      	adds	r7, #20
80006e86:	46bd      	mov	sp, r7
80006e88:	bc80      	pop	{r7}
80006e8a:	4770      	bx	lr

80006e8c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
80006e8c:	b580      	push	{r7, lr}
80006e8e:	b084      	sub	sp, #16
80006e90:	af00      	add	r7, sp, #0
80006e92:	60f8      	str	r0, [r7, #12]
80006e94:	60b9      	str	r1, [r7, #8]
80006e96:	4613      	mov	r3, r2
80006e98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
80006e9a:	68fb      	ldr	r3, [r7, #12]
80006e9c:	2202      	movs	r2, #2
80006e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
80006ea2:	88fa      	ldrh	r2, [r7, #6]
80006ea4:	68fb      	ldr	r3, [r7, #12]
80006ea6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
80006ea8:	88fa      	ldrh	r2, [r7, #6]
80006eaa:	68fb      	ldr	r3, [r7, #12]
80006eac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
80006eae:	88fb      	ldrh	r3, [r7, #6]
80006eb0:	68ba      	ldr	r2, [r7, #8]
80006eb2:	2100      	movs	r1, #0
80006eb4:	68f8      	ldr	r0, [r7, #12]
80006eb6:	f000 fc99 	bl	800077ec <USBD_LL_Transmit>

  return USBD_OK;
80006eba:	2300      	movs	r3, #0
}
80006ebc:	4618      	mov	r0, r3
80006ebe:	3710      	adds	r7, #16
80006ec0:	46bd      	mov	sp, r7
80006ec2:	bd80      	pop	{r7, pc}

80006ec4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
80006ec4:	b580      	push	{r7, lr}
80006ec6:	b084      	sub	sp, #16
80006ec8:	af00      	add	r7, sp, #0
80006eca:	60f8      	str	r0, [r7, #12]
80006ecc:	60b9      	str	r1, [r7, #8]
80006ece:	4613      	mov	r3, r2
80006ed0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
80006ed2:	88fb      	ldrh	r3, [r7, #6]
80006ed4:	68ba      	ldr	r2, [r7, #8]
80006ed6:	2100      	movs	r1, #0
80006ed8:	68f8      	ldr	r0, [r7, #12]
80006eda:	f000 fc87 	bl	800077ec <USBD_LL_Transmit>

  return USBD_OK;
80006ede:	2300      	movs	r3, #0
}
80006ee0:	4618      	mov	r0, r3
80006ee2:	3710      	adds	r7, #16
80006ee4:	46bd      	mov	sp, r7
80006ee6:	bd80      	pop	{r7, pc}

80006ee8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
80006ee8:	b580      	push	{r7, lr}
80006eea:	b084      	sub	sp, #16
80006eec:	af00      	add	r7, sp, #0
80006eee:	60f8      	str	r0, [r7, #12]
80006ef0:	60b9      	str	r1, [r7, #8]
80006ef2:	4613      	mov	r3, r2
80006ef4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
80006ef6:	68fb      	ldr	r3, [r7, #12]
80006ef8:	2203      	movs	r2, #3
80006efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
80006efe:	88fa      	ldrh	r2, [r7, #6]
80006f00:	68fb      	ldr	r3, [r7, #12]
80006f02:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
80006f06:	88fa      	ldrh	r2, [r7, #6]
80006f08:	68fb      	ldr	r3, [r7, #12]
80006f0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
80006f0e:	88fb      	ldrh	r3, [r7, #6]
80006f10:	68ba      	ldr	r2, [r7, #8]
80006f12:	2100      	movs	r1, #0
80006f14:	68f8      	ldr	r0, [r7, #12]
80006f16:	f000 fc8c 	bl	80007832 <USBD_LL_PrepareReceive>

  return USBD_OK;
80006f1a:	2300      	movs	r3, #0
}
80006f1c:	4618      	mov	r0, r3
80006f1e:	3710      	adds	r7, #16
80006f20:	46bd      	mov	sp, r7
80006f22:	bd80      	pop	{r7, pc}

80006f24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
80006f24:	b580      	push	{r7, lr}
80006f26:	b084      	sub	sp, #16
80006f28:	af00      	add	r7, sp, #0
80006f2a:	60f8      	str	r0, [r7, #12]
80006f2c:	60b9      	str	r1, [r7, #8]
80006f2e:	4613      	mov	r3, r2
80006f30:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
80006f32:	88fb      	ldrh	r3, [r7, #6]
80006f34:	68ba      	ldr	r2, [r7, #8]
80006f36:	2100      	movs	r1, #0
80006f38:	68f8      	ldr	r0, [r7, #12]
80006f3a:	f000 fc7a 	bl	80007832 <USBD_LL_PrepareReceive>

  return USBD_OK;
80006f3e:	2300      	movs	r3, #0
}
80006f40:	4618      	mov	r0, r3
80006f42:	3710      	adds	r7, #16
80006f44:	46bd      	mov	sp, r7
80006f46:	bd80      	pop	{r7, pc}

80006f48 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
80006f48:	b580      	push	{r7, lr}
80006f4a:	b082      	sub	sp, #8
80006f4c:	af00      	add	r7, sp, #0
80006f4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
80006f50:	687b      	ldr	r3, [r7, #4]
80006f52:	2204      	movs	r2, #4
80006f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
80006f58:	2300      	movs	r3, #0
80006f5a:	2200      	movs	r2, #0
80006f5c:	2100      	movs	r1, #0
80006f5e:	6878      	ldr	r0, [r7, #4]
80006f60:	f000 fc44 	bl	800077ec <USBD_LL_Transmit>

  return USBD_OK;
80006f64:	2300      	movs	r3, #0
}
80006f66:	4618      	mov	r0, r3
80006f68:	3708      	adds	r7, #8
80006f6a:	46bd      	mov	sp, r7
80006f6c:	bd80      	pop	{r7, pc}

80006f6e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
80006f6e:	b580      	push	{r7, lr}
80006f70:	b082      	sub	sp, #8
80006f72:	af00      	add	r7, sp, #0
80006f74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
80006f76:	687b      	ldr	r3, [r7, #4]
80006f78:	2205      	movs	r2, #5
80006f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
80006f7e:	2300      	movs	r3, #0
80006f80:	2200      	movs	r2, #0
80006f82:	2100      	movs	r1, #0
80006f84:	6878      	ldr	r0, [r7, #4]
80006f86:	f000 fc54 	bl	80007832 <USBD_LL_PrepareReceive>

  return USBD_OK;
80006f8a:	2300      	movs	r3, #0
}
80006f8c:	4618      	mov	r0, r3
80006f8e:	3708      	adds	r7, #8
80006f90:	46bd      	mov	sp, r7
80006f92:	bd80      	pop	{r7, pc}

80006f94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
80006f94:	b580      	push	{r7, lr}
80006f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
80006f98:	2200      	movs	r2, #0
80006f9a:	4912      	ldr	r1, [pc, #72]	; (80006fe4 <MX_USB_DEVICE_Init+0x50>)
80006f9c:	4812      	ldr	r0, [pc, #72]	; (80006fe8 <MX_USB_DEVICE_Init+0x54>)
80006f9e:	f7fe ff6c 	bl	80005e7a <USBD_Init>
80006fa2:	4603      	mov	r3, r0
80006fa4:	2b00      	cmp	r3, #0
80006fa6:	d001      	beq.n	80006fac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
80006fa8:	f7fa ffce 	bl	80001f48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
80006fac:	490f      	ldr	r1, [pc, #60]	; (80006fec <MX_USB_DEVICE_Init+0x58>)
80006fae:	480e      	ldr	r0, [pc, #56]	; (80006fe8 <MX_USB_DEVICE_Init+0x54>)
80006fb0:	f7fe ff8e 	bl	80005ed0 <USBD_RegisterClass>
80006fb4:	4603      	mov	r3, r0
80006fb6:	2b00      	cmp	r3, #0
80006fb8:	d001      	beq.n	80006fbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
80006fba:	f7fa ffc5 	bl	80001f48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
80006fbe:	490c      	ldr	r1, [pc, #48]	; (80006ff0 <MX_USB_DEVICE_Init+0x5c>)
80006fc0:	4809      	ldr	r0, [pc, #36]	; (80006fe8 <MX_USB_DEVICE_Init+0x54>)
80006fc2:	f7fe febf 	bl	80005d44 <USBD_CDC_RegisterInterface>
80006fc6:	4603      	mov	r3, r0
80006fc8:	2b00      	cmp	r3, #0
80006fca:	d001      	beq.n	80006fd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
80006fcc:	f7fa ffbc 	bl	80001f48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
80006fd0:	4805      	ldr	r0, [pc, #20]	; (80006fe8 <MX_USB_DEVICE_Init+0x54>)
80006fd2:	f7fe ff96 	bl	80005f02 <USBD_Start>
80006fd6:	4603      	mov	r3, r0
80006fd8:	2b00      	cmp	r3, #0
80006fda:	d001      	beq.n	80006fe0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
80006fdc:	f7fa ffb4 	bl	80001f48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
80006fe0:	bf00      	nop
80006fe2:	bd80      	pop	{r7, pc}
80006fe4:	20000130 	.word	0x20000130
80006fe8:	20000518 	.word	0x20000518
80006fec:	2000001c 	.word	0x2000001c
80006ff0:	20000120 	.word	0x20000120

80006ff4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
80006ff4:	b580      	push	{r7, lr}
80006ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
80006ff8:	2200      	movs	r2, #0
80006ffa:	4905      	ldr	r1, [pc, #20]	; (80007010 <CDC_Init_FS+0x1c>)
80006ffc:	4805      	ldr	r0, [pc, #20]	; (80007014 <CDC_Init_FS+0x20>)
80006ffe:	f7fe feb7 	bl	80005d70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
80007002:	4905      	ldr	r1, [pc, #20]	; (80007018 <CDC_Init_FS+0x24>)
80007004:	4803      	ldr	r0, [pc, #12]	; (80007014 <CDC_Init_FS+0x20>)
80007006:	f7fe fecc 	bl	80005da2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
8000700a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
8000700c:	4618      	mov	r0, r3
8000700e:	bd80      	pop	{r7, pc}
80007010:	20000bd0 	.word	0x20000bd0
80007014:	20000518 	.word	0x20000518
80007018:	200007dc 	.word	0x200007dc

8000701c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
8000701c:	b480      	push	{r7}
8000701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
80007020:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
80007022:	4618      	mov	r0, r3
80007024:	46bd      	mov	sp, r7
80007026:	bc80      	pop	{r7}
80007028:	4770      	bx	lr
	...

8000702c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
8000702c:	b480      	push	{r7}
8000702e:	b083      	sub	sp, #12
80007030:	af00      	add	r7, sp, #0
80007032:	4603      	mov	r3, r0
80007034:	6039      	str	r1, [r7, #0]
80007036:	71fb      	strb	r3, [r7, #7]
80007038:	4613      	mov	r3, r2
8000703a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
8000703c:	79fb      	ldrb	r3, [r7, #7]
8000703e:	2b23      	cmp	r3, #35	; 0x23
80007040:	d84a      	bhi.n	800070d8 <CDC_Control_FS+0xac>
80007042:	a201      	add	r2, pc, #4	; (adr r2, 80007048 <CDC_Control_FS+0x1c>)
80007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
80007048:	800070d9 	.word	0x800070d9
8000704c:	800070d9 	.word	0x800070d9
80007050:	800070d9 	.word	0x800070d9
80007054:	800070d9 	.word	0x800070d9
80007058:	800070d9 	.word	0x800070d9
8000705c:	800070d9 	.word	0x800070d9
80007060:	800070d9 	.word	0x800070d9
80007064:	800070d9 	.word	0x800070d9
80007068:	800070d9 	.word	0x800070d9
8000706c:	800070d9 	.word	0x800070d9
80007070:	800070d9 	.word	0x800070d9
80007074:	800070d9 	.word	0x800070d9
80007078:	800070d9 	.word	0x800070d9
8000707c:	800070d9 	.word	0x800070d9
80007080:	800070d9 	.word	0x800070d9
80007084:	800070d9 	.word	0x800070d9
80007088:	800070d9 	.word	0x800070d9
8000708c:	800070d9 	.word	0x800070d9
80007090:	800070d9 	.word	0x800070d9
80007094:	800070d9 	.word	0x800070d9
80007098:	800070d9 	.word	0x800070d9
8000709c:	800070d9 	.word	0x800070d9
800070a0:	800070d9 	.word	0x800070d9
800070a4:	800070d9 	.word	0x800070d9
800070a8:	800070d9 	.word	0x800070d9
800070ac:	800070d9 	.word	0x800070d9
800070b0:	800070d9 	.word	0x800070d9
800070b4:	800070d9 	.word	0x800070d9
800070b8:	800070d9 	.word	0x800070d9
800070bc:	800070d9 	.word	0x800070d9
800070c0:	800070d9 	.word	0x800070d9
800070c4:	800070d9 	.word	0x800070d9
800070c8:	800070d9 	.word	0x800070d9
800070cc:	800070d9 	.word	0x800070d9
800070d0:	800070d9 	.word	0x800070d9
800070d4:	800070d9 	.word	0x800070d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
800070d8:	bf00      	nop
  }

  return (USBD_OK);
800070da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
800070dc:	4618      	mov	r0, r3
800070de:	370c      	adds	r7, #12
800070e0:	46bd      	mov	sp, r7
800070e2:	bc80      	pop	{r7}
800070e4:	4770      	bx	lr
800070e6:	bf00      	nop

800070e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
800070e8:	b580      	push	{r7, lr}
800070ea:	b084      	sub	sp, #16
800070ec:	af00      	add	r7, sp, #0
800070ee:	6078      	str	r0, [r7, #4]
800070f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
800070f2:	6879      	ldr	r1, [r7, #4]
800070f4:	4823      	ldr	r0, [pc, #140]	; (80007184 <CDC_Receive_FS+0x9c>)
800070f6:	f7fe fe54 	bl	80005da2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
800070fa:	4822      	ldr	r0, [pc, #136]	; (80007184 <CDC_Receive_FS+0x9c>)
800070fc:	f7fe fe93 	bl	80005e26 <USBD_CDC_ReceivePacket>

  for (uint8_t i = 0; i < *Len; i++)
80007100:	2300      	movs	r3, #0
80007102:	73fb      	strb	r3, [r7, #15]
80007104:	e009      	b.n	8000711a <CDC_Receive_FS+0x32>
  {
	  receivedData[i] = Buf[i];
80007106:	7bfb      	ldrb	r3, [r7, #15]
80007108:	687a      	ldr	r2, [r7, #4]
8000710a:	441a      	add	r2, r3
8000710c:	7bfb      	ldrb	r3, [r7, #15]
8000710e:	7811      	ldrb	r1, [r2, #0]
80007110:	4a1d      	ldr	r2, [pc, #116]	; (80007188 <CDC_Receive_FS+0xa0>)
80007112:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < *Len; i++)
80007114:	7bfb      	ldrb	r3, [r7, #15]
80007116:	3301      	adds	r3, #1
80007118:	73fb      	strb	r3, [r7, #15]
8000711a:	7bfa      	ldrb	r2, [r7, #15]
8000711c:	683b      	ldr	r3, [r7, #0]
8000711e:	681b      	ldr	r3, [r3, #0]
80007120:	429a      	cmp	r2, r3
80007122:	d3f0      	bcc.n	80007106 <CDC_Receive_FS+0x1e>
  }

  motor[0].newAbsoluteTargetUSB = (receivedData[0] << 8) | (receivedData[1]);
80007124:	4b18      	ldr	r3, [pc, #96]	; (80007188 <CDC_Receive_FS+0xa0>)
80007126:	781b      	ldrb	r3, [r3, #0]
80007128:	021b      	lsls	r3, r3, #8
8000712a:	b21a      	sxth	r2, r3
8000712c:	4b16      	ldr	r3, [pc, #88]	; (80007188 <CDC_Receive_FS+0xa0>)
8000712e:	785b      	ldrb	r3, [r3, #1]
80007130:	b21b      	sxth	r3, r3
80007132:	4313      	orrs	r3, r2
80007134:	b21a      	sxth	r2, r3
80007136:	4b15      	ldr	r3, [pc, #84]	; (8000718c <CDC_Receive_FS+0xa4>)
80007138:	859a      	strh	r2, [r3, #44]	; 0x2c
  motor[1].newAbsoluteTargetUSB = (receivedData[2] << 8) | (receivedData[3]);
8000713a:	4b13      	ldr	r3, [pc, #76]	; (80007188 <CDC_Receive_FS+0xa0>)
8000713c:	789b      	ldrb	r3, [r3, #2]
8000713e:	021b      	lsls	r3, r3, #8
80007140:	b21a      	sxth	r2, r3
80007142:	4b11      	ldr	r3, [pc, #68]	; (80007188 <CDC_Receive_FS+0xa0>)
80007144:	78db      	ldrb	r3, [r3, #3]
80007146:	b21b      	sxth	r3, r3
80007148:	4313      	orrs	r3, r2
8000714a:	b21a      	sxth	r2, r3
8000714c:	4b0f      	ldr	r3, [pc, #60]	; (8000718c <CDC_Receive_FS+0xa4>)
8000714e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  motor[2].newAbsoluteTargetUSB = (receivedData[4] << 8) | (receivedData[5]);
80007152:	4b0d      	ldr	r3, [pc, #52]	; (80007188 <CDC_Receive_FS+0xa0>)
80007154:	791b      	ldrb	r3, [r3, #4]
80007156:	021b      	lsls	r3, r3, #8
80007158:	b21a      	sxth	r2, r3
8000715a:	4b0b      	ldr	r3, [pc, #44]	; (80007188 <CDC_Receive_FS+0xa0>)
8000715c:	795b      	ldrb	r3, [r3, #5]
8000715e:	b21b      	sxth	r3, r3
80007160:	4313      	orrs	r3, r2
80007162:	b21a      	sxth	r2, r3
80007164:	4b09      	ldr	r3, [pc, #36]	; (8000718c <CDC_Receive_FS+0xa4>)
80007166:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

  newCommandAvailable = 1;
8000716a:	4b09      	ldr	r3, [pc, #36]	; (80007190 <CDC_Receive_FS+0xa8>)
8000716c:	2201      	movs	r2, #1
8000716e:	701a      	strb	r2, [r3, #0]

  CDC_Transmit_FS(&receivedData[0], 6);
80007170:	2106      	movs	r1, #6
80007172:	4805      	ldr	r0, [pc, #20]	; (80007188 <CDC_Receive_FS+0xa0>)
80007174:	f000 f80e 	bl	80007194 <CDC_Transmit_FS>
  return (USBD_OK);
80007178:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
8000717a:	4618      	mov	r0, r3
8000717c:	3710      	adds	r7, #16
8000717e:	46bd      	mov	sp, r7
80007180:	bd80      	pop	{r7, pc}
80007182:	bf00      	nop
80007184:	20000518 	.word	0x20000518
80007188:	20000bc4 	.word	0x20000bc4
8000718c:	20000484 	.word	0x20000484
80007190:	20000440 	.word	0x20000440

80007194 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
80007194:	b580      	push	{r7, lr}
80007196:	b084      	sub	sp, #16
80007198:	af00      	add	r7, sp, #0
8000719a:	6078      	str	r0, [r7, #4]
8000719c:	460b      	mov	r3, r1
8000719e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
800071a0:	2300      	movs	r3, #0
800071a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
800071a4:	4b0d      	ldr	r3, [pc, #52]	; (800071dc <CDC_Transmit_FS+0x48>)
800071a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
800071aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
800071ac:	68bb      	ldr	r3, [r7, #8]
800071ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
800071b2:	2b00      	cmp	r3, #0
800071b4:	d001      	beq.n	800071ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
800071b6:	2301      	movs	r3, #1
800071b8:	e00b      	b.n	800071d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
800071ba:	887b      	ldrh	r3, [r7, #2]
800071bc:	461a      	mov	r2, r3
800071be:	6879      	ldr	r1, [r7, #4]
800071c0:	4806      	ldr	r0, [pc, #24]	; (800071dc <CDC_Transmit_FS+0x48>)
800071c2:	f7fe fdd5 	bl	80005d70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
800071c6:	4805      	ldr	r0, [pc, #20]	; (800071dc <CDC_Transmit_FS+0x48>)
800071c8:	f7fe fdfe 	bl	80005dc8 <USBD_CDC_TransmitPacket>
800071cc:	4603      	mov	r3, r0
800071ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
800071d0:	7bfb      	ldrb	r3, [r7, #15]
}
800071d2:	4618      	mov	r0, r3
800071d4:	3710      	adds	r7, #16
800071d6:	46bd      	mov	sp, r7
800071d8:	bd80      	pop	{r7, pc}
800071da:	bf00      	nop
800071dc:	20000518 	.word	0x20000518

800071e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
800071e0:	b480      	push	{r7}
800071e2:	b083      	sub	sp, #12
800071e4:	af00      	add	r7, sp, #0
800071e6:	4603      	mov	r3, r0
800071e8:	6039      	str	r1, [r7, #0]
800071ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
800071ec:	683b      	ldr	r3, [r7, #0]
800071ee:	2212      	movs	r2, #18
800071f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
800071f2:	4b03      	ldr	r3, [pc, #12]	; (80007200 <USBD_FS_DeviceDescriptor+0x20>)
}
800071f4:	4618      	mov	r0, r3
800071f6:	370c      	adds	r7, #12
800071f8:	46bd      	mov	sp, r7
800071fa:	bc80      	pop	{r7}
800071fc:	4770      	bx	lr
800071fe:	bf00      	nop
80007200:	2000014c 	.word	0x2000014c

80007204 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
80007204:	b480      	push	{r7}
80007206:	b083      	sub	sp, #12
80007208:	af00      	add	r7, sp, #0
8000720a:	4603      	mov	r3, r0
8000720c:	6039      	str	r1, [r7, #0]
8000720e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
80007210:	683b      	ldr	r3, [r7, #0]
80007212:	2204      	movs	r2, #4
80007214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
80007216:	4b03      	ldr	r3, [pc, #12]	; (80007224 <USBD_FS_LangIDStrDescriptor+0x20>)
}
80007218:	4618      	mov	r0, r3
8000721a:	370c      	adds	r7, #12
8000721c:	46bd      	mov	sp, r7
8000721e:	bc80      	pop	{r7}
80007220:	4770      	bx	lr
80007222:	bf00      	nop
80007224:	20000160 	.word	0x20000160

80007228 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
80007228:	b580      	push	{r7, lr}
8000722a:	b082      	sub	sp, #8
8000722c:	af00      	add	r7, sp, #0
8000722e:	4603      	mov	r3, r0
80007230:	6039      	str	r1, [r7, #0]
80007232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
80007234:	79fb      	ldrb	r3, [r7, #7]
80007236:	2b00      	cmp	r3, #0
80007238:	d105      	bne.n	80007246 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
8000723a:	683a      	ldr	r2, [r7, #0]
8000723c:	4907      	ldr	r1, [pc, #28]	; (8000725c <USBD_FS_ProductStrDescriptor+0x34>)
8000723e:	4808      	ldr	r0, [pc, #32]	; (80007260 <USBD_FS_ProductStrDescriptor+0x38>)
80007240:	f7ff fdcb 	bl	80006dda <USBD_GetString>
80007244:	e004      	b.n	80007250 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
80007246:	683a      	ldr	r2, [r7, #0]
80007248:	4904      	ldr	r1, [pc, #16]	; (8000725c <USBD_FS_ProductStrDescriptor+0x34>)
8000724a:	4805      	ldr	r0, [pc, #20]	; (80007260 <USBD_FS_ProductStrDescriptor+0x38>)
8000724c:	f7ff fdc5 	bl	80006dda <USBD_GetString>
  }
  return USBD_StrDesc;
80007250:	4b02      	ldr	r3, [pc, #8]	; (8000725c <USBD_FS_ProductStrDescriptor+0x34>)
}
80007252:	4618      	mov	r0, r3
80007254:	3708      	adds	r7, #8
80007256:	46bd      	mov	sp, r7
80007258:	bd80      	pop	{r7, pc}
8000725a:	bf00      	nop
8000725c:	20000fc0 	.word	0x20000fc0
80007260:	800079bc 	.word	0x800079bc

80007264 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
80007264:	b580      	push	{r7, lr}
80007266:	b082      	sub	sp, #8
80007268:	af00      	add	r7, sp, #0
8000726a:	4603      	mov	r3, r0
8000726c:	6039      	str	r1, [r7, #0]
8000726e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
80007270:	683a      	ldr	r2, [r7, #0]
80007272:	4904      	ldr	r1, [pc, #16]	; (80007284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
80007274:	4804      	ldr	r0, [pc, #16]	; (80007288 <USBD_FS_ManufacturerStrDescriptor+0x24>)
80007276:	f7ff fdb0 	bl	80006dda <USBD_GetString>
  return USBD_StrDesc;
8000727a:	4b02      	ldr	r3, [pc, #8]	; (80007284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
8000727c:	4618      	mov	r0, r3
8000727e:	3708      	adds	r7, #8
80007280:	46bd      	mov	sp, r7
80007282:	bd80      	pop	{r7, pc}
80007284:	20000fc0 	.word	0x20000fc0
80007288:	800079d8 	.word	0x800079d8

8000728c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
8000728c:	b580      	push	{r7, lr}
8000728e:	b082      	sub	sp, #8
80007290:	af00      	add	r7, sp, #0
80007292:	4603      	mov	r3, r0
80007294:	6039      	str	r1, [r7, #0]
80007296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
80007298:	683b      	ldr	r3, [r7, #0]
8000729a:	221a      	movs	r2, #26
8000729c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
8000729e:	f000 f843 	bl	80007328 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
800072a2:	4b02      	ldr	r3, [pc, #8]	; (800072ac <USBD_FS_SerialStrDescriptor+0x20>)
}
800072a4:	4618      	mov	r0, r3
800072a6:	3708      	adds	r7, #8
800072a8:	46bd      	mov	sp, r7
800072aa:	bd80      	pop	{r7, pc}
800072ac:	20000164 	.word	0x20000164

800072b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
800072b0:	b580      	push	{r7, lr}
800072b2:	b082      	sub	sp, #8
800072b4:	af00      	add	r7, sp, #0
800072b6:	4603      	mov	r3, r0
800072b8:	6039      	str	r1, [r7, #0]
800072ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
800072bc:	79fb      	ldrb	r3, [r7, #7]
800072be:	2b00      	cmp	r3, #0
800072c0:	d105      	bne.n	800072ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
800072c2:	683a      	ldr	r2, [r7, #0]
800072c4:	4907      	ldr	r1, [pc, #28]	; (800072e4 <USBD_FS_ConfigStrDescriptor+0x34>)
800072c6:	4808      	ldr	r0, [pc, #32]	; (800072e8 <USBD_FS_ConfigStrDescriptor+0x38>)
800072c8:	f7ff fd87 	bl	80006dda <USBD_GetString>
800072cc:	e004      	b.n	800072d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
800072ce:	683a      	ldr	r2, [r7, #0]
800072d0:	4904      	ldr	r1, [pc, #16]	; (800072e4 <USBD_FS_ConfigStrDescriptor+0x34>)
800072d2:	4805      	ldr	r0, [pc, #20]	; (800072e8 <USBD_FS_ConfigStrDescriptor+0x38>)
800072d4:	f7ff fd81 	bl	80006dda <USBD_GetString>
  }
  return USBD_StrDesc;
800072d8:	4b02      	ldr	r3, [pc, #8]	; (800072e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
800072da:	4618      	mov	r0, r3
800072dc:	3708      	adds	r7, #8
800072de:	46bd      	mov	sp, r7
800072e0:	bd80      	pop	{r7, pc}
800072e2:	bf00      	nop
800072e4:	20000fc0 	.word	0x20000fc0
800072e8:	800079ec 	.word	0x800079ec

800072ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
800072ec:	b580      	push	{r7, lr}
800072ee:	b082      	sub	sp, #8
800072f0:	af00      	add	r7, sp, #0
800072f2:	4603      	mov	r3, r0
800072f4:	6039      	str	r1, [r7, #0]
800072f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
800072f8:	79fb      	ldrb	r3, [r7, #7]
800072fa:	2b00      	cmp	r3, #0
800072fc:	d105      	bne.n	8000730a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
800072fe:	683a      	ldr	r2, [r7, #0]
80007300:	4907      	ldr	r1, [pc, #28]	; (80007320 <USBD_FS_InterfaceStrDescriptor+0x34>)
80007302:	4808      	ldr	r0, [pc, #32]	; (80007324 <USBD_FS_InterfaceStrDescriptor+0x38>)
80007304:	f7ff fd69 	bl	80006dda <USBD_GetString>
80007308:	e004      	b.n	80007314 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
8000730a:	683a      	ldr	r2, [r7, #0]
8000730c:	4904      	ldr	r1, [pc, #16]	; (80007320 <USBD_FS_InterfaceStrDescriptor+0x34>)
8000730e:	4805      	ldr	r0, [pc, #20]	; (80007324 <USBD_FS_InterfaceStrDescriptor+0x38>)
80007310:	f7ff fd63 	bl	80006dda <USBD_GetString>
  }
  return USBD_StrDesc;
80007314:	4b02      	ldr	r3, [pc, #8]	; (80007320 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
80007316:	4618      	mov	r0, r3
80007318:	3708      	adds	r7, #8
8000731a:	46bd      	mov	sp, r7
8000731c:	bd80      	pop	{r7, pc}
8000731e:	bf00      	nop
80007320:	20000fc0 	.word	0x20000fc0
80007324:	800079f8 	.word	0x800079f8

80007328 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
80007328:	b580      	push	{r7, lr}
8000732a:	b084      	sub	sp, #16
8000732c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
8000732e:	4b0f      	ldr	r3, [pc, #60]	; (8000736c <Get_SerialNum+0x44>)
80007330:	681b      	ldr	r3, [r3, #0]
80007332:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
80007334:	4b0e      	ldr	r3, [pc, #56]	; (80007370 <Get_SerialNum+0x48>)
80007336:	681b      	ldr	r3, [r3, #0]
80007338:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
8000733a:	4b0e      	ldr	r3, [pc, #56]	; (80007374 <Get_SerialNum+0x4c>)
8000733c:	681b      	ldr	r3, [r3, #0]
8000733e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
80007340:	68fa      	ldr	r2, [r7, #12]
80007342:	687b      	ldr	r3, [r7, #4]
80007344:	4413      	add	r3, r2
80007346:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
80007348:	68fb      	ldr	r3, [r7, #12]
8000734a:	2b00      	cmp	r3, #0
8000734c:	d009      	beq.n	80007362 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
8000734e:	2208      	movs	r2, #8
80007350:	4909      	ldr	r1, [pc, #36]	; (80007378 <Get_SerialNum+0x50>)
80007352:	68f8      	ldr	r0, [r7, #12]
80007354:	f000 f814 	bl	80007380 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
80007358:	2204      	movs	r2, #4
8000735a:	4908      	ldr	r1, [pc, #32]	; (8000737c <Get_SerialNum+0x54>)
8000735c:	68b8      	ldr	r0, [r7, #8]
8000735e:	f000 f80f 	bl	80007380 <IntToUnicode>
  }
}
80007362:	bf00      	nop
80007364:	3710      	adds	r7, #16
80007366:	46bd      	mov	sp, r7
80007368:	bd80      	pop	{r7, pc}
8000736a:	bf00      	nop
8000736c:	1ffff7e8 	.word	0x1ffff7e8
80007370:	1ffff7ec 	.word	0x1ffff7ec
80007374:	1ffff7f0 	.word	0x1ffff7f0
80007378:	20000166 	.word	0x20000166
8000737c:	20000176 	.word	0x20000176

80007380 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
80007380:	b480      	push	{r7}
80007382:	b087      	sub	sp, #28
80007384:	af00      	add	r7, sp, #0
80007386:	60f8      	str	r0, [r7, #12]
80007388:	60b9      	str	r1, [r7, #8]
8000738a:	4613      	mov	r3, r2
8000738c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
8000738e:	2300      	movs	r3, #0
80007390:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
80007392:	2300      	movs	r3, #0
80007394:	75fb      	strb	r3, [r7, #23]
80007396:	e027      	b.n	800073e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
80007398:	68fb      	ldr	r3, [r7, #12]
8000739a:	0f1b      	lsrs	r3, r3, #28
8000739c:	2b09      	cmp	r3, #9
8000739e:	d80b      	bhi.n	800073b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
800073a0:	68fb      	ldr	r3, [r7, #12]
800073a2:	0f1b      	lsrs	r3, r3, #28
800073a4:	b2da      	uxtb	r2, r3
800073a6:	7dfb      	ldrb	r3, [r7, #23]
800073a8:	005b      	lsls	r3, r3, #1
800073aa:	4619      	mov	r1, r3
800073ac:	68bb      	ldr	r3, [r7, #8]
800073ae:	440b      	add	r3, r1
800073b0:	3230      	adds	r2, #48	; 0x30
800073b2:	b2d2      	uxtb	r2, r2
800073b4:	701a      	strb	r2, [r3, #0]
800073b6:	e00a      	b.n	800073ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
800073b8:	68fb      	ldr	r3, [r7, #12]
800073ba:	0f1b      	lsrs	r3, r3, #28
800073bc:	b2da      	uxtb	r2, r3
800073be:	7dfb      	ldrb	r3, [r7, #23]
800073c0:	005b      	lsls	r3, r3, #1
800073c2:	4619      	mov	r1, r3
800073c4:	68bb      	ldr	r3, [r7, #8]
800073c6:	440b      	add	r3, r1
800073c8:	3237      	adds	r2, #55	; 0x37
800073ca:	b2d2      	uxtb	r2, r2
800073cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
800073ce:	68fb      	ldr	r3, [r7, #12]
800073d0:	011b      	lsls	r3, r3, #4
800073d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
800073d4:	7dfb      	ldrb	r3, [r7, #23]
800073d6:	005b      	lsls	r3, r3, #1
800073d8:	3301      	adds	r3, #1
800073da:	68ba      	ldr	r2, [r7, #8]
800073dc:	4413      	add	r3, r2
800073de:	2200      	movs	r2, #0
800073e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
800073e2:	7dfb      	ldrb	r3, [r7, #23]
800073e4:	3301      	adds	r3, #1
800073e6:	75fb      	strb	r3, [r7, #23]
800073e8:	7dfa      	ldrb	r2, [r7, #23]
800073ea:	79fb      	ldrb	r3, [r7, #7]
800073ec:	429a      	cmp	r2, r3
800073ee:	d3d3      	bcc.n	80007398 <IntToUnicode+0x18>
  }
}
800073f0:	bf00      	nop
800073f2:	371c      	adds	r7, #28
800073f4:	46bd      	mov	sp, r7
800073f6:	bc80      	pop	{r7}
800073f8:	4770      	bx	lr
	...

800073fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
800073fc:	b580      	push	{r7, lr}
800073fe:	b084      	sub	sp, #16
80007400:	af00      	add	r7, sp, #0
80007402:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
80007404:	687b      	ldr	r3, [r7, #4]
80007406:	681b      	ldr	r3, [r3, #0]
80007408:	4a0d      	ldr	r2, [pc, #52]	; (80007440 <HAL_PCD_MspInit+0x44>)
8000740a:	4293      	cmp	r3, r2
8000740c:	d113      	bne.n	80007436 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
8000740e:	4b0d      	ldr	r3, [pc, #52]	; (80007444 <HAL_PCD_MspInit+0x48>)
80007410:	69db      	ldr	r3, [r3, #28]
80007412:	4a0c      	ldr	r2, [pc, #48]	; (80007444 <HAL_PCD_MspInit+0x48>)
80007414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
80007418:	61d3      	str	r3, [r2, #28]
8000741a:	4b0a      	ldr	r3, [pc, #40]	; (80007444 <HAL_PCD_MspInit+0x48>)
8000741c:	69db      	ldr	r3, [r3, #28]
8000741e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
80007422:	60fb      	str	r3, [r7, #12]
80007424:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
80007426:	2200      	movs	r2, #0
80007428:	2100      	movs	r1, #0
8000742a:	2014      	movs	r0, #20
8000742c:	f7fb f831 	bl	80002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
80007430:	2014      	movs	r0, #20
80007432:	f7fb f84a 	bl	800024ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
80007436:	bf00      	nop
80007438:	3710      	adds	r7, #16
8000743a:	46bd      	mov	sp, r7
8000743c:	bd80      	pop	{r7, pc}
8000743e:	bf00      	nop
80007440:	40005c00 	.word	0x40005c00
80007444:	40021000 	.word	0x40021000

80007448 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
80007448:	b580      	push	{r7, lr}
8000744a:	b082      	sub	sp, #8
8000744c:	af00      	add	r7, sp, #0
8000744e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
80007450:	687b      	ldr	r3, [r7, #4]
80007452:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
80007456:	687b      	ldr	r3, [r7, #4]
80007458:	f503 730c 	add.w	r3, r3, #560	; 0x230
8000745c:	4619      	mov	r1, r3
8000745e:	4610      	mov	r0, r2
80007460:	f7fe fd97 	bl	80005f92 <USBD_LL_SetupStage>
}
80007464:	bf00      	nop
80007466:	3708      	adds	r7, #8
80007468:	46bd      	mov	sp, r7
8000746a:	bd80      	pop	{r7, pc}

8000746c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
8000746c:	b580      	push	{r7, lr}
8000746e:	b082      	sub	sp, #8
80007470:	af00      	add	r7, sp, #0
80007472:	6078      	str	r0, [r7, #4]
80007474:	460b      	mov	r3, r1
80007476:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
80007478:	687b      	ldr	r3, [r7, #4]
8000747a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
8000747e:	78fb      	ldrb	r3, [r7, #3]
80007480:	687a      	ldr	r2, [r7, #4]
80007482:	015b      	lsls	r3, r3, #5
80007484:	4413      	add	r3, r2
80007486:	f503 739e 	add.w	r3, r3, #316	; 0x13c
8000748a:	681a      	ldr	r2, [r3, #0]
8000748c:	78fb      	ldrb	r3, [r7, #3]
8000748e:	4619      	mov	r1, r3
80007490:	f7fe fdca 	bl	80006028 <USBD_LL_DataOutStage>
}
80007494:	bf00      	nop
80007496:	3708      	adds	r7, #8
80007498:	46bd      	mov	sp, r7
8000749a:	bd80      	pop	{r7, pc}

8000749c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
8000749c:	b580      	push	{r7, lr}
8000749e:	b082      	sub	sp, #8
800074a0:	af00      	add	r7, sp, #0
800074a2:	6078      	str	r0, [r7, #4]
800074a4:	460b      	mov	r3, r1
800074a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
800074a8:	687b      	ldr	r3, [r7, #4]
800074aa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
800074ae:	78fb      	ldrb	r3, [r7, #3]
800074b0:	687a      	ldr	r2, [r7, #4]
800074b2:	015b      	lsls	r3, r3, #5
800074b4:	4413      	add	r3, r2
800074b6:	333c      	adds	r3, #60	; 0x3c
800074b8:	681a      	ldr	r2, [r3, #0]
800074ba:	78fb      	ldrb	r3, [r7, #3]
800074bc:	4619      	mov	r1, r3
800074be:	f7fe fe24 	bl	8000610a <USBD_LL_DataInStage>
}
800074c2:	bf00      	nop
800074c4:	3708      	adds	r7, #8
800074c6:	46bd      	mov	sp, r7
800074c8:	bd80      	pop	{r7, pc}

800074ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
800074ca:	b580      	push	{r7, lr}
800074cc:	b082      	sub	sp, #8
800074ce:	af00      	add	r7, sp, #0
800074d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
800074d2:	687b      	ldr	r3, [r7, #4]
800074d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
800074d8:	4618      	mov	r0, r3
800074da:	f7fe ff34 	bl	80006346 <USBD_LL_SOF>
}
800074de:	bf00      	nop
800074e0:	3708      	adds	r7, #8
800074e2:	46bd      	mov	sp, r7
800074e4:	bd80      	pop	{r7, pc}

800074e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
800074e6:	b580      	push	{r7, lr}
800074e8:	b084      	sub	sp, #16
800074ea:	af00      	add	r7, sp, #0
800074ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
800074ee:	2301      	movs	r3, #1
800074f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
800074f2:	687b      	ldr	r3, [r7, #4]
800074f4:	689b      	ldr	r3, [r3, #8]
800074f6:	2b02      	cmp	r3, #2
800074f8:	d001      	beq.n	800074fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
800074fa:	f7fa fd25 	bl	80001f48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
800074fe:	687b      	ldr	r3, [r7, #4]
80007500:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
80007504:	7bfa      	ldrb	r2, [r7, #15]
80007506:	4611      	mov	r1, r2
80007508:	4618      	mov	r0, r3
8000750a:	f7fe fee4 	bl	800062d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
8000750e:	687b      	ldr	r3, [r7, #4]
80007510:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
80007514:	4618      	mov	r0, r3
80007516:	f7fe fe9d 	bl	80006254 <USBD_LL_Reset>
}
8000751a:	bf00      	nop
8000751c:	3710      	adds	r7, #16
8000751e:	46bd      	mov	sp, r7
80007520:	bd80      	pop	{r7, pc}
	...

80007524 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
80007524:	b580      	push	{r7, lr}
80007526:	b082      	sub	sp, #8
80007528:	af00      	add	r7, sp, #0
8000752a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
8000752c:	687b      	ldr	r3, [r7, #4]
8000752e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
80007532:	4618      	mov	r0, r3
80007534:	f7fe fede 	bl	800062f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
80007538:	687b      	ldr	r3, [r7, #4]
8000753a:	699b      	ldr	r3, [r3, #24]
8000753c:	2b00      	cmp	r3, #0
8000753e:	d005      	beq.n	8000754c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
80007540:	4b04      	ldr	r3, [pc, #16]	; (80007554 <HAL_PCD_SuspendCallback+0x30>)
80007542:	691b      	ldr	r3, [r3, #16]
80007544:	4a03      	ldr	r2, [pc, #12]	; (80007554 <HAL_PCD_SuspendCallback+0x30>)
80007546:	f043 0306 	orr.w	r3, r3, #6
8000754a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
8000754c:	bf00      	nop
8000754e:	3708      	adds	r7, #8
80007550:	46bd      	mov	sp, r7
80007552:	bd80      	pop	{r7, pc}
80007554:	e000ed00 	.word	0xe000ed00

80007558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
80007558:	b580      	push	{r7, lr}
8000755a:	b082      	sub	sp, #8
8000755c:	af00      	add	r7, sp, #0
8000755e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
80007560:	687b      	ldr	r3, [r7, #4]
80007562:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
80007566:	4618      	mov	r0, r3
80007568:	f7fe fed8 	bl	8000631c <USBD_LL_Resume>
}
8000756c:	bf00      	nop
8000756e:	3708      	adds	r7, #8
80007570:	46bd      	mov	sp, r7
80007572:	bd80      	pop	{r7, pc}

80007574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
80007574:	b580      	push	{r7, lr}
80007576:	b082      	sub	sp, #8
80007578:	af00      	add	r7, sp, #0
8000757a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
8000757c:	4a28      	ldr	r2, [pc, #160]	; (80007620 <USBD_LL_Init+0xac>)
8000757e:	687b      	ldr	r3, [r7, #4]
80007580:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
80007584:	687b      	ldr	r3, [r7, #4]
80007586:	4a26      	ldr	r2, [pc, #152]	; (80007620 <USBD_LL_Init+0xac>)
80007588:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
8000758c:	4b24      	ldr	r3, [pc, #144]	; (80007620 <USBD_LL_Init+0xac>)
8000758e:	4a25      	ldr	r2, [pc, #148]	; (80007624 <USBD_LL_Init+0xb0>)
80007590:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
80007592:	4b23      	ldr	r3, [pc, #140]	; (80007620 <USBD_LL_Init+0xac>)
80007594:	2208      	movs	r2, #8
80007596:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
80007598:	4b21      	ldr	r3, [pc, #132]	; (80007620 <USBD_LL_Init+0xac>)
8000759a:	2202      	movs	r2, #2
8000759c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
8000759e:	4b20      	ldr	r3, [pc, #128]	; (80007620 <USBD_LL_Init+0xac>)
800075a0:	2200      	movs	r2, #0
800075a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
800075a4:	4b1e      	ldr	r3, [pc, #120]	; (80007620 <USBD_LL_Init+0xac>)
800075a6:	2200      	movs	r2, #0
800075a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
800075aa:	4b1d      	ldr	r3, [pc, #116]	; (80007620 <USBD_LL_Init+0xac>)
800075ac:	2200      	movs	r2, #0
800075ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
800075b0:	481b      	ldr	r0, [pc, #108]	; (80007620 <USBD_LL_Init+0xac>)
800075b2:	f7fb f92f 	bl	80002814 <HAL_PCD_Init>
800075b6:	4603      	mov	r3, r0
800075b8:	2b00      	cmp	r3, #0
800075ba:	d001      	beq.n	800075c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
800075bc:	f7fa fcc4 	bl	80001f48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
800075c0:	687b      	ldr	r3, [r7, #4]
800075c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
800075c6:	2318      	movs	r3, #24
800075c8:	2200      	movs	r2, #0
800075ca:	2100      	movs	r1, #0
800075cc:	f7fb ffc8 	bl	80003560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
800075d0:	687b      	ldr	r3, [r7, #4]
800075d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
800075d6:	2358      	movs	r3, #88	; 0x58
800075d8:	2200      	movs	r2, #0
800075da:	2180      	movs	r1, #128	; 0x80
800075dc:	f7fb ffc0 	bl	80003560 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
800075e0:	687b      	ldr	r3, [r7, #4]
800075e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
800075e6:	23c0      	movs	r3, #192	; 0xc0
800075e8:	2200      	movs	r2, #0
800075ea:	2181      	movs	r1, #129	; 0x81
800075ec:	f7fb ffb8 	bl	80003560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
800075f0:	687b      	ldr	r3, [r7, #4]
800075f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
800075f6:	f44f 7388 	mov.w	r3, #272	; 0x110
800075fa:	2200      	movs	r2, #0
800075fc:	2101      	movs	r1, #1
800075fe:	f7fb ffaf 	bl	80003560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
80007602:	687b      	ldr	r3, [r7, #4]
80007604:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
80007608:	f44f 7380 	mov.w	r3, #256	; 0x100
8000760c:	2200      	movs	r2, #0
8000760e:	2182      	movs	r1, #130	; 0x82
80007610:	f7fb ffa6 	bl	80003560 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
80007614:	2300      	movs	r3, #0
}
80007616:	4618      	mov	r0, r3
80007618:	3708      	adds	r7, #8
8000761a:	46bd      	mov	sp, r7
8000761c:	bd80      	pop	{r7, pc}
8000761e:	bf00      	nop
80007620:	200011c0 	.word	0x200011c0
80007624:	40005c00 	.word	0x40005c00

80007628 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
80007628:	b580      	push	{r7, lr}
8000762a:	b084      	sub	sp, #16
8000762c:	af00      	add	r7, sp, #0
8000762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
80007630:	2300      	movs	r3, #0
80007632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
80007634:	2300      	movs	r3, #0
80007636:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
80007638:	687b      	ldr	r3, [r7, #4]
8000763a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
8000763e:	4618      	mov	r0, r3
80007640:	f7fb f9c9 	bl	800029d6 <HAL_PCD_Start>
80007644:	4603      	mov	r3, r0
80007646:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
80007648:	7bfb      	ldrb	r3, [r7, #15]
8000764a:	4618      	mov	r0, r3
8000764c:	f000 f948 	bl	800078e0 <USBD_Get_USB_Status>
80007650:	4603      	mov	r3, r0
80007652:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
80007654:	7bbb      	ldrb	r3, [r7, #14]
}
80007656:	4618      	mov	r0, r3
80007658:	3710      	adds	r7, #16
8000765a:	46bd      	mov	sp, r7
8000765c:	bd80      	pop	{r7, pc}

8000765e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
8000765e:	b580      	push	{r7, lr}
80007660:	b084      	sub	sp, #16
80007662:	af00      	add	r7, sp, #0
80007664:	6078      	str	r0, [r7, #4]
80007666:	4608      	mov	r0, r1
80007668:	4611      	mov	r1, r2
8000766a:	461a      	mov	r2, r3
8000766c:	4603      	mov	r3, r0
8000766e:	70fb      	strb	r3, [r7, #3]
80007670:	460b      	mov	r3, r1
80007672:	70bb      	strb	r3, [r7, #2]
80007674:	4613      	mov	r3, r2
80007676:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
80007678:	2300      	movs	r3, #0
8000767a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
8000767c:	2300      	movs	r3, #0
8000767e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
80007680:	687b      	ldr	r3, [r7, #4]
80007682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
80007686:	78bb      	ldrb	r3, [r7, #2]
80007688:	883a      	ldrh	r2, [r7, #0]
8000768a:	78f9      	ldrb	r1, [r7, #3]
8000768c:	f7fb fafc 	bl	80002c88 <HAL_PCD_EP_Open>
80007690:	4603      	mov	r3, r0
80007692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
80007694:	7bfb      	ldrb	r3, [r7, #15]
80007696:	4618      	mov	r0, r3
80007698:	f000 f922 	bl	800078e0 <USBD_Get_USB_Status>
8000769c:	4603      	mov	r3, r0
8000769e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
800076a0:	7bbb      	ldrb	r3, [r7, #14]
}
800076a2:	4618      	mov	r0, r3
800076a4:	3710      	adds	r7, #16
800076a6:	46bd      	mov	sp, r7
800076a8:	bd80      	pop	{r7, pc}

800076aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
800076aa:	b580      	push	{r7, lr}
800076ac:	b084      	sub	sp, #16
800076ae:	af00      	add	r7, sp, #0
800076b0:	6078      	str	r0, [r7, #4]
800076b2:	460b      	mov	r3, r1
800076b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
800076b6:	2300      	movs	r3, #0
800076b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
800076ba:	2300      	movs	r3, #0
800076bc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
800076be:	687b      	ldr	r3, [r7, #4]
800076c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
800076c4:	78fa      	ldrb	r2, [r7, #3]
800076c6:	4611      	mov	r1, r2
800076c8:	4618      	mov	r0, r3
800076ca:	f7fb fb3d 	bl	80002d48 <HAL_PCD_EP_Close>
800076ce:	4603      	mov	r3, r0
800076d0:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
800076d2:	7bfb      	ldrb	r3, [r7, #15]
800076d4:	4618      	mov	r0, r3
800076d6:	f000 f903 	bl	800078e0 <USBD_Get_USB_Status>
800076da:	4603      	mov	r3, r0
800076dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
800076de:	7bbb      	ldrb	r3, [r7, #14]
}
800076e0:	4618      	mov	r0, r3
800076e2:	3710      	adds	r7, #16
800076e4:	46bd      	mov	sp, r7
800076e6:	bd80      	pop	{r7, pc}

800076e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
800076e8:	b580      	push	{r7, lr}
800076ea:	b084      	sub	sp, #16
800076ec:	af00      	add	r7, sp, #0
800076ee:	6078      	str	r0, [r7, #4]
800076f0:	460b      	mov	r3, r1
800076f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
800076f4:	2300      	movs	r3, #0
800076f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
800076f8:	2300      	movs	r3, #0
800076fa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
800076fc:	687b      	ldr	r3, [r7, #4]
800076fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
80007702:	78fa      	ldrb	r2, [r7, #3]
80007704:	4611      	mov	r1, r2
80007706:	4618      	mov	r0, r3
80007708:	f7fb fbe7 	bl	80002eda <HAL_PCD_EP_SetStall>
8000770c:	4603      	mov	r3, r0
8000770e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
80007710:	7bfb      	ldrb	r3, [r7, #15]
80007712:	4618      	mov	r0, r3
80007714:	f000 f8e4 	bl	800078e0 <USBD_Get_USB_Status>
80007718:	4603      	mov	r3, r0
8000771a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
8000771c:	7bbb      	ldrb	r3, [r7, #14]
}
8000771e:	4618      	mov	r0, r3
80007720:	3710      	adds	r7, #16
80007722:	46bd      	mov	sp, r7
80007724:	bd80      	pop	{r7, pc}

80007726 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
80007726:	b580      	push	{r7, lr}
80007728:	b084      	sub	sp, #16
8000772a:	af00      	add	r7, sp, #0
8000772c:	6078      	str	r0, [r7, #4]
8000772e:	460b      	mov	r3, r1
80007730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
80007732:	2300      	movs	r3, #0
80007734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
80007736:	2300      	movs	r3, #0
80007738:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
8000773a:	687b      	ldr	r3, [r7, #4]
8000773c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
80007740:	78fa      	ldrb	r2, [r7, #3]
80007742:	4611      	mov	r1, r2
80007744:	4618      	mov	r0, r3
80007746:	f7fb fc22 	bl	80002f8e <HAL_PCD_EP_ClrStall>
8000774a:	4603      	mov	r3, r0
8000774c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
8000774e:	7bfb      	ldrb	r3, [r7, #15]
80007750:	4618      	mov	r0, r3
80007752:	f000 f8c5 	bl	800078e0 <USBD_Get_USB_Status>
80007756:	4603      	mov	r3, r0
80007758:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
8000775a:	7bbb      	ldrb	r3, [r7, #14]
}
8000775c:	4618      	mov	r0, r3
8000775e:	3710      	adds	r7, #16
80007760:	46bd      	mov	sp, r7
80007762:	bd80      	pop	{r7, pc}

80007764 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
80007764:	b480      	push	{r7}
80007766:	b085      	sub	sp, #20
80007768:	af00      	add	r7, sp, #0
8000776a:	6078      	str	r0, [r7, #4]
8000776c:	460b      	mov	r3, r1
8000776e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
80007770:	687b      	ldr	r3, [r7, #4]
80007772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
80007776:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
80007778:	f997 3003 	ldrsb.w	r3, [r7, #3]
8000777c:	2b00      	cmp	r3, #0
8000777e:	da08      	bge.n	80007792 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
80007780:	78fb      	ldrb	r3, [r7, #3]
80007782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
80007786:	68fa      	ldr	r2, [r7, #12]
80007788:	015b      	lsls	r3, r3, #5
8000778a:	4413      	add	r3, r2
8000778c:	332a      	adds	r3, #42	; 0x2a
8000778e:	781b      	ldrb	r3, [r3, #0]
80007790:	e008      	b.n	800077a4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
80007792:	78fb      	ldrb	r3, [r7, #3]
80007794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
80007798:	68fa      	ldr	r2, [r7, #12]
8000779a:	015b      	lsls	r3, r3, #5
8000779c:	4413      	add	r3, r2
8000779e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
800077a2:	781b      	ldrb	r3, [r3, #0]
  }
}
800077a4:	4618      	mov	r0, r3
800077a6:	3714      	adds	r7, #20
800077a8:	46bd      	mov	sp, r7
800077aa:	bc80      	pop	{r7}
800077ac:	4770      	bx	lr

800077ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
800077ae:	b580      	push	{r7, lr}
800077b0:	b084      	sub	sp, #16
800077b2:	af00      	add	r7, sp, #0
800077b4:	6078      	str	r0, [r7, #4]
800077b6:	460b      	mov	r3, r1
800077b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
800077ba:	2300      	movs	r3, #0
800077bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
800077be:	2300      	movs	r3, #0
800077c0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
800077c2:	687b      	ldr	r3, [r7, #4]
800077c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
800077c8:	78fa      	ldrb	r2, [r7, #3]
800077ca:	4611      	mov	r1, r2
800077cc:	4618      	mov	r0, r3
800077ce:	f7fb fa36 	bl	80002c3e <HAL_PCD_SetAddress>
800077d2:	4603      	mov	r3, r0
800077d4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
800077d6:	7bfb      	ldrb	r3, [r7, #15]
800077d8:	4618      	mov	r0, r3
800077da:	f000 f881 	bl	800078e0 <USBD_Get_USB_Status>
800077de:	4603      	mov	r3, r0
800077e0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
800077e2:	7bbb      	ldrb	r3, [r7, #14]
}
800077e4:	4618      	mov	r0, r3
800077e6:	3710      	adds	r7, #16
800077e8:	46bd      	mov	sp, r7
800077ea:	bd80      	pop	{r7, pc}

800077ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
800077ec:	b580      	push	{r7, lr}
800077ee:	b086      	sub	sp, #24
800077f0:	af00      	add	r7, sp, #0
800077f2:	60f8      	str	r0, [r7, #12]
800077f4:	607a      	str	r2, [r7, #4]
800077f6:	461a      	mov	r2, r3
800077f8:	460b      	mov	r3, r1
800077fa:	72fb      	strb	r3, [r7, #11]
800077fc:	4613      	mov	r3, r2
800077fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
80007800:	2300      	movs	r3, #0
80007802:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
80007804:	2300      	movs	r3, #0
80007806:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
80007808:	68fb      	ldr	r3, [r7, #12]
8000780a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
8000780e:	893b      	ldrh	r3, [r7, #8]
80007810:	7af9      	ldrb	r1, [r7, #11]
80007812:	687a      	ldr	r2, [r7, #4]
80007814:	f7fb fb28 	bl	80002e68 <HAL_PCD_EP_Transmit>
80007818:	4603      	mov	r3, r0
8000781a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
8000781c:	7dfb      	ldrb	r3, [r7, #23]
8000781e:	4618      	mov	r0, r3
80007820:	f000 f85e 	bl	800078e0 <USBD_Get_USB_Status>
80007824:	4603      	mov	r3, r0
80007826:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
80007828:	7dbb      	ldrb	r3, [r7, #22]
}
8000782a:	4618      	mov	r0, r3
8000782c:	3718      	adds	r7, #24
8000782e:	46bd      	mov	sp, r7
80007830:	bd80      	pop	{r7, pc}

80007832 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
80007832:	b580      	push	{r7, lr}
80007834:	b086      	sub	sp, #24
80007836:	af00      	add	r7, sp, #0
80007838:	60f8      	str	r0, [r7, #12]
8000783a:	607a      	str	r2, [r7, #4]
8000783c:	461a      	mov	r2, r3
8000783e:	460b      	mov	r3, r1
80007840:	72fb      	strb	r3, [r7, #11]
80007842:	4613      	mov	r3, r2
80007844:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
80007846:	2300      	movs	r3, #0
80007848:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
8000784a:	2300      	movs	r3, #0
8000784c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
8000784e:	68fb      	ldr	r3, [r7, #12]
80007850:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
80007854:	893b      	ldrh	r3, [r7, #8]
80007856:	7af9      	ldrb	r1, [r7, #11]
80007858:	687a      	ldr	r2, [r7, #4]
8000785a:	f7fb fab7 	bl	80002dcc <HAL_PCD_EP_Receive>
8000785e:	4603      	mov	r3, r0
80007860:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
80007862:	7dfb      	ldrb	r3, [r7, #23]
80007864:	4618      	mov	r0, r3
80007866:	f000 f83b 	bl	800078e0 <USBD_Get_USB_Status>
8000786a:	4603      	mov	r3, r0
8000786c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
8000786e:	7dbb      	ldrb	r3, [r7, #22]
}
80007870:	4618      	mov	r0, r3
80007872:	3718      	adds	r7, #24
80007874:	46bd      	mov	sp, r7
80007876:	bd80      	pop	{r7, pc}

80007878 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
80007878:	b580      	push	{r7, lr}
8000787a:	b082      	sub	sp, #8
8000787c:	af00      	add	r7, sp, #0
8000787e:	6078      	str	r0, [r7, #4]
80007880:	460b      	mov	r3, r1
80007882:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
80007884:	687b      	ldr	r3, [r7, #4]
80007886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
8000788a:	78fa      	ldrb	r2, [r7, #3]
8000788c:	4611      	mov	r1, r2
8000788e:	4618      	mov	r0, r3
80007890:	f7fb fad6 	bl	80002e40 <HAL_PCD_EP_GetRxCount>
80007894:	4603      	mov	r3, r0
}
80007896:	4618      	mov	r0, r3
80007898:	3708      	adds	r7, #8
8000789a:	46bd      	mov	sp, r7
8000789c:	bd80      	pop	{r7, pc}
	...

800078a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
800078a0:	b480      	push	{r7}
800078a2:	b083      	sub	sp, #12
800078a4:	af00      	add	r7, sp, #0
800078a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
800078a8:	4b02      	ldr	r3, [pc, #8]	; (800078b4 <USBD_static_malloc+0x14>)
}
800078aa:	4618      	mov	r0, r3
800078ac:	370c      	adds	r7, #12
800078ae:	46bd      	mov	sp, r7
800078b0:	bc80      	pop	{r7}
800078b2:	4770      	bx	lr
800078b4:	200001a0 	.word	0x200001a0

800078b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
800078b8:	b480      	push	{r7}
800078ba:	b083      	sub	sp, #12
800078bc:	af00      	add	r7, sp, #0
800078be:	6078      	str	r0, [r7, #4]

}
800078c0:	bf00      	nop
800078c2:	370c      	adds	r7, #12
800078c4:	46bd      	mov	sp, r7
800078c6:	bc80      	pop	{r7}
800078c8:	4770      	bx	lr

800078ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
800078ca:	b480      	push	{r7}
800078cc:	b083      	sub	sp, #12
800078ce:	af00      	add	r7, sp, #0
800078d0:	6078      	str	r0, [r7, #4]
800078d2:	460b      	mov	r3, r1
800078d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
800078d6:	bf00      	nop
800078d8:	370c      	adds	r7, #12
800078da:	46bd      	mov	sp, r7
800078dc:	bc80      	pop	{r7}
800078de:	4770      	bx	lr

800078e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
800078e0:	b480      	push	{r7}
800078e2:	b085      	sub	sp, #20
800078e4:	af00      	add	r7, sp, #0
800078e6:	4603      	mov	r3, r0
800078e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
800078ea:	2300      	movs	r3, #0
800078ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
800078ee:	79fb      	ldrb	r3, [r7, #7]
800078f0:	2b03      	cmp	r3, #3
800078f2:	d817      	bhi.n	80007924 <USBD_Get_USB_Status+0x44>
800078f4:	a201      	add	r2, pc, #4	; (adr r2, 800078fc <USBD_Get_USB_Status+0x1c>)
800078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
800078fa:	bf00      	nop
800078fc:	8000790d 	.word	0x8000790d
80007900:	80007913 	.word	0x80007913
80007904:	80007919 	.word	0x80007919
80007908:	8000791f 	.word	0x8000791f
  {
    case HAL_OK :
      usb_status = USBD_OK;
8000790c:	2300      	movs	r3, #0
8000790e:	73fb      	strb	r3, [r7, #15]
    break;
80007910:	e00b      	b.n	8000792a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
80007912:	2302      	movs	r3, #2
80007914:	73fb      	strb	r3, [r7, #15]
    break;
80007916:	e008      	b.n	8000792a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
80007918:	2301      	movs	r3, #1
8000791a:	73fb      	strb	r3, [r7, #15]
    break;
8000791c:	e005      	b.n	8000792a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
8000791e:	2302      	movs	r3, #2
80007920:	73fb      	strb	r3, [r7, #15]
    break;
80007922:	e002      	b.n	8000792a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
80007924:	2302      	movs	r3, #2
80007926:	73fb      	strb	r3, [r7, #15]
    break;
80007928:	bf00      	nop
  }
  return usb_status;
8000792a:	7bfb      	ldrb	r3, [r7, #15]
}
8000792c:	4618      	mov	r0, r3
8000792e:	3714      	adds	r7, #20
80007930:	46bd      	mov	sp, r7
80007932:	bc80      	pop	{r7}
80007934:	4770      	bx	lr
80007936:	bf00      	nop

80007938 <__libc_init_array>:
80007938:	b570      	push	{r4, r5, r6, lr}
8000793a:	2500      	movs	r5, #0
8000793c:	4e0c      	ldr	r6, [pc, #48]	; (80007970 <__libc_init_array+0x38>)
8000793e:	4c0d      	ldr	r4, [pc, #52]	; (80007974 <__libc_init_array+0x3c>)
80007940:	1ba4      	subs	r4, r4, r6
80007942:	10a4      	asrs	r4, r4, #2
80007944:	42a5      	cmp	r5, r4
80007946:	d109      	bne.n	8000795c <__libc_init_array+0x24>
80007948:	f000 f822 	bl	80007990 <_init>
8000794c:	2500      	movs	r5, #0
8000794e:	4e0a      	ldr	r6, [pc, #40]	; (80007978 <__libc_init_array+0x40>)
80007950:	4c0a      	ldr	r4, [pc, #40]	; (8000797c <__libc_init_array+0x44>)
80007952:	1ba4      	subs	r4, r4, r6
80007954:	10a4      	asrs	r4, r4, #2
80007956:	42a5      	cmp	r5, r4
80007958:	d105      	bne.n	80007966 <__libc_init_array+0x2e>
8000795a:	bd70      	pop	{r4, r5, r6, pc}
8000795c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
80007960:	4798      	blx	r3
80007962:	3501      	adds	r5, #1
80007964:	e7ee      	b.n	80007944 <__libc_init_array+0xc>
80007966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
8000796a:	4798      	blx	r3
8000796c:	3501      	adds	r5, #1
8000796e:	e7f2      	b.n	80007956 <__libc_init_array+0x1e>
80007970:	80007b18 	.word	0x80007b18
80007974:	80007b18 	.word	0x80007b18
80007978:	80007b18 	.word	0x80007b18
8000797c:	80007b1c 	.word	0x80007b1c

80007980 <memset>:
80007980:	4603      	mov	r3, r0
80007982:	4402      	add	r2, r0
80007984:	4293      	cmp	r3, r2
80007986:	d100      	bne.n	8000798a <memset+0xa>
80007988:	4770      	bx	lr
8000798a:	f803 1b01 	strb.w	r1, [r3], #1
8000798e:	e7f9      	b.n	80007984 <memset+0x4>

80007990 <_init>:
80007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
80007992:	bf00      	nop
80007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
80007996:	bc08      	pop	{r3}
80007998:	469e      	mov	lr, r3
8000799a:	4770      	bx	lr

8000799c <_fini>:
8000799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
8000799e:	bf00      	nop
800079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
800079a2:	bc08      	pop	{r3}
800079a4:	469e      	mov	lr, r3
800079a6:	4770      	bx	lr
