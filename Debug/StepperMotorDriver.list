
StepperMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006afc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cfc  08006cfc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08006cfc  08006cfc  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cfc  08006cfc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cfc  08006cfc  00016cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  2000017c  08006e80  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001404  08006e80  00021404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001788e  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000309a  00000000  00000000  00037a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  0003aad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  0003bad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ebc  00000000  00000000  0003c968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1dc  00000000  00000000  00053824  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074a46  00000000  00000000  00061a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6446  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004280  00000000  00000000  000d64c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000017c 	.word	0x2000017c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006bf4 	.word	0x08006bf4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000180 	.word	0x20000180
 800014c:	08006bf4 	.word	0x08006bf4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <microsecondDelay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void microsecondDelay()
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	e002      	b.n	800098e <microsecondDelay+0x12>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3301      	adds	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b01      	cmp	r3, #1
 8000992:	ddf9      	ble.n	8000988 <microsecondDelay+0xc>
	{}
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
	...

080009a0 <setDirectionS0>:

void setDirectionS0(int direction)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d105      	bne.n	80009ba <setDirectionS0+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2102      	movs	r1, #2
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <setDirectionS0+0x2c>)
 80009b4:	f001 f8c8 	bl	8001b48 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
	}
}
 80009b8:	e004      	b.n	80009c4 <setDirectionS0+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2102      	movs	r1, #2
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <setDirectionS0+0x2c>)
 80009c0:	f001 f8c2 	bl	8001b48 <HAL_GPIO_WritePin>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40010800 	.word	0x40010800

080009d0 <setDirectionS1>:

void setDirectionS1(int direction)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d105      	bne.n	80009ea <setDirectionS1+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2108      	movs	r1, #8
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <setDirectionS1+0x2c>)
 80009e4:	f001 f8b0 	bl	8001b48 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
	}
}
 80009e8:	e004      	b.n	80009f4 <setDirectionS1+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <setDirectionS1+0x2c>)
 80009f0:	f001 f8aa 	bl	8001b48 <HAL_GPIO_WritePin>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40010800 	.word	0x40010800

08000a00 <setDirectionS2>:

void setDirectionS2(int direction)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	if (direction == ANTICLOCKWISE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d105      	bne.n	8000a1a <setDirectionS2+0x1a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2120      	movs	r1, #32
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <setDirectionS2+0x2c>)
 8000a14:	f001 f898 	bl	8001b48 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
	}
}
 8000a18:	e004      	b.n	8000a24 <setDirectionS2+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <setDirectionS2+0x2c>)
 8000a20:	f001 f892 	bl	8001b48 <HAL_GPIO_WritePin>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40010800 	.word	0x40010800

08000a30 <sendPulseS0>:

void sendPulseS0()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000a34:	2101      	movs	r1, #1
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <sendPulseS0+0x1c>)
 8000a38:	f001 f89e 	bl	8001b78 <HAL_GPIO_TogglePin>
	 microsecondDelay();
 8000a3c:	f7ff ff9e 	bl	800097c <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000a40:	2101      	movs	r1, #1
 8000a42:	4802      	ldr	r0, [pc, #8]	; (8000a4c <sendPulseS0+0x1c>)
 8000a44:	f001 f898 	bl	8001b78 <HAL_GPIO_TogglePin>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40010800 	.word	0x40010800

08000a50 <sendPulseS1>:

void sendPulseS1()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000a54:	2104      	movs	r1, #4
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <sendPulseS1+0x1c>)
 8000a58:	f001 f88e 	bl	8001b78 <HAL_GPIO_TogglePin>
	 microsecondDelay();
 8000a5c:	f7ff ff8e 	bl	800097c <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000a60:	2104      	movs	r1, #4
 8000a62:	4802      	ldr	r0, [pc, #8]	; (8000a6c <sendPulseS1+0x1c>)
 8000a64:	f001 f888 	bl	8001b78 <HAL_GPIO_TogglePin>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40010800 	.word	0x40010800

08000a70 <sendPulseS2>:

void sendPulseS2()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000a74:	2110      	movs	r1, #16
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <sendPulseS2+0x1c>)
 8000a78:	f001 f87e 	bl	8001b78 <HAL_GPIO_TogglePin>
	 microsecondDelay();
 8000a7c:	f7ff ff7e 	bl	800097c <microsecondDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000a80:	2110      	movs	r1, #16
 8000a82:	4802      	ldr	r0, [pc, #8]	; (8000a8c <sendPulseS2+0x1c>)
 8000a84:	f001 f878 	bl	8001b78 <HAL_GPIO_TogglePin>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010800 	.word	0x40010800

08000a90 <motionComplete>:


void motionComplete(StepperMotor* motor)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	motor->currentCount = 0;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	821a      	strh	r2, [r3, #16]
	motor->targetCount = 0;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	825a      	strh	r2, [r3, #18]
	motor->rampingUp = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	751a      	strb	r2, [r3, #20]
	motor->rampingDown = 0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	755a      	strb	r2, [r3, #21]
	motor->rampUpCount = 0;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	759a      	strb	r2, [r3, #22]
	motor->rampDownCount = 0;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	75da      	strb	r2, [r3, #23]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <programInit>:

void programInit()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	//Timer Initializations
	motor[0].timerHandle = &htim2;
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <programInit+0xa0>)
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <programInit+0xa4>)
 8000ad2:	61da      	str	r2, [r3, #28]
	motor[1].timerHandle = &htim3;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <programInit+0xa0>)
 8000ad6:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <programInit+0xa8>)
 8000ad8:	649a      	str	r2, [r3, #72]	; 0x48
	motor[2].timerHandle = &htim4;
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <programInit+0xa0>)
 8000adc:	4a25      	ldr	r2, [pc, #148]	; (8000b74 <programInit+0xac>)
 8000ade:	675a      	str	r2, [r3, #116]	; 0x74

	//Direction-set function pointers
	motor[0].setDirection = setDirectionS0;
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <programInit+0xa0>)
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <programInit+0xb0>)
 8000ae4:	605a      	str	r2, [r3, #4]
	motor[1].setDirection = setDirectionS1;
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <programInit+0xa0>)
 8000ae8:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <programInit+0xb4>)
 8000aea:	631a      	str	r2, [r3, #48]	; 0x30
	motor[2].setDirection = setDirectionS2;
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <programInit+0xa0>)
 8000aee:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <programInit+0xb8>)
 8000af0:	65da      	str	r2, [r3, #92]	; 0x5c

	//Set pulse pointers
	motor[0].sendPulse = sendPulseS0;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <programInit+0xa0>)
 8000af4:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <programInit+0xbc>)
 8000af6:	601a      	str	r2, [r3, #0]
	motor[1].sendPulse = sendPulseS1;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <programInit+0xa0>)
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <programInit+0xc0>)
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
	motor[2].sendPulse = sendPulseS2;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <programInit+0xa0>)
 8000b00:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <programInit+0xc4>)
 8000b02:	659a      	str	r2, [r3, #88]	; 0x58

	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	e027      	b.n	8000b5a <programInit+0x92>
	{
		motionComplete(&motor[i]);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	222c      	movs	r2, #44	; 0x2c
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <programInit+0xa0>)
 8000b14:	4413      	add	r3, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffba 	bl	8000a90 <motionComplete>
		motor[i].scaleFactor = 1;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <programInit+0xa0>)
 8000b20:	212c      	movs	r1, #44	; 0x2c
 8000b22:	fb01 f303 	mul.w	r3, r1, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	3320      	adds	r3, #32
 8000b2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b2e:	601a      	str	r2, [r3, #0]
		motor[i].newCommandAvailable = 0;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <programInit+0xa0>)
 8000b34:	212c      	movs	r1, #44	; 0x2c
 8000b36:	fb01 f303 	mul.w	r3, r1, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3328      	adds	r3, #40	; 0x28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
		motor[i].absolutePosition = -800;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <programInit+0xa0>)
 8000b46:	212c      	movs	r1, #44	; 0x2c
 8000b48:	fb01 f303 	mul.w	r3, r1, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	330c      	adds	r3, #12
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <programInit+0xc8>)
 8000b52:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_STEPPER_MOTORS; i++)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	3301      	adds	r3, #1
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d9d4      	bls.n	8000b0a <programInit+0x42>
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000047c 	.word	0x2000047c
 8000b6c:	2000043c 	.word	0x2000043c
 8000b70:	200003fc 	.word	0x200003fc
 8000b74:	200003bc 	.word	0x200003bc
 8000b78:	080009a1 	.word	0x080009a1
 8000b7c:	080009d1 	.word	0x080009d1
 8000b80:	08000a01 	.word	0x08000a01
 8000b84:	08000a31 	.word	0x08000a31
 8000b88:	08000a51 	.word	0x08000a51
 8000b8c:	08000a71 	.word	0x08000a71
 8000b90:	fffffce0 	.word	0xfffffce0

08000b94 <setNextInterruptInterval>:


void setNextInterruptInterval(StepperMotor* motor)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if (abs(motor->targetCount) > 2*NO_OF_RAMP_STEPS)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	8a5b      	ldrh	r3, [r3, #18]
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bfb8      	it	lt
 8000ba6:	425b      	neglt	r3, r3
 8000ba8:	2b40      	cmp	r3, #64	; 0x40
 8000baa:	dd51      	ble.n	8000c50 <setNextInterruptInterval+0xbc>
	{
		//Calculate next delay
		if (motor->currentCount < NO_OF_RAMP_STEPS)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	8a1b      	ldrh	r3, [r3, #16]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	dc18      	bgt.n	8000be8 <setNextInterruptInterval+0x54>
		{
			motor->rampUpCount = abs(motor->currentCount);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	8a1b      	ldrh	r3, [r3, #16]
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bfb8      	it	lt
 8000bc0:	425b      	neglt	r3, r3
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	759a      	strb	r2, [r3, #22]
			ramp(motor->rampUpCount, motor->timerHandle);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7d9b      	ldrb	r3, [r3, #22]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	f000 f8bb 	bl	8000d50 <ramp>
			motor->rampingUp = ACTIVATED;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	751a      	strb	r2, [r3, #20]
			motor->rampingDown = DEACTIVATED;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	755a      	strb	r2, [r3, #21]
			ramp(motor->rampDownCount, motor->timerHandle);
			motor->rampingDown = ACTIVATED;
			motor->rampingUp = DEACTIVATED;
		}
	}
}
 8000be6:	e0ad      	b.n	8000d44 <setNextInterruptInterval+0x1b0>
		else if (motor->targetCount - motor->currentCount < NO_OF_RAMP_STEPS)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	8a5b      	ldrh	r3, [r3, #18]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	8a1b      	ldrh	r3, [r3, #16]
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b1f      	cmp	r3, #31
 8000bfa:	dc1d      	bgt.n	8000c38 <setNextInterruptInterval+0xa4>
			motor->rampDownCount = abs(motor->targetCount - motor->currentCount);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	8a5b      	ldrh	r3, [r3, #18]
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	8a1b      	ldrh	r3, [r3, #16]
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bfb8      	it	lt
 8000c10:	425b      	neglt	r3, r3
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	75da      	strb	r2, [r3, #23]
			ramp(motor->rampDownCount, motor->timerHandle);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7ddb      	ldrb	r3, [r3, #23]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4610      	mov	r0, r2
 8000c26:	f000 f893 	bl	8000d50 <ramp>
			motor->rampingDown = ACTIVATED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	755a      	strb	r2, [r3, #21]
			motor->rampingUp = DEACTIVATED;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	751a      	strb	r2, [r3, #20]
}
 8000c36:	e085      	b.n	8000d44 <setNextInterruptInterval+0x1b0>
		else if (motor->targetCount == motor->currentCount)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	8a5b      	ldrh	r3, [r3, #18]
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	8a1b      	ldrh	r3, [r3, #16]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d17d      	bne.n	8000d44 <setNextInterruptInterval+0x1b0>
			motionComplete(motor);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff21 	bl	8000a90 <motionComplete>
}
 8000c4e:	e079      	b.n	8000d44 <setNextInterruptInterval+0x1b0>
		if (motor->currentCount < (int)(abs(motor->targetCount)/2.0))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	8a1b      	ldrh	r3, [r3, #16]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	461c      	mov	r4, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	8a5b      	ldrh	r3, [r3, #18]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bfb8      	it	lt
 8000c62:	425b      	neglt	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fbc5 	bl	80003f4 <__aeabi_i2d>
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c72:	f7ff fd53 	bl	800071c <__aeabi_ddiv>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f7ff fe35 	bl	80008ec <__aeabi_d2iz>
 8000c82:	4603      	mov	r3, r0
 8000c84:	429c      	cmp	r4, r3
 8000c86:	da18      	bge.n	8000cba <setNextInterruptInterval+0x126>
			motor->rampUpCount = abs((motor->currentCount));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	8a1b      	ldrh	r3, [r3, #16]
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	759a      	strb	r2, [r3, #22]
			ramp(motor->rampUpCount, motor->timerHandle);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7d9b      	ldrb	r3, [r3, #22]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	f000 f852 	bl	8000d50 <ramp>
			motor->rampingUp = ACTIVATED;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	751a      	strb	r2, [r3, #20]
			motor->rampingDown = DEACTIVATED;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	755a      	strb	r2, [r3, #21]
}
 8000cb8:	e044      	b.n	8000d44 <setNextInterruptInterval+0x1b0>
		else if (motor->targetCount == motor->currentCount)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	8a5b      	ldrh	r3, [r3, #18]
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	8a1b      	ldrh	r3, [r3, #16]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d103      	bne.n	8000cd2 <setNextInterruptInterval+0x13e>
			motionComplete(motor);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fee0 	bl	8000a90 <motionComplete>
}
 8000cd0:	e038      	b.n	8000d44 <setNextInterruptInterval+0x1b0>
		else if (motor->currentCount >= (int)(abs(motor->targetCount)/2.0))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	8a1b      	ldrh	r3, [r3, #16]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	461c      	mov	r4, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	8a5b      	ldrh	r3, [r3, #18]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bfb8      	it	lt
 8000ce4:	425b      	neglt	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fb84 	bl	80003f4 <__aeabi_i2d>
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf4:	f7ff fd12 	bl	800071c <__aeabi_ddiv>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff fdf4 	bl	80008ec <__aeabi_d2iz>
 8000d04:	4603      	mov	r3, r0
 8000d06:	429c      	cmp	r4, r3
 8000d08:	db1c      	blt.n	8000d44 <setNextInterruptInterval+0x1b0>
			motor->rampDownCount = abs((motor->targetCount - motor->currentCount));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	8a5b      	ldrh	r3, [r3, #18]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	8a1b      	ldrh	r3, [r3, #16]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	bfb8      	it	lt
 8000d1e:	425b      	neglt	r3, r3
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	75da      	strb	r2, [r3, #23]
			ramp(motor->rampDownCount, motor->timerHandle);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7ddb      	ldrb	r3, [r3, #23]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4610      	mov	r0, r2
 8000d34:	f000 f80c 	bl	8000d50 <ramp>
			motor->rampingDown = ACTIVATED;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	755a      	strb	r2, [r3, #21]
			motor->rampingUp = DEACTIVATED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	751a      	strb	r2, [r3, #20]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	0000      	movs	r0, r0
	...

08000d50 <ramp>:

void ramp(uint8_t rampCount, TIM_HandleTypeDef* timerHandle)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
	uint16_t nextCompareValue = (uint16_t)((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
			((MAX_INTERVAL - MIN_INTERVAL)/1000000.0)*(F_CPU/PRESCALER)*sine[rampCount]);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <ramp+0x68>)
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb57 	bl	8000418 <__aeabi_f2d>
 8000d6a:	a311      	add	r3, pc, #68	; (adr r3, 8000db0 <ramp+0x60>)
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	f7ff fbaa 	bl	80004c8 <__aeabi_dmul>
 8000d74:	4603      	mov	r3, r0
 8000d76:	460c      	mov	r4, r1
 8000d78:	4618      	mov	r0, r3
 8000d7a:	4621      	mov	r1, r4
	uint16_t nextCompareValue = (uint16_t)((MIN_INTERVAL/1000000.0)*(F_CPU/PRESCALER) +
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <ramp+0x6c>)
 8000d82:	f7ff f9eb 	bl	800015c <__adddf3>
 8000d86:	4603      	mov	r3, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	4621      	mov	r1, r4
 8000d8e:	f7ff fdd5 	bl	800093c <__aeabi_d2uiz>
 8000d92:	4603      	mov	r3, r0
 8000d94:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_AUTORELOAD(timerHandle, nextCompareValue);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	89fa      	ldrh	r2, [r7, #14]
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	60da      	str	r2, [r3, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	f3af 8000 	nop.w
 8000db0:	00000000 	.word	0x00000000
 8000db4:	40715080 	.word	0x40715080
 8000db8:	08006c6c 	.word	0x08006c6c
 8000dbc:	4010e000 	.word	0x4010e000

08000dc0 <runMotor>:

void runMotor(StepperMotor* motor)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	 motor->sendPulse();
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4798      	blx	r3
	 motor->pulseFlag = 0;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	761a      	strb	r2, [r3, #24]
	 motor->currentCount ++;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	8a1b      	ldrh	r3, [r3, #16]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	821a      	strh	r2, [r3, #16]
	 motor->absolutePosition += motor->direction;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7a1b      	ldrb	r3, [r3, #8]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	441a      	add	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60da      	str	r2, [r3, #12]

	 if (motor->currentCount == motor->targetCount)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	8a1b      	ldrh	r3, [r3, #16]
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	8a5b      	ldrh	r3, [r3, #18]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d103      	bne.n	8000e0e <runMotor+0x4e>
	 {
		 motionComplete(motor);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fe42 	bl	8000a90 <motionComplete>
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
			 abs(motor->targetCount - motor->currentCount) <= NO_OF_RAMP_STEPS)
	 {
		 setNextInterruptInterval(motor);
	 }
}
 8000e0c:	e014      	b.n	8000e38 <runMotor+0x78>
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	8a1b      	ldrh	r3, [r3, #16]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	2b20      	cmp	r3, #32
 8000e16:	dd0c      	ble.n	8000e32 <runMotor+0x72>
			 abs(motor->targetCount - motor->currentCount) <= NO_OF_RAMP_STEPS)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	8a5b      	ldrh	r3, [r3, #18]
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	8a1b      	ldrh	r3, [r3, #16]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bfb8      	it	lt
 8000e2c:	425b      	neglt	r3, r3
	 else if (motor->currentCount <= NO_OF_RAMP_STEPS ||
 8000e2e:	2b20      	cmp	r3, #32
 8000e30:	dc02      	bgt.n	8000e38 <runMotor+0x78>
		 setNextInterruptInterval(motor);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff feae 	bl	8000b94 <setNextInterruptInterval>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <configForNewCommand>:

void configForNewCommand(StepperMotor* motor)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
		//Set Direction
		if (motor->absolutePosition > motor->newAbsoluteTarget)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000e50:	b212      	sxth	r2, r2
 8000e52:	4293      	cmp	r3, r2
 8000e54:	dd09      	ble.n	8000e6a <configForNewCommand+0x2a>
		{
			motor->newDirection = CLOCKWISE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	22ff      	movs	r2, #255	; 0xff
 8000e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			motor->setDirection(CLOCKWISE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f04f 30ff 	mov.w	r0, #4294967295
 8000e66:	4798      	blx	r3
 8000e68:	e00e      	b.n	8000e88 <configForNewCommand+0x48>
		}
		else if (motor->absolutePosition < motor->newAbsoluteTarget)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000e72:	b212      	sxth	r2, r2
 8000e74:	4293      	cmp	r3, r2
 8000e76:	da07      	bge.n	8000e88 <configForNewCommand+0x48>
		{
			motor->newDirection = ANTICLOCKWISE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			motor->setDirection(ANTICLOCKWISE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2001      	movs	r0, #1
 8000e86:	4798      	blx	r3
		}

		//Define motion
		if (motor->direction == motor->newDirection)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7a1b      	ldrb	r3, [r3, #8]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d13c      	bne.n	8000f16 <configForNewCommand+0xd6>
		{
			if(motor->rampingDown == 1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7d5b      	ldrb	r3, [r3, #21]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d11f      	bne.n	8000ee6 <configForNewCommand+0xa6>
			{
				//Stop ramp-down and initiate ramp up as required by the new target
				motor->targetCount = abs(motor->newAbsoluteTarget - motor->currentCount) + motor->rampDownCount;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	8a1b      	ldrh	r3, [r3, #16]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bfb8      	it	lt
 8000eba:	425b      	neglt	r3, r3
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7ddb      	ldrb	r3, [r3, #23]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	825a      	strh	r2, [r3, #18]
				motor->currentCount = motor->rampDownCount;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7ddb      	ldrb	r3, [r3, #23]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	821a      	strh	r2, [r3, #16]
				motor->newCommandAvailable = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				motor->direction = motor->newDirection;
				motor->setDirection(motor->direction);
				motor->newCommandAvailable = 0;
			}
		}
}
 8000ee4:	e05d      	b.n	8000fa2 <configForNewCommand+0x162>
				motor->targetCount = motor->currentCount +
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	8a1b      	ldrh	r3, [r3, #16]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b29a      	uxth	r2, r3
						abs(motor->absolutePosition - motor->newAbsoluteTarget);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 8000ef6:	b209      	sxth	r1, r1
 8000ef8:	1a5b      	subs	r3, r3, r1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bfb8      	it	lt
 8000efe:	425b      	neglt	r3, r3
				motor->targetCount = motor->currentCount +
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	825a      	strh	r2, [r3, #18]
				motor->newCommandAvailable = 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000f14:	e045      	b.n	8000fa2 <configForNewCommand+0x162>
			if(motor->rampingDown == 1) //works, obviously
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7d5b      	ldrb	r3, [r3, #21]
			if (motor->rampingUp == 1) //seems to work
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7d1b      	ldrb	r3, [r3, #20]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d115      	bne.n	8000f50 <configForNewCommand+0x110>
				motor->targetCount = 2*motor->rampUpCount;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7d9b      	ldrb	r3, [r3, #22]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	825a      	strh	r2, [r3, #18]
				motor->currentCount = motor->rampUpCount;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7d9b      	ldrb	r3, [r3, #22]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	821a      	strh	r2, [r3, #16]
				motor->rampingDown = 1;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	755a      	strb	r2, [r3, #21]
				motor->rampingUp = 0;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	751a      	strb	r2, [r3, #20]
}
 8000f4e:	e028      	b.n	8000fa2 <configForNewCommand+0x162>
			else if (motor->rampingUp == 0 && motor->rampingDown == 0) //seems to work
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7d1b      	ldrb	r3, [r3, #20]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d123      	bne.n	8000fa2 <configForNewCommand+0x162>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7d5b      	ldrb	r3, [r3, #21]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d11e      	bne.n	8000fa2 <configForNewCommand+0x162>
				motor->targetCount = abs(motor->newAbsoluteTarget - motor->absolutePosition);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bfb8      	it	lt
 8000f76:	425b      	neglt	r3, r3
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	825a      	strh	r2, [r3, #18]
				motor->direction = motor->newDirection;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	721a      	strb	r2, [r3, #8]
				motor->setDirection(motor->direction);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	7a12      	ldrb	r2, [r2, #8]
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	4610      	mov	r0, r2
 8000f98:	4798      	blx	r3
				motor->newCommandAvailable = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	programInit();
 8000fb0:	f7ff fd8a 	bl	8000ac8 <programInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f000 fafe 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f82a 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f000 f96e 	bl	800129c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000fc0:	f005 f982 	bl	80062c8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000fc4:	f000 f880 	bl	80010c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fc8:	f000 f8cc 	bl	8001164 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fcc:	f000 f918 	bl	8001200 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <main+0x5c>)
 8000fd2:	f002 f996 	bl	8003302 <HAL_TIM_Base_Start_IT>
  motor[0].newAbsoluteTarget = 100;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <main+0x60>)
 8000fd8:	2264      	movs	r2, #100	; 0x64
 8000fda:	84da      	strh	r2, [r3, #38]	; 0x26
  motor[0].newCommandAvailable = ACTIVATED;
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <main+0x60>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (motor[0].newCommandAvailable)
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <main+0x60>)
 8000fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <main+0x4a>
	 {
		 configForNewCommand(&motor[0]);
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <main+0x60>)
 8000ff2:	f7ff ff25 	bl	8000e40 <configForNewCommand>
	 }

	 if (motor[0].pulseFlag == 1)
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <main+0x60>)
 8000ff8:	7e1b      	ldrb	r3, [r3, #24]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d1f1      	bne.n	8000fe4 <main+0x38>
	 {
		 runMotor(&motor[0]);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <main+0x60>)
 8001002:	f7ff fedd 	bl	8000dc0 <runMotor>
	 if (motor[0].newCommandAvailable)
 8001006:	e7ed      	b.n	8000fe4 <main+0x38>
 8001008:	2000043c 	.word	0x2000043c
 800100c:	2000047c 	.word	0x2000047c

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	; 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	2228      	movs	r2, #40	; 0x28
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fde0 	bl	8006be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001040:	2301      	movs	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104e:	2301      	movs	r3, #1
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800105c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fc80 	bl	800296c <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001072:	f000 f953 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2102      	movs	r1, #2
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fee9 	bl	8002e6c <HAL_RCC_ClockConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010a0:	f000 f93c 	bl	800131c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010a4:	2310      	movs	r3, #16
 80010a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 f846 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010ba:	f000 f92f 	bl	800131c <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3750      	adds	r7, #80	; 0x50
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_TIM2_Init+0x98>)
 80010e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 256;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_TIM2_Init+0x98>)
 80010ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_TIM2_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 286;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_TIM2_Init+0x98>)
 80010fc:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8001100:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_TIM2_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_TIM2_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <MX_TIM2_Init+0x98>)
 8001110:	f002 f8cc 	bl	80032ac <HAL_TIM_Base_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800111a:	f000 f8ff 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_TIM2_Init+0x98>)
 800112c:	f002 fa14 	bl	8003558 <HAL_TIM_ConfigClockSource>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001136:	f000 f8f1 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <MX_TIM2_Init+0x98>)
 8001148:	f002 fbe2 	bl	8003910 <HAL_TIMEx_MasterConfigSynchronization>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001152:	f000 f8e3 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000043c 	.word	0x2000043c

08001164 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_TIM3_Init+0x94>)
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <MX_TIM3_Init+0x98>)
 8001184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 256;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM3_Init+0x94>)
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM3_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 286;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_TIM3_Init+0x94>)
 8001196:	f44f 728f 	mov.w	r2, #286	; 0x11e
 800119a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_TIM3_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_TIM3_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <MX_TIM3_Init+0x94>)
 80011aa:	f002 f87f 	bl	80032ac <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011b4:	f000 f8b2 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM3_Init+0x94>)
 80011c6:	f002 f9c7 	bl	8003558 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011d0:	f000 f8a4 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM3_Init+0x94>)
 80011e2:	f002 fb95 	bl	8003910 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f000 f896 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200003fc 	.word	0x200003fc
 80011fc:	40000400 	.word	0x40000400

08001200 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_TIM4_Init+0x94>)
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <MX_TIM4_Init+0x98>)
 8001220:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 256;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_TIM4_Init+0x94>)
 8001224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001228:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_TIM4_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 286;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_TIM4_Init+0x94>)
 8001232:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8001236:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_TIM4_Init+0x94>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_TIM4_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <MX_TIM4_Init+0x94>)
 8001246:	f002 f831 	bl	80032ac <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001250:	f000 f864 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_TIM4_Init+0x94>)
 8001262:	f002 f979 	bl	8003558 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800126c:	f000 f856 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_TIM4_Init+0x94>)
 800127e:	f002 fb47 	bl	8003910 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 f848 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200003bc 	.word	0x200003bc
 8001298:	40000800 	.word	0x40000800

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_GPIO_Init+0x78>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <MX_GPIO_Init+0x78>)
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_GPIO_Init+0x78>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_GPIO_Init+0x78>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <MX_GPIO_Init+0x78>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_GPIO_Init+0x78>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80012e0:	2200      	movs	r2, #0
 80012e2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_GPIO_Init+0x7c>)
 80012e8:	f000 fc2e 	bl	8001b48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80012ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012f0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4619      	mov	r1, r3
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_GPIO_Init+0x7c>)
 8001306:	f000 fac5 	bl	8001894 <HAL_GPIO_Init>

}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_MspInit+0x5c>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_MspInit+0x5c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x5c>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_MspInit+0x5c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_MspInit+0x60>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_MspInit+0x60>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000

0800138c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139c:	d114      	bne.n	80013c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a25      	ldr	r2, [pc, #148]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	201c      	movs	r0, #28
 80013bc:	f000 fa33 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013c0:	201c      	movs	r0, #28
 80013c2:	f000 fa4c 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013c6:	e032      	b.n	800142e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_TIM_Base_MspInit+0xb0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d114      	bne.n	80013fc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201d      	movs	r0, #29
 80013f0:	f000 fa19 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013f4:	201d      	movs	r0, #29
 80013f6:	f000 fa32 	bl	800185e <HAL_NVIC_EnableIRQ>
}
 80013fa:	e018      	b.n	800142e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_TIM_Base_MspInit+0xb4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d113      	bne.n	800142e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_TIM_Base_MspInit+0xac>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	201e      	movs	r0, #30
 8001424:	f000 f9ff 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001428:	201e      	movs	r0, #30
 800142a:	f000 fa18 	bl	800185e <HAL_NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40000400 	.word	0x40000400
 8001440:	40000800 	.word	0x40000800

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <HardFault_Handler+0x4>

08001456 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <BusFault_Handler+0x4>

08001462 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <UsageFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f8d6 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800149e:	f000 fc8a 	bl	8001db6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20001198 	.word	0x20001198

080014ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <TIM2_IRQHandler+0x24>)
 80014b2:	f001 ff49 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //
  if (motor[0].currentCount < motor[0].targetCount)
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <TIM2_IRQHandler+0x28>)
 80014b8:	8a1b      	ldrh	r3, [r3, #16]
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <TIM2_IRQHandler+0x28>)
 80014be:	8a5b      	ldrh	r3, [r3, #18]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	429a      	cmp	r2, r3
 80014c4:	da02      	bge.n	80014cc <TIM2_IRQHandler+0x20>
	  motor[0].pulseFlag = 1;
 80014c6:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <TIM2_IRQHandler+0x28>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	761a      	strb	r2, [r3, #24]

  /* USER CODE END TIM2_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000043c 	.word	0x2000043c
 80014d4:	2000047c 	.word	0x2000047c

080014d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM3_IRQHandler+0x10>)
 80014de:	f001 ff33 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200003fc 	.word	0x200003fc

080014ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM4_IRQHandler+0x10>)
 80014f2:	f001 ff29 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200003bc 	.word	0x200003bc

08001500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <SystemInit+0x5c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <SystemInit+0x5c>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <SystemInit+0x5c>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4911      	ldr	r1, [pc, #68]	; (800155c <SystemInit+0x5c>)
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <SystemInit+0x60>)
 8001518:	4013      	ands	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <SystemInit+0x5c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <SystemInit+0x5c>)
 8001522:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <SystemInit+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SystemInit+0x5c>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <SystemInit+0x5c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <SystemInit+0x5c>)
 800153e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001542:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SystemInit+0x5c>)
 8001546:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800154a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SystemInit+0x64>)
 800154e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001552:	609a      	str	r2, [r3, #8]
#endif 
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	f8ff0000 	.word	0xf8ff0000
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001568:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800156a:	e003      	b.n	8001574 <LoopCopyDataInit>

0800156c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800156e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001570:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001572:	3104      	adds	r1, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001574:	480a      	ldr	r0, [pc, #40]	; (80015a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001578:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800157a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800157c:	d3f6      	bcc.n	800156c <CopyDataInit>
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001580:	e002      	b.n	8001588 <LoopFillZerobss>

08001582 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001584:	f842 3b04 	str.w	r3, [r2], #4

08001588 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800158a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800158c:	d3f9      	bcc.n	8001582 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800158e:	f7ff ffb7 	bl	8001500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f005 fb03 	bl	8006b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001596:	f7ff fd09 	bl	8000fac <main>
  bx lr
 800159a:	4770      	bx	lr
  ldr r3, =_sidata
 800159c:	08006d04 	.word	0x08006d04
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015a4:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80015a8:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80015ac:	20001404 	.word	0x20001404

080015b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC1_2_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x28>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x28>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f923 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff feaa 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f93b 	bl	800187a <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f903 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000000 	.word	0x20000000
 8001638:	20000008 	.word	0x20000008
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_IncTick+0x1c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_IncTick+0x20>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a03      	ldr	r2, [pc, #12]	; (8001660 <HAL_IncTick+0x20>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	20000008 	.word	0x20000008
 8001660:	20000500 	.word	0x20000500

08001664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b02      	ldr	r3, [pc, #8]	; (8001674 <HAL_GetTick+0x10>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	20000500 	.word	0x20000500

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4906      	ldr	r1, [pc, #24]	; (8001710 <__NVIC_EnableIRQ+0x34>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff90 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff2d 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff42 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff90 	bl	8001768 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5f 	bl	8001714 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff35 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e127      	b.n	8001af8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8116 	bne.w	8001af2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d034      	beq.n	8001938 <HAL_GPIO_Init+0xa4>
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d80d      	bhi.n	80018ee <HAL_GPIO_Init+0x5a>
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_Init+0x9a>
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d804      	bhi.n	80018e4 <HAL_GPIO_Init+0x50>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d031      	beq.n	8001942 <HAL_GPIO_Init+0xae>
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d01c      	beq.n	800191c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018e2:	e048      	b.n	8001976 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d043      	beq.n	8001970 <HAL_GPIO_Init+0xdc>
 80018e8:	2b11      	cmp	r3, #17
 80018ea:	d01b      	beq.n	8001924 <HAL_GPIO_Init+0x90>
          break;
 80018ec:	e043      	b.n	8001976 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018ee:	4a89      	ldr	r2, [pc, #548]	; (8001b14 <HAL_GPIO_Init+0x280>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d026      	beq.n	8001942 <HAL_GPIO_Init+0xae>
 80018f4:	4a87      	ldr	r2, [pc, #540]	; (8001b14 <HAL_GPIO_Init+0x280>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d806      	bhi.n	8001908 <HAL_GPIO_Init+0x74>
 80018fa:	4a87      	ldr	r2, [pc, #540]	; (8001b18 <HAL_GPIO_Init+0x284>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d020      	beq.n	8001942 <HAL_GPIO_Init+0xae>
 8001900:	4a86      	ldr	r2, [pc, #536]	; (8001b1c <HAL_GPIO_Init+0x288>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01d      	beq.n	8001942 <HAL_GPIO_Init+0xae>
          break;
 8001906:	e036      	b.n	8001976 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001908:	4a85      	ldr	r2, [pc, #532]	; (8001b20 <HAL_GPIO_Init+0x28c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0xae>
 800190e:	4a85      	ldr	r2, [pc, #532]	; (8001b24 <HAL_GPIO_Init+0x290>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d016      	beq.n	8001942 <HAL_GPIO_Init+0xae>
 8001914:	4a84      	ldr	r2, [pc, #528]	; (8001b28 <HAL_GPIO_Init+0x294>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0xae>
          break;
 800191a:	e02c      	b.n	8001976 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e028      	b.n	8001976 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	3304      	adds	r3, #4
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e023      	b.n	8001976 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	3308      	adds	r3, #8
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e01e      	b.n	8001976 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	330c      	adds	r3, #12
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e019      	b.n	8001976 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194a:	2304      	movs	r3, #4
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e012      	b.n	8001976 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	611a      	str	r2, [r3, #16]
          break;
 8001962:	e008      	b.n	8001976 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	615a      	str	r2, [r3, #20]
          break;
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
          break;
 8001974:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2bff      	cmp	r3, #255	; 0xff
 800197a:	d801      	bhi.n	8001980 <HAL_GPIO_Init+0xec>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	e001      	b.n	8001984 <HAL_GPIO_Init+0xf0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2bff      	cmp	r3, #255	; 0xff
 800198a:	d802      	bhi.n	8001992 <HAL_GPIO_Init+0xfe>
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x104>
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	3b08      	subs	r3, #8
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	210f      	movs	r1, #15
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	6a39      	ldr	r1, [r7, #32]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	431a      	orrs	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8096 	beq.w	8001af2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c6:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_GPIO_Init+0x298>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_GPIO_Init+0x298>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_GPIO_Init+0x298>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019de:	4a54      	ldr	r2, [pc, #336]	; (8001b30 <HAL_GPIO_Init+0x29c>)
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	; (8001b34 <HAL_GPIO_Init+0x2a0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x19e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <HAL_GPIO_Init+0x2a4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x19a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a49      	ldr	r2, [pc, #292]	; (8001b3c <HAL_GPIO_Init+0x2a8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x196>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <HAL_GPIO_Init+0x2ac>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x192>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x1a0>
 8001a26:	2304      	movs	r3, #4
 8001a28:	e004      	b.n	8001a34 <HAL_GPIO_Init+0x1a0>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x1a0>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x1a0>
 8001a32:	2300      	movs	r3, #0
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	f002 0203 	and.w	r2, r2, #3
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4093      	lsls	r3, r2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a44:	493a      	ldr	r1, [pc, #232]	; (8001b30 <HAL_GPIO_Init+0x29c>)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4938      	ldr	r1, [pc, #224]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
 8001a6a:	e006      	b.n	8001a7a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a6c:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	4933      	ldr	r1, [pc, #204]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	492e      	ldr	r1, [pc, #184]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
 8001a92:	e006      	b.n	8001aa2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	4929      	ldr	r1, [pc, #164]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aae:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	4924      	ldr	r1, [pc, #144]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
 8001aba:	e006      	b.n	8001aca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	491f      	ldr	r1, [pc, #124]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	491a      	ldr	r1, [pc, #104]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60cb      	str	r3, [r1, #12]
 8001ae2:	e006      	b.n	8001af2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4915      	ldr	r1, [pc, #84]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f47f aed0 	bne.w	80018a8 <HAL_GPIO_Init+0x14>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	372c      	adds	r7, #44	; 0x2c
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	10210000 	.word	0x10210000
 8001b18:	10110000 	.word	0x10110000
 8001b1c:	10120000 	.word	0x10120000
 8001b20:	10310000 	.word	0x10310000
 8001b24:	10320000 	.word	0x10320000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	40011400 	.word	0x40011400
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b64:	e003      	b.n	8001b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	041a      	lsls	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001b96:	e002      	b.n	8001b9e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b98:	887a      	ldrh	r2, [r7, #2]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001baa:	b08b      	sub	sp, #44	; 0x2c
 8001bac:	af06      	add	r7, sp, #24
 8001bae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0d3      	b.n	8001d62 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f004 fd46 	bl	8006660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 ff12 	bl	8003a0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	687e      	ldr	r6, [r7, #4]
 8001bee:	466d      	mov	r5, sp
 8001bf0:	f106 0410 	add.w	r4, r6, #16
 8001bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	602b      	str	r3, [r5, #0]
 8001bfc:	1d33      	adds	r3, r6, #4
 8001bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c00:	6838      	ldr	r0, [r7, #0]
 8001c02:	f001 fedb 	bl	80039bc <USB_CoreInit>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0a4      	b.n	8001d62 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 ff0f 	bl	8003a42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e035      	b.n	8001c96 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	015b      	lsls	r3, r3, #5
 8001c30:	4413      	add	r3, r2
 8001c32:	3329      	adds	r3, #41	; 0x29
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	015b      	lsls	r3, r3, #5
 8001c3e:	4413      	add	r3, r2
 8001c40:	3328      	adds	r3, #40	; 0x28
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	b291      	uxth	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	015b      	lsls	r3, r3, #5
 8001c50:	4413      	add	r3, r2
 8001c52:	3336      	adds	r3, #54	; 0x36
 8001c54:	460a      	mov	r2, r1
 8001c56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	015b      	lsls	r3, r3, #5
 8001c5e:	4413      	add	r3, r2
 8001c60:	332b      	adds	r3, #43	; 0x2b
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	015b      	lsls	r3, r3, #5
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3338      	adds	r3, #56	; 0x38
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	015b      	lsls	r3, r3, #5
 8001c7a:	4413      	add	r3, r2
 8001c7c:	333c      	adds	r3, #60	; 0x3c
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	3302      	adds	r3, #2
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	3301      	adds	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3c4      	bcc.n	8001c2a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e031      	b.n	8001d0a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	015b      	lsls	r3, r3, #5
 8001cac:	4413      	add	r3, r2
 8001cae:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	015b      	lsls	r3, r3, #5
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	015b      	lsls	r3, r3, #5
 8001ccc:	4413      	add	r3, r2
 8001cce:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	015b      	lsls	r3, r3, #5
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	330a      	adds	r3, #10
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	4413      	add	r3, r2
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	3301      	adds	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d3c8      	bcc.n	8001ca6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	687e      	ldr	r6, [r7, #4]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	602b      	str	r3, [r5, #0]
 8001d2a:	1d33      	adds	r3, r6, #4
 8001d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2e:	6838      	ldr	r0, [r7, #0]
 8001d30:	f001 fe93 	bl	8003a5a <USB_DevInit>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00d      	b.n	8001d62 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fed1 	bl	8004b02 <USB_DevDisconnect>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_PCD_Start+0x16>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e016      	b.n	8001dae <HAL_PCD_Start+0x44>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d88:	2101      	movs	r1, #1
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f004 fecf 	bl	8006b2e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 feaa 	bl	8004aee <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fe1c 	bl	80039dc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fea7 	bl	8004b16 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 faf3 	bl	80023c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fe99 	bl	8004b16 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dee:	d112      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e02:	b292      	uxth	r2, r2
 8001e04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f004 fc9e 	bl	800674a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8de 	bl	8001fd2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fe7b 	bl	8004b16 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e2a:	d10b      	bne.n	8001e44 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fe64 	bl	8004b16 <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e58:	d10b      	bne.n	8001e72 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e6c:	b292      	uxth	r2, r2
 8001e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fe4d 	bl	8004b16 <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e86:	d126      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0204 	bic.w	r2, r2, #4
 8001e9a:	b292      	uxth	r2, r2
 8001e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0208 	bic.w	r2, r2, #8
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f004 fc7f 	bl	80067bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fe1b 	bl	8004b16 <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eea:	d13d      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0208 	orr.w	r2, r2, #8
 8001efe:	b292      	uxth	r2, r2
 8001f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0204 	orr.w	r2, r2, #4
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fdec 	bl	8004b16 <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	d10b      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f004 fc10 	bl	8006788 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f002 fdd2 	bl	8004b16 <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7c:	d10e      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f90:	b292      	uxth	r2, r2
 8001f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f004 fbc9 	bl	800672e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fdb8 	bl	8004b16 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb0:	d10b      	bne.n	8001fca <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_PCD_SetAddress+0x1a>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e013      	b.n	8002014 <HAL_PCD_SetAddress+0x42>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fd5f 	bl	8004ac8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4603      	mov	r3, r0
 800202c:	70fb      	strb	r3, [r7, #3]
 800202e:	460b      	mov	r3, r1
 8002030:	803b      	strh	r3, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800203a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203e:	2b00      	cmp	r3, #0
 8002040:	da0b      	bge.n	800205a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	015b      	lsls	r3, r3, #5
 800204a:	3328      	adds	r3, #40	; 0x28
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	705a      	strb	r2, [r3, #1]
 8002058:	e00b      	b.n	8002072 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	015b      	lsls	r3, r3, #5
 8002062:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800207e:	883a      	ldrh	r2, [r7, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	78ba      	ldrb	r2, [r7, #2]
 8002088:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800209c:	78bb      	ldrb	r3, [r7, #2]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d102      	bne.n	80020a8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_PCD_EP_Open+0x9a>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e00e      	b.n	80020d4 <HAL_PCD_EP_Open+0xb8>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 fced 	bl	8003aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80020d2:	7afb      	ldrb	r3, [r7, #11]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da0b      	bge.n	8002108 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	3328      	adds	r3, #40	; 0x28
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	705a      	strb	r2, [r3, #1]
 8002106:	e00b      	b.n	8002120 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	015b      	lsls	r3, r3, #5
 8002110:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_PCD_EP_Close+0x5e>
 8002136:	2302      	movs	r3, #2
 8002138:	e00e      	b.n	8002158 <HAL_PCD_EP_Close+0x7c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	4618      	mov	r0, r3
 800214a:	f001 ff99 	bl	8004080 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	460b      	mov	r3, r1
 800216e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	015b      	lsls	r3, r3, #5
 8002178:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2200      	movs	r2, #0
 8002192:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2200      	movs	r2, #0
 8002198:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6979      	ldr	r1, [r7, #20]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 f8f8 	bl	80043ac <USB_EPStartXfer>
 80021bc:	e005      	b.n	80021ca <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6979      	ldr	r1, [r7, #20]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 f8f1 	bl	80043ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	330a      	adds	r3, #10
 80021ea:	015b      	lsls	r3, r3, #5
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	460b      	mov	r3, r1
 800220a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800220c:	7afb      	ldrb	r3, [r7, #11]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	015b      	lsls	r3, r3, #5
 8002214:	3328      	adds	r3, #40	; 0x28
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2201      	movs	r2, #1
 8002232:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002234:	7afb      	ldrb	r3, [r7, #11]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	b2da      	uxtb	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6979      	ldr	r1, [r7, #20]
 8002250:	4618      	mov	r0, r3
 8002252:	f002 f8ab 	bl	80043ac <USB_EPStartXfer>
 8002256:	e005      	b.n	8002264 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	4618      	mov	r0, r3
 8002260:	f002 f8a4 	bl	80043ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 0207 	and.w	r2, r3, #7
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d901      	bls.n	800228c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e046      	b.n	800231a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800228c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da0b      	bge.n	80022ac <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	015b      	lsls	r3, r3, #5
 800229c:	3328      	adds	r3, #40	; 0x28
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	705a      	strb	r2, [r3, #1]
 80022aa:	e009      	b.n	80022c0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	015b      	lsls	r3, r3, #5
 80022b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_PCD_EP_SetStall+0x72>
 80022dc:	2302      	movs	r3, #2
 80022de:	e01c      	b.n	800231a <HAL_PCD_EP_SetStall+0xac>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68f9      	ldr	r1, [r7, #12]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fb14 	bl	800491c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f002 fc12 	bl	8004b34 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 020f 	and.w	r2, r3, #15
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d901      	bls.n	8002340 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e03a      	b.n	80023b6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002344:	2b00      	cmp	r3, #0
 8002346:	da0b      	bge.n	8002360 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	015b      	lsls	r3, r3, #5
 8002350:	3328      	adds	r3, #40	; 0x28
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	705a      	strb	r2, [r3, #1]
 800235e:	e00b      	b.n	8002378 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	015b      	lsls	r3, r3, #5
 8002368:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	b2da      	uxtb	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_PCD_EP_ClrStall+0x76>
 8002394:	2302      	movs	r3, #2
 8002396:	e00e      	b.n	80023b6 <HAL_PCD_EP_ClrStall+0x94>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68f9      	ldr	r1, [r7, #12]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 fafa 	bl	80049a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023c8:	e282      	b.n	80028d0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023d2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023d4:	8afb      	ldrh	r3, [r7, #22]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80023de:	7d7b      	ldrb	r3, [r7, #21]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 8142 	bne.w	800266a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023e6:	8afb      	ldrh	r3, [r7, #22]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d151      	bne.n	8002494 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002400:	b29c      	uxth	r4, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800240a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240e:	b29b      	uxth	r3, r3
 8002410:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3328      	adds	r3, #40	; 0x28
 8002416:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	3302      	adds	r3, #2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	441a      	add	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002452:	2100      	movs	r1, #0
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f004 f953 	bl	8006700 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8234 	beq.w	80028d0 <PCD_EP_ISR_Handler+0x510>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 822f 	bne.w	80028d0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800247e:	b2da      	uxtb	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b292      	uxth	r2, r2
 8002486:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002492:	e21d      	b.n	80028d0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800249a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024a4:	8a7b      	ldrh	r3, [r7, #18]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d033      	beq.n	8002516 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	3306      	adds	r3, #6
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f002 fb70 	bl	8004bd2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024fe:	4013      	ands	r3, r2
 8002500:	b29c      	uxth	r4, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800250a:	b292      	uxth	r2, r2
 800250c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f004 f8cc 	bl	80066ac <HAL_PCD_SetupStageCallback>
 8002514:	e1dc      	b.n	80028d0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f280 81d8 	bge.w	80028d0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29a      	uxth	r2, r3
 8002528:	f640 738f 	movw	r3, #3983	; 0xf8f
 800252c:	4013      	ands	r3, r2
 800252e:	b29c      	uxth	r4, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002538:	b292      	uxth	r2, r2
 800253a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3306      	adds	r3, #6
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d019      	beq.n	80025a4 <PCD_EP_ISR_Handler+0x1e4>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d015      	beq.n	80025a4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6959      	ldr	r1, [r3, #20]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002588:	b29b      	uxth	r3, r3
 800258a:	f002 fb22 	bl	8004bd2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	441a      	add	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800259c:	2100      	movs	r1, #0
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f004 f896 	bl	80066d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	461c      	mov	r4, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	441c      	add	r4, r3
 80025b6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80025ba:	461c      	mov	r4, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10e      	bne.n	80025e2 <PCD_EP_ISR_Handler+0x222>
 80025c4:	8823      	ldrh	r3, [r4, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	8023      	strh	r3, [r4, #0]
 80025d0:	8823      	ldrh	r3, [r4, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29b      	uxth	r3, r3
 80025de:	8023      	strh	r3, [r4, #0]
 80025e0:	e02d      	b.n	800263e <PCD_EP_ISR_Handler+0x27e>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b3e      	cmp	r3, #62	; 0x3e
 80025e8:	d812      	bhi.n	8002610 <PCD_EP_ISR_Handler+0x250>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <PCD_EP_ISR_Handler+0x244>
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	3301      	adds	r3, #1
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	b29b      	uxth	r3, r3
 8002608:	029b      	lsls	r3, r3, #10
 800260a:	b29b      	uxth	r3, r3
 800260c:	8023      	strh	r3, [r4, #0]
 800260e:	e016      	b.n	800263e <PCD_EP_ISR_Handler+0x27e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <PCD_EP_ISR_Handler+0x26a>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	3b01      	subs	r3, #1
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	b29b      	uxth	r3, r3
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	b29b      	uxth	r3, r3
 8002632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263a:	b29b      	uxth	r3, r3
 800263c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	b29c      	uxth	r4, r3
 8002650:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002654:	b29c      	uxth	r4, r3
 8002656:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800265a:	b29c      	uxth	r4, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4ba2      	ldr	r3, [pc, #648]	; (80028ec <PCD_EP_ISR_Handler+0x52c>)
 8002662:	4323      	orrs	r3, r4
 8002664:	b29b      	uxth	r3, r3
 8002666:	8013      	strh	r3, [r2, #0]
 8002668:	e132      	b.n	80028d0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	7d7b      	ldrb	r3, [r7, #21]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800267a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f280 80d1 	bge.w	8002826 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	7d7b      	ldrb	r3, [r7, #21]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29a      	uxth	r2, r3
 8002694:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002698:	4013      	ands	r3, r2
 800269a:	b29c      	uxth	r4, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	7d7b      	ldrb	r3, [r7, #21]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80026ac:	b292      	uxth	r2, r2
 80026ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026b0:	7d7b      	ldrb	r3, [r7, #21]
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	7b1b      	ldrb	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d121      	bne.n	800270a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	3306      	adds	r3, #6
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ee:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80026f0:	8bfb      	ldrh	r3, [r7, #30]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d072      	beq.n	80027dc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6959      	ldr	r1, [r3, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	88da      	ldrh	r2, [r3, #6]
 8002702:	8bfb      	ldrh	r3, [r7, #30]
 8002704:	f002 fa65 	bl	8004bd2 <USB_ReadPMA>
 8002708:	e068      	b.n	80027dc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d021      	beq.n	8002768 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272c:	b29b      	uxth	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	3302      	adds	r3, #2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800274e:	8bfb      	ldrh	r3, [r7, #30]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d02a      	beq.n	80027aa <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6959      	ldr	r1, [r3, #20]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	891a      	ldrh	r2, [r3, #8]
 8002760:	8bfb      	ldrh	r3, [r7, #30]
 8002762:	f002 fa36 	bl	8004bd2 <USB_ReadPMA>
 8002766:	e020      	b.n	80027aa <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	3306      	adds	r3, #6
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002790:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002792:	8bfb      	ldrh	r3, [r7, #30]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6959      	ldr	r1, [r3, #20]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	895a      	ldrh	r2, [r3, #10]
 80027a4:	8bfb      	ldrh	r3, [r7, #30]
 80027a6:	f002 fa14 	bl	8004bd2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c4:	b29c      	uxth	r4, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	441a      	add	r2, r3
 80027d4:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <PCD_EP_ISR_Handler+0x530>)
 80027d6:	4323      	orrs	r3, r4
 80027d8:	b29b      	uxth	r3, r3
 80027da:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	8bfb      	ldrh	r3, [r7, #30]
 80027e2:	441a      	add	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	8bfb      	ldrh	r3, [r7, #30]
 80027ee:	441a      	add	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <PCD_EP_ISR_Handler+0x446>
 80027fc:	8bfa      	ldrh	r2, [r7, #30]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	429a      	cmp	r2, r3
 8002804:	d206      	bcs.n	8002814 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f003 ff5f 	bl	80066d0 <HAL_PCD_DataOutStageCallback>
 8002812:	e008      	b.n	8002826 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	7819      	ldrb	r1, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fc9d 	bl	8002160 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002826:	8a7b      	ldrh	r3, [r7, #18]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d04f      	beq.n	80028d0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002830:	7d7b      	ldrb	r3, [r7, #21]
 8002832:	015b      	lsls	r3, r3, #5
 8002834:	3328      	adds	r3, #40	; 0x28
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	7d7b      	ldrb	r3, [r7, #21]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002854:	b29c      	uxth	r4, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	7d7b      	ldrb	r3, [r7, #21]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	441a      	add	r2, r3
 8002862:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800286a:	b29b      	uxth	r3, r3
 800286c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	3302      	adds	r3, #2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	441a      	add	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f003 ff22 	bl	8006700 <HAL_PCD_DataInStageCallback>
 80028bc:	e008      	b.n	80028d0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	7819      	ldrb	r1, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fc96 	bl	80021fc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b21b      	sxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f6ff ad74 	blt.w	80023ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3724      	adds	r7, #36	; 0x24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	ffff8080 	.word	0xffff8080
 80028f0:	ffff80c0 	.word	0xffff80c0

080028f4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	817b      	strh	r3, [r7, #10]
 8002902:	4613      	mov	r3, r2
 8002904:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	015b      	lsls	r3, r3, #5
 800291a:	3328      	adds	r3, #40	; 0x28
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e006      	b.n	8002932 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002924:	897b      	ldrh	r3, [r7, #10]
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002932:	893b      	ldrh	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d107      	bne.n	8002948 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2200      	movs	r2, #0
 800293c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	b29a      	uxth	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	80da      	strh	r2, [r3, #6]
 8002946:	e00b      	b.n	8002960 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2201      	movs	r2, #1
 800294c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	b29a      	uxth	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b29a      	uxth	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e26c      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8087 	beq.w	8002a9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800298c:	4b92      	ldr	r3, [pc, #584]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b04      	cmp	r3, #4
 8002996:	d00c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002998:	4b8f      	ldr	r3, [pc, #572]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d112      	bne.n	80029ca <HAL_RCC_OscConfig+0x5e>
 80029a4:	4b8c      	ldr	r3, [pc, #560]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d10b      	bne.n	80029ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d06c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x12c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d168      	bne.n	8002a98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e246      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x76>
 80029d4:	4b80      	ldr	r3, [pc, #512]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a7f      	ldr	r2, [pc, #508]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e02e      	b.n	8002a40 <HAL_RCC_OscConfig+0xd4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x98>
 80029ea:	4b7b      	ldr	r3, [pc, #492]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7a      	ldr	r2, [pc, #488]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a77      	ldr	r2, [pc, #476]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0xd4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0xbc>
 8002a0e:	4b72      	ldr	r3, [pc, #456]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a71      	ldr	r2, [pc, #452]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0xd4>
 8002a28:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6a      	ldr	r2, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a67      	ldr	r2, [pc, #412]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fe0c 	bl	8001664 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fe08 	bl	8001664 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1fa      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0xe4>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fdf8 	bl	8001664 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fdf4 	bl	8001664 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1e6      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x10c>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d063      	beq.n	8002b6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ab2:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d11c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x18c>
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x176>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1ba      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4939      	ldr	r1, [pc, #228]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	e03a      	b.n	8002b6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b00:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <HAL_RCC_OscConfig+0x270>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7fe fdad 	bl	8001664 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fda9 	bl	8001664 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e19b      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4927      	ldr	r1, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_RCC_OscConfig+0x270>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fd8c 	bl	8001664 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b50:	f7fe fd88 	bl	8001664 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e17a      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03a      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d019      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b88:	f7fe fd6c 	bl	8001664 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fd68 	bl	8001664 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e15a      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f000 faa8 	bl	8003104 <RCC_Delay>
 8002bb4:	e01c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fd52 	bl	8001664 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc2:	e00f      	b.n	8002be4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fd4e 	bl	8001664 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d908      	bls.n	8002be4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e140      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	42420000 	.word	0x42420000
 8002be0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	4b9e      	ldr	r3, [pc, #632]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e9      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a6 	beq.w	8002d4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b97      	ldr	r3, [pc, #604]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b94      	ldr	r3, [pc, #592]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a93      	ldr	r2, [pc, #588]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	61d3      	str	r3, [r2, #28]
 8002c1a:	4b91      	ldr	r3, [pc, #580]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	4b8e      	ldr	r3, [pc, #568]	; (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d118      	bne.n	8002c68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c36:	4b8b      	ldr	r3, [pc, #556]	; (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a8a      	ldr	r2, [pc, #552]	; (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fd0f 	bl	8001664 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7fe fd0b 	bl	8001664 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0fd      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	4b81      	ldr	r3, [pc, #516]	; (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x312>
 8002c70:	4b7b      	ldr	r3, [pc, #492]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4a7a      	ldr	r2, [pc, #488]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	e02d      	b.n	8002cda <HAL_RCC_OscConfig+0x36e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x334>
 8002c86:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a75      	ldr	r2, [pc, #468]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a72      	ldr	r2, [pc, #456]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6213      	str	r3, [r2, #32]
 8002c9e:	e01c      	b.n	8002cda <HAL_RCC_OscConfig+0x36e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x356>
 8002ca8:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a6c      	ldr	r2, [pc, #432]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a69      	ldr	r2, [pc, #420]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	e00b      	b.n	8002cda <HAL_RCC_OscConfig+0x36e>
 8002cc2:	4b67      	ldr	r3, [pc, #412]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a66      	ldr	r2, [pc, #408]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a63      	ldr	r2, [pc, #396]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	f023 0304 	bic.w	r3, r3, #4
 8002cd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fcbf 	bl	8001664 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fcbb 	bl	8001664 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0ab      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	4b57      	ldr	r3, [pc, #348]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ee      	beq.n	8002cea <HAL_RCC_OscConfig+0x37e>
 8002d0c:	e014      	b.n	8002d38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fca9 	bl	8001664 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe fca5 	bl	8001664 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e095      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2c:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ee      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3e:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4a47      	ldr	r2, [pc, #284]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 8081 	beq.w	8002e56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d061      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d146      	bne.n	8002df6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b3f      	ldr	r3, [pc, #252]	; (8002e68 <HAL_RCC_OscConfig+0x4fc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fc79 	bl	8001664 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d76:	f7fe fc75 	bl	8001664 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e067      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d108      	bne.n	8002db0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	492d      	ldr	r1, [pc, #180]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a19      	ldr	r1, [r3, #32]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	4927      	ldr	r1, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_RCC_OscConfig+0x4fc>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fc49 	bl	8001664 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fc45 	bl	8001664 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e037      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x46a>
 8002df4:	e02f      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <HAL_RCC_OscConfig+0x4fc>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fc32 	bl	8001664 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fc2e 	bl	8001664 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e020      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x498>
 8002e22:	e018      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e013      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_OscConfig+0x4f4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40007000 	.word	0x40007000
 8002e68:	42420060 	.word	0x42420060

08002e6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0d0      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b6a      	ldr	r3, [pc, #424]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d910      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b67      	ldr	r3, [pc, #412]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4965      	ldr	r1, [pc, #404]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0b8      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ed2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee0:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	494d      	ldr	r1, [pc, #308]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d040      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d115      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b41      	ldr	r3, [pc, #260]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e073      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e06b      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4936      	ldr	r1, [pc, #216]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe fb82 	bl	8001664 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe fb7e 	bl	8001664 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e053      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d210      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4922      	ldr	r1, [pc, #136]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e032      	b.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4916      	ldr	r1, [pc, #88]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	490e      	ldr	r1, [pc, #56]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ffa:	f000 f821 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	fa21 f303 	lsr.w	r3, r1, r3
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1cc>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_ClockConfig+0x1d0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fae0 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	08006cec 	.word	0x08006cec
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b490      	push	{r4, r7}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003048:	1d3c      	adds	r4, r7, #4
 800304a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800304c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x40>
 800307a:	2b08      	cmp	r3, #8
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x46>
 800307e:	e02d      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003082:	623b      	str	r3, [r7, #32]
      break;
 8003084:	e02d      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	0c9b      	lsrs	r3, r3, #18
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003092:	4413      	add	r3, r2
 8003094:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003098:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	0c5b      	lsrs	r3, r3, #17
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030b2:	4413      	add	r3, r2
 80030b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80030be:	fb02 f203 	mul.w	r2, r2, r3
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	e004      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d0:	fb02 f303 	mul.w	r3, r2, r3
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	623b      	str	r3, [r7, #32]
      break;
 80030da:	e002      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80030de:	623b      	str	r3, [r7, #32]
      break;
 80030e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e2:	6a3b      	ldr	r3, [r7, #32]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3728      	adds	r7, #40	; 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc90      	pop	{r4, r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	08006c0c 	.word	0x08006c0c
 80030f4:	08006c1c 	.word	0x08006c1c
 80030f8:	40021000 	.word	0x40021000
 80030fc:	007a1200 	.word	0x007a1200
 8003100:	003d0900 	.word	0x003d0900

08003104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <RCC_Delay+0x34>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <RCC_Delay+0x38>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0a5b      	lsrs	r3, r3, #9
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003120:	bf00      	nop
  }
  while (Delay --);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1e5a      	subs	r2, r3, #1
 8003126:	60fa      	str	r2, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f9      	bne.n	8003120 <RCC_Delay+0x1c>
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000
 800313c:	10624dd3 	.word	0x10624dd3

08003140 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d07d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800315c:	2300      	movs	r3, #0
 800315e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003160:	4b4f      	ldr	r3, [pc, #316]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10d      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003176:	61d3      	str	r3, [r2, #28]
 8003178:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d118      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003194:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a42      	ldr	r2, [pc, #264]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a0:	f7fe fa60 	bl	8001664 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	e008      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a8:	f7fe fa5c 	bl	8001664 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e06d      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02e      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d027      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031f4:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031fa:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d014      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe fa2b 	bl	8001664 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	e00a      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fe fa27 	bl	8001664 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e036      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ee      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4917      	ldr	r1, [pc, #92]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	4313      	orrs	r3, r2
 8003244:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003256:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	490b      	ldr	r1, [pc, #44]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4904      	ldr	r1, [pc, #16]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40007000 	.word	0x40007000
 80032a8:	42420440 	.word	0x42420440

080032ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e01d      	b.n	80032fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe f85a 	bl	800138c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f000 fa18 	bl	8003720 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d007      	beq.n	800333c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0202 	mvn.w	r2, #2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f9ad 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9a0 	bl	80036d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f9af 	bl	80036fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0204 	mvn.w	r2, #4
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f983 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f976 	bl	80036d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f985 	bl	80036fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0208 	mvn.w	r2, #8
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2204      	movs	r2, #4
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f959 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f94c 	bl	80036d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f95b 	bl	80036fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b10      	cmp	r3, #16
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0210 	mvn.w	r2, #16
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f92f 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f922 	bl	80036d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f931 	bl	80036fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0201 	mvn.w	r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8fd 	bl	80036c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa59 	bl	80039aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8f5 	bl	800370e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b20      	cmp	r3, #32
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0220 	mvn.w	r2, #32
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa24 	bl	8003998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_TIM_ConfigClockSource+0x18>
 800356c:	2302      	movs	r3, #2
 800356e:	e0a6      	b.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800358e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003596:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d067      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0x120>
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d80b      	bhi.n	80035c4 <HAL_TIM_ConfigClockSource+0x6c>
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d073      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x140>
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d802      	bhi.n	80035ba <HAL_TIM_ConfigClockSource+0x62>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d06f      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035b8:	e078      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d06c      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x140>
 80035be:	2b30      	cmp	r3, #48	; 0x30
 80035c0:	d06a      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035c2:	e073      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035c4:	2b70      	cmp	r3, #112	; 0x70
 80035c6:	d00d      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0x8c>
 80035c8:	2b70      	cmp	r3, #112	; 0x70
 80035ca:	d804      	bhi.n	80035d6 <HAL_TIM_ConfigClockSource+0x7e>
 80035cc:	2b50      	cmp	r3, #80	; 0x50
 80035ce:	d033      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0xe0>
 80035d0:	2b60      	cmp	r3, #96	; 0x60
 80035d2:	d041      	beq.n	8003658 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035d4:	e06a      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035da:	d066      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x152>
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e0:	d017      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035e2:	e063      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f000 f96d 	bl	80038d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003606:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e04c      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6899      	ldr	r1, [r3, #8]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f000 f956 	bl	80038d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003634:	609a      	str	r2, [r3, #8]
      break;
 8003636:	e039      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	461a      	mov	r2, r3
 8003646:	f000 f8cd 	bl	80037e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2150      	movs	r1, #80	; 0x50
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f924 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 8003656:	e029      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	461a      	mov	r2, r3
 8003666:	f000 f8eb 	bl	8003840 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2160      	movs	r1, #96	; 0x60
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f914 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 8003676:	e019      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	461a      	mov	r2, r3
 8003686:	f000 f8ad 	bl	80037e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2140      	movs	r1, #64	; 0x40
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f904 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 8003696:	e009      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f000 f8fb 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 80036a8:	e000      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80036aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <TIM_Base_SetConfig+0xb8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00b      	beq.n	8003750 <TIM_Base_SetConfig+0x30>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d007      	beq.n	8003750 <TIM_Base_SetConfig+0x30>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a26      	ldr	r2, [pc, #152]	; (80037dc <TIM_Base_SetConfig+0xbc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d003      	beq.n	8003750 <TIM_Base_SetConfig+0x30>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a25      	ldr	r2, [pc, #148]	; (80037e0 <TIM_Base_SetConfig+0xc0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d108      	bne.n	8003762 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <TIM_Base_SetConfig+0xb8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00b      	beq.n	8003782 <TIM_Base_SetConfig+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d007      	beq.n	8003782 <TIM_Base_SetConfig+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a19      	ldr	r2, [pc, #100]	; (80037dc <TIM_Base_SetConfig+0xbc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_Base_SetConfig+0x62>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <TIM_Base_SetConfig+0xc0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d108      	bne.n	8003794 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <TIM_Base_SetConfig+0xb8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d103      	bne.n	80037c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	615a      	str	r2, [r3, #20]
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800

080037e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0201 	bic.w	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800380e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f023 030a 	bic.w	r3, r3, #10
 8003820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f023 0210 	bic.w	r2, r3, #16
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800386a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	031b      	lsls	r3, r3, #12
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800387c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	621a      	str	r2, [r3, #32]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f043 0307 	orr.w	r3, r3, #7
 80038c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	021a      	lsls	r2, r3, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	609a      	str	r2, [r3, #8]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003924:	2302      	movs	r3, #2
 8003926:	e032      	b.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003960:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	4313      	orrs	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039bc:	b084      	sub	sp, #16
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	f107 0014 	add.w	r0, r7, #20
 80039ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	b004      	add	sp, #16
 80039da:	4770      	bx	lr

080039dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039e8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	89fb      	ldrh	r3, [r7, #14]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a12:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a16:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	b21b      	sxth	r3, r3
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	f107 0014 	add.w	r0, r7, #20
 8003a68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ffa5 	bl	80039dc <USB_EnableGlobalInt>

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a9e:	b004      	add	sp, #16
 8003aa0:	4770      	bx	lr
	...

08003aa4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003aa4:	b490      	push	{r4, r7}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	78db      	ldrb	r3, [r3, #3]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d819      	bhi.n	8003b06 <USB_ActivateEndpoint+0x62>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <USB_ActivateEndpoint+0x34>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003afd 	.word	0x08003afd
 8003ae0:	08003b0d 	.word	0x08003b0d
 8003ae4:	08003af3 	.word	0x08003af3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ae8:	89bb      	ldrh	r3, [r7, #12]
 8003aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aee:	81bb      	strh	r3, [r7, #12]
      break;
 8003af0:	e00d      	b.n	8003b0e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003af2:	89bb      	ldrh	r3, [r7, #12]
 8003af4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003af8:	81bb      	strh	r3, [r7, #12]
      break;
 8003afa:	e008      	b.n	8003b0e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003afc:	89bb      	ldrh	r3, [r7, #12]
 8003afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b02:	81bb      	strh	r3, [r7, #12]
      break;
 8003b04:	e003      	b.n	8003b0e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0a:	e000      	b.n	8003b0e <USB_ActivateEndpoint+0x6a>
      break;
 8003b0c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	441a      	add	r2, r3
 8003b18:	89bb      	ldrh	r3, [r7, #12]
 8003b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b29c      	uxth	r4, r3
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	4b8a      	ldr	r3, [pc, #552]	; (8003d84 <USB_ActivateEndpoint+0x2e0>)
 8003b5c:	4323      	orrs	r3, r4
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	7b1b      	ldrb	r3, [r3, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f040 8112 	bne.w	8003d90 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d067      	beq.n	8003c44 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b74:	687c      	ldr	r4, [r7, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	441c      	add	r4, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	4423      	add	r3, r4
 8003b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	88db      	ldrh	r3, [r3, #6]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29c      	uxth	r4, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d014      	beq.n	8003bde <USB_ActivateEndpoint+0x13a>
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	b29c      	uxth	r4, r3
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <USB_ActivateEndpoint+0x2e4>)
 8003bd8:	4323      	orrs	r3, r4
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	78db      	ldrb	r3, [r3, #3]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d018      	beq.n	8003c18 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfc:	b29c      	uxth	r4, r3
 8003bfe:	f084 0320 	eor.w	r3, r4, #32
 8003c02:	b29c      	uxth	r4, r3
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	4b5d      	ldr	r3, [pc, #372]	; (8003d84 <USB_ActivateEndpoint+0x2e0>)
 8003c10:	4323      	orrs	r3, r4
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	8013      	strh	r3, [r2, #0]
 8003c16:	e22b      	b.n	8004070 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c2e:	b29c      	uxth	r4, r3
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	4b52      	ldr	r3, [pc, #328]	; (8003d84 <USB_ActivateEndpoint+0x2e0>)
 8003c3c:	4323      	orrs	r3, r4
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	8013      	strh	r3, [r2, #0]
 8003c42:	e215      	b.n	8004070 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c44:	687c      	ldr	r4, [r7, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	441c      	add	r4, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4423      	add	r3, r4
 8003c58:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c5c:	461c      	mov	r4, r3
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	88db      	ldrh	r3, [r3, #6]
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c6c:	687c      	ldr	r4, [r7, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	441c      	add	r4, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4423      	add	r3, r4
 8003c80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c84:	461c      	mov	r4, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10e      	bne.n	8003cac <USB_ActivateEndpoint+0x208>
 8003c8e:	8823      	ldrh	r3, [r4, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	8023      	strh	r3, [r4, #0]
 8003c9a:	8823      	ldrh	r3, [r4, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8023      	strh	r3, [r4, #0]
 8003caa:	e02d      	b.n	8003d08 <USB_ActivateEndpoint+0x264>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b3e      	cmp	r3, #62	; 0x3e
 8003cb2:	d812      	bhi.n	8003cda <USB_ActivateEndpoint+0x236>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <USB_ActivateEndpoint+0x22a>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	029b      	lsls	r3, r3, #10
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	8023      	strh	r3, [r4, #0]
 8003cd8:	e016      	b.n	8003d08 <USB_ActivateEndpoint+0x264>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <USB_ActivateEndpoint+0x250>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	029b      	lsls	r3, r3, #10
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29c      	uxth	r4, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d014      	beq.n	8003d4a <USB_ActivateEndpoint+0x2a6>
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	b29c      	uxth	r4, r3
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <USB_ActivateEndpoint+0x2e8>)
 8003d44:	4323      	orrs	r3, r4
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d60:	b29c      	uxth	r4, r3
 8003d62:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d66:	b29c      	uxth	r4, r3
 8003d68:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d6c:	b29c      	uxth	r4, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	441a      	add	r2, r3
 8003d78:	4b02      	ldr	r3, [pc, #8]	; (8003d84 <USB_ActivateEndpoint+0x2e0>)
 8003d7a:	4323      	orrs	r3, r4
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	8013      	strh	r3, [r2, #0]
 8003d80:	e176      	b.n	8004070 <USB_ActivateEndpoint+0x5cc>
 8003d82:	bf00      	nop
 8003d84:	ffff8080 	.word	0xffff8080
 8003d88:	ffff80c0 	.word	0xffff80c0
 8003d8c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	b29c      	uxth	r4, r3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	4b96      	ldr	r3, [pc, #600]	; (800400c <USB_ActivateEndpoint+0x568>)
 8003db4:	4323      	orrs	r3, r4
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003dba:	687c      	ldr	r4, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	441c      	add	r4, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	4423      	add	r3, r4
 8003dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dd2:	461c      	mov	r4, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	891b      	ldrh	r3, [r3, #8]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	8023      	strh	r3, [r4, #0]
 8003de2:	687c      	ldr	r4, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	441c      	add	r4, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	4423      	add	r3, r4
 8003df6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003dfa:	461c      	mov	r4, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	895b      	ldrh	r3, [r3, #10]
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	785b      	ldrb	r3, [r3, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 8088 	bne.w	8003f24 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29c      	uxth	r4, r3
 8003e22:	4623      	mov	r3, r4
 8003e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d014      	beq.n	8003e56 <USB_ActivateEndpoint+0x3b2>
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	b29c      	uxth	r4, r3
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	4b70      	ldr	r3, [pc, #448]	; (8004010 <USB_ActivateEndpoint+0x56c>)
 8003e50:	4323      	orrs	r3, r4
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29c      	uxth	r4, r3
 8003e64:	4623      	mov	r3, r4
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d014      	beq.n	8003e98 <USB_ActivateEndpoint+0x3f4>
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e84:	b29c      	uxth	r4, r3
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	441a      	add	r2, r3
 8003e90:	4b60      	ldr	r3, [pc, #384]	; (8004014 <USB_ActivateEndpoint+0x570>)
 8003e92:	4323      	orrs	r3, r4
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	b29c      	uxth	r4, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	4b56      	ldr	r3, [pc, #344]	; (8004014 <USB_ActivateEndpoint+0x570>)
 8003ebc:	4323      	orrs	r3, r4
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed8:	b29c      	uxth	r4, r3
 8003eda:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ede:	b29c      	uxth	r4, r3
 8003ee0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003ee4:	b29c      	uxth	r4, r3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	441a      	add	r2, r3
 8003ef0:	4b49      	ldr	r3, [pc, #292]	; (8004018 <USB_ActivateEndpoint+0x574>)
 8003ef2:	4323      	orrs	r3, r4
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0e:	b29c      	uxth	r4, r3
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	4b3f      	ldr	r3, [pc, #252]	; (8004018 <USB_ActivateEndpoint+0x574>)
 8003f1c:	4323      	orrs	r3, r4
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	8013      	strh	r3, [r2, #0]
 8003f22:	e0a5      	b.n	8004070 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29c      	uxth	r4, r3
 8003f32:	4623      	mov	r3, r4
 8003f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d014      	beq.n	8003f66 <USB_ActivateEndpoint+0x4c2>
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	b29c      	uxth	r4, r3
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <USB_ActivateEndpoint+0x56c>)
 8003f60:	4323      	orrs	r3, r4
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29c      	uxth	r4, r3
 8003f74:	4623      	mov	r3, r4
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <USB_ActivateEndpoint+0x504>
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f94:	b29c      	uxth	r4, r3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	441a      	add	r2, r3
 8003fa0:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <USB_ActivateEndpoint+0x570>)
 8003fa2:	4323      	orrs	r3, r4
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	b29c      	uxth	r4, r3
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <USB_ActivateEndpoint+0x56c>)
 8003fcc:	4323      	orrs	r3, r4
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	78db      	ldrb	r3, [r3, #3]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d020      	beq.n	800401c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff0:	b29c      	uxth	r4, r3
 8003ff2:	f084 0320 	eor.w	r3, r4, #32
 8003ff6:	b29c      	uxth	r4, r3
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	441a      	add	r2, r3
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <USB_ActivateEndpoint+0x574>)
 8004004:	4323      	orrs	r3, r4
 8004006:	b29b      	uxth	r3, r3
 8004008:	8013      	strh	r3, [r2, #0]
 800400a:	e01c      	b.n	8004046 <USB_ActivateEndpoint+0x5a2>
 800400c:	ffff8180 	.word	0xffff8180
 8004010:	ffffc080 	.word	0xffffc080
 8004014:	ffff80c0 	.word	0xffff80c0
 8004018:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004032:	b29c      	uxth	r4, r3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <USB_ActivateEndpoint+0x5d8>)
 8004040:	4323      	orrs	r3, r4
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405c:	b29c      	uxth	r4, r3
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <USB_ActivateEndpoint+0x5d8>)
 800406a:	4323      	orrs	r3, r4
 800406c:	b29b      	uxth	r3, r3
 800406e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bc90      	pop	{r4, r7}
 800407a:	4770      	bx	lr
 800407c:	ffff8080 	.word	0xffff8080

08004080 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004080:	b490      	push	{r4, r7}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	7b1b      	ldrb	r3, [r3, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d171      	bne.n	8004176 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d036      	beq.n	8004108 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29c      	uxth	r4, r3
 80040a8:	4623      	mov	r3, r4
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d014      	beq.n	80040dc <USB_DeactivateEndpoint+0x5c>
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	b29c      	uxth	r4, r3
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	4b6b      	ldr	r3, [pc, #428]	; (8004284 <USB_DeactivateEndpoint+0x204>)
 80040d6:	4323      	orrs	r3, r4
 80040d8:	b29b      	uxth	r3, r3
 80040da:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f2:	b29c      	uxth	r4, r3
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	4b62      	ldr	r3, [pc, #392]	; (8004288 <USB_DeactivateEndpoint+0x208>)
 8004100:	4323      	orrs	r3, r4
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]
 8004106:	e144      	b.n	8004392 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29c      	uxth	r4, r3
 8004116:	4623      	mov	r3, r4
 8004118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d014      	beq.n	800414a <USB_DeactivateEndpoint+0xca>
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	b29c      	uxth	r4, r3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	4b52      	ldr	r3, [pc, #328]	; (800428c <USB_DeactivateEndpoint+0x20c>)
 8004144:	4323      	orrs	r3, r4
 8004146:	b29b      	uxth	r3, r3
 8004148:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800415c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004160:	b29c      	uxth	r4, r3
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	4b46      	ldr	r3, [pc, #280]	; (8004288 <USB_DeactivateEndpoint+0x208>)
 800416e:	4323      	orrs	r3, r4
 8004170:	b29b      	uxth	r3, r3
 8004172:	8013      	strh	r3, [r2, #0]
 8004174:	e10d      	b.n	8004392 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	785b      	ldrb	r3, [r3, #1]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 8088 	bne.w	8004290 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29c      	uxth	r4, r3
 800418e:	4623      	mov	r3, r4
 8004190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d014      	beq.n	80041c2 <USB_DeactivateEndpoint+0x142>
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	b29c      	uxth	r4, r3
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	4b34      	ldr	r3, [pc, #208]	; (800428c <USB_DeactivateEndpoint+0x20c>)
 80041bc:	4323      	orrs	r3, r4
 80041be:	b29b      	uxth	r3, r3
 80041c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29c      	uxth	r4, r3
 80041d0:	4623      	mov	r3, r4
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d014      	beq.n	8004204 <USB_DeactivateEndpoint+0x184>
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	b29c      	uxth	r4, r3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	441a      	add	r2, r3
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <USB_DeactivateEndpoint+0x204>)
 80041fe:	4323      	orrs	r3, r4
 8004200:	b29b      	uxth	r3, r3
 8004202:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	b29c      	uxth	r4, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <USB_DeactivateEndpoint+0x204>)
 8004228:	4323      	orrs	r3, r4
 800422a:	b29b      	uxth	r3, r3
 800422c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004244:	b29c      	uxth	r4, r3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	441a      	add	r2, r3
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <USB_DeactivateEndpoint+0x208>)
 8004252:	4323      	orrs	r3, r4
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426e:	b29c      	uxth	r4, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	4b03      	ldr	r3, [pc, #12]	; (8004288 <USB_DeactivateEndpoint+0x208>)
 800427c:	4323      	orrs	r3, r4
 800427e:	b29b      	uxth	r3, r3
 8004280:	8013      	strh	r3, [r2, #0]
 8004282:	e086      	b.n	8004392 <USB_DeactivateEndpoint+0x312>
 8004284:	ffff80c0 	.word	0xffff80c0
 8004288:	ffff8080 	.word	0xffff8080
 800428c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29c      	uxth	r4, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d014      	beq.n	80042d2 <USB_DeactivateEndpoint+0x252>
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	b29c      	uxth	r4, r3
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <USB_DeactivateEndpoint+0x320>)
 80042cc:	4323      	orrs	r3, r4
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29c      	uxth	r4, r3
 80042e0:	4623      	mov	r3, r4
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d014      	beq.n	8004314 <USB_DeactivateEndpoint+0x294>
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004300:	b29c      	uxth	r4, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	441a      	add	r2, r3
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <USB_DeactivateEndpoint+0x324>)
 800430e:	4323      	orrs	r3, r4
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	b29c      	uxth	r4, r3
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	441a      	add	r2, r3
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <USB_DeactivateEndpoint+0x320>)
 8004338:	4323      	orrs	r3, r4
 800433a:	b29b      	uxth	r3, r3
 800433c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004354:	b29c      	uxth	r4, r3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	441a      	add	r2, r3
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <USB_DeactivateEndpoint+0x328>)
 8004362:	4323      	orrs	r3, r4
 8004364:	b29b      	uxth	r3, r3
 8004366:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	b29c      	uxth	r4, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <USB_DeactivateEndpoint+0x328>)
 800438c:	4323      	orrs	r3, r4
 800438e:	b29b      	uxth	r3, r3
 8004390:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bc90      	pop	{r4, r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	ffffc080 	.word	0xffffc080
 80043a4:	ffff80c0 	.word	0xffff80c0
 80043a8:	ffff8080 	.word	0xffff8080

080043ac <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b08d      	sub	sp, #52	; 0x34
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	f040 8160 	bne.w	8004680 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d909      	bls.n	80043e0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	1ad2      	subs	r2, r2, r3
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	619a      	str	r2, [r3, #24]
 80043de:	e005      	b.n	80043ec <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2200      	movs	r2, #0
 80043ea:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	7b1b      	ldrb	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d119      	bne.n	8004428 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6959      	ldr	r1, [r3, #20]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	88da      	ldrh	r2, [r3, #6]
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	b29b      	uxth	r3, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fba2 	bl	8004b4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004406:	687c      	ldr	r4, [r7, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800440e:	b29b      	uxth	r3, r3
 8004410:	441c      	add	r4, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	4423      	add	r3, r4
 800441a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800441e:	461c      	mov	r4, r3
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	b29b      	uxth	r3, r3
 8004424:	8023      	strh	r3, [r4, #0]
 8004426:	e10f      	b.n	8004648 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d065      	beq.n	800450a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800443e:	687c      	ldr	r4, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d148      	bne.n	80044da <USB_EPStartXfer+0x12e>
 8004448:	687c      	ldr	r4, [r7, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004450:	b29b      	uxth	r3, r3
 8004452:	441c      	add	r4, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4423      	add	r3, r4
 800445c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004460:	461c      	mov	r4, r3
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10e      	bne.n	8004486 <USB_EPStartXfer+0xda>
 8004468:	8823      	ldrh	r3, [r4, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004470:	b29b      	uxth	r3, r3
 8004472:	8023      	strh	r3, [r4, #0]
 8004474:	8823      	ldrh	r3, [r4, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004480:	b29b      	uxth	r3, r3
 8004482:	8023      	strh	r3, [r4, #0]
 8004484:	e03d      	b.n	8004502 <USB_EPStartXfer+0x156>
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	2b3e      	cmp	r3, #62	; 0x3e
 800448a:	d810      	bhi.n	80044ae <USB_EPStartXfer+0x102>
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <USB_EPStartXfer+0xf6>
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	3301      	adds	r3, #1
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	029b      	lsls	r3, r3, #10
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8023      	strh	r3, [r4, #0]
 80044ac:	e029      	b.n	8004502 <USB_EPStartXfer+0x156>
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <USB_EPStartXfer+0x118>
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	3b01      	subs	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	8023      	strh	r3, [r4, #0]
 80044d8:	e013      	b.n	8004502 <USB_EPStartXfer+0x156>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d10f      	bne.n	8004502 <USB_EPStartXfer+0x156>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	441c      	add	r4, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	4423      	add	r3, r4
 80044f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	895b      	ldrh	r3, [r3, #10]
 8004506:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004508:	e063      	b.n	80045d2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	785b      	ldrb	r3, [r3, #1]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d148      	bne.n	80045a4 <USB_EPStartXfer+0x1f8>
 8004512:	687c      	ldr	r4, [r7, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451a:	b29b      	uxth	r3, r3
 800451c:	441c      	add	r4, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	4423      	add	r3, r4
 8004526:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800452a:	461c      	mov	r4, r3
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10e      	bne.n	8004550 <USB_EPStartXfer+0x1a4>
 8004532:	8823      	ldrh	r3, [r4, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800453a:	b29b      	uxth	r3, r3
 800453c:	8023      	strh	r3, [r4, #0]
 800453e:	8823      	ldrh	r3, [r4, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800454a:	b29b      	uxth	r3, r3
 800454c:	8023      	strh	r3, [r4, #0]
 800454e:	e03d      	b.n	80045cc <USB_EPStartXfer+0x220>
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	2b3e      	cmp	r3, #62	; 0x3e
 8004554:	d810      	bhi.n	8004578 <USB_EPStartXfer+0x1cc>
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <USB_EPStartXfer+0x1c0>
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	3301      	adds	r3, #1
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	b29b      	uxth	r3, r3
 8004570:	029b      	lsls	r3, r3, #10
 8004572:	b29b      	uxth	r3, r3
 8004574:	8023      	strh	r3, [r4, #0]
 8004576:	e029      	b.n	80045cc <USB_EPStartXfer+0x220>
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <USB_EPStartXfer+0x1e2>
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	3b01      	subs	r3, #1
 800458c:	623b      	str	r3, [r7, #32]
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	b29b      	uxth	r3, r3
 8004592:	029b      	lsls	r3, r3, #10
 8004594:	b29b      	uxth	r3, r3
 8004596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459e:	b29b      	uxth	r3, r3
 80045a0:	8023      	strh	r3, [r4, #0]
 80045a2:	e013      	b.n	80045cc <USB_EPStartXfer+0x220>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d10f      	bne.n	80045cc <USB_EPStartXfer+0x220>
 80045ac:	687c      	ldr	r4, [r7, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	441c      	add	r4, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	4423      	add	r3, r4
 80045c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c4:	461c      	mov	r4, r3
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	891b      	ldrh	r3, [r3, #8]
 80045d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6959      	ldr	r1, [r3, #20]
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	b29b      	uxth	r3, r3
 80045da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fab4 	bl	8004b4a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	785b      	ldrb	r3, [r3, #1]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <USB_EPStartXfer+0x26a>
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	b29c      	uxth	r4, r3
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	4b9a      	ldr	r3, [pc, #616]	; (8004878 <USB_EPStartXfer+0x4cc>)
 800460e:	4323      	orrs	r3, r4
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
 8004614:	e018      	b.n	8004648 <USB_EPStartXfer+0x29c>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d114      	bne.n	8004648 <USB_EPStartXfer+0x29c>
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	b29c      	uxth	r4, r3
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	4b8e      	ldr	r3, [pc, #568]	; (800487c <USB_EPStartXfer+0x4d0>)
 8004642:	4323      	orrs	r3, r4
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465e:	b29c      	uxth	r4, r3
 8004660:	f084 0310 	eor.w	r3, r4, #16
 8004664:	b29c      	uxth	r4, r3
 8004666:	f084 0320 	eor.w	r3, r4, #32
 800466a:	b29c      	uxth	r4, r3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	4b82      	ldr	r3, [pc, #520]	; (8004880 <USB_EPStartXfer+0x4d4>)
 8004678:	4323      	orrs	r3, r4
 800467a:	b29b      	uxth	r3, r3
 800467c:	8013      	strh	r3, [r2, #0]
 800467e:	e146      	b.n	800490e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d909      	bls.n	80046a0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	1ad2      	subs	r2, r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	619a      	str	r2, [r3, #24]
 800469e:	e005      	b.n	80046ac <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2200      	movs	r2, #0
 80046aa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	7b1b      	ldrb	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d148      	bne.n	8004746 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80046b4:	687c      	ldr	r4, [r7, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046bc:	b29b      	uxth	r3, r3
 80046be:	441c      	add	r4, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	4423      	add	r3, r4
 80046c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046cc:	461c      	mov	r4, r3
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10e      	bne.n	80046f2 <USB_EPStartXfer+0x346>
 80046d4:	8823      	ldrh	r3, [r4, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8023      	strh	r3, [r4, #0]
 80046e0:	8823      	ldrh	r3, [r4, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8023      	strh	r3, [r4, #0]
 80046f0:	e0f2      	b.n	80048d8 <USB_EPStartXfer+0x52c>
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	2b3e      	cmp	r3, #62	; 0x3e
 80046f6:	d810      	bhi.n	800471a <USB_EPStartXfer+0x36e>
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <USB_EPStartXfer+0x362>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3301      	adds	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	b29b      	uxth	r3, r3
 8004712:	029b      	lsls	r3, r3, #10
 8004714:	b29b      	uxth	r3, r3
 8004716:	8023      	strh	r3, [r4, #0]
 8004718:	e0de      	b.n	80048d8 <USB_EPStartXfer+0x52c>
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <USB_EPStartXfer+0x384>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3b01      	subs	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	b29b      	uxth	r3, r3
 8004734:	029b      	lsls	r3, r3, #10
 8004736:	b29b      	uxth	r3, r3
 8004738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004740:	b29b      	uxth	r3, r3
 8004742:	8023      	strh	r3, [r4, #0]
 8004744:	e0c8      	b.n	80048d8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d148      	bne.n	80047e0 <USB_EPStartXfer+0x434>
 800474e:	687c      	ldr	r4, [r7, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	441c      	add	r4, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4423      	add	r3, r4
 8004762:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004766:	461c      	mov	r4, r3
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10e      	bne.n	800478c <USB_EPStartXfer+0x3e0>
 800476e:	8823      	ldrh	r3, [r4, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004776:	b29b      	uxth	r3, r3
 8004778:	8023      	strh	r3, [r4, #0]
 800477a:	8823      	ldrh	r3, [r4, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004786:	b29b      	uxth	r3, r3
 8004788:	8023      	strh	r3, [r4, #0]
 800478a:	e03d      	b.n	8004808 <USB_EPStartXfer+0x45c>
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	2b3e      	cmp	r3, #62	; 0x3e
 8004790:	d810      	bhi.n	80047b4 <USB_EPStartXfer+0x408>
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <USB_EPStartXfer+0x3fc>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	3301      	adds	r3, #1
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	029b      	lsls	r3, r3, #10
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	8023      	strh	r3, [r4, #0]
 80047b2:	e029      	b.n	8004808 <USB_EPStartXfer+0x45c>
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <USB_EPStartXfer+0x41e>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	029b      	lsls	r3, r3, #10
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8023      	strh	r3, [r4, #0]
 80047de:	e013      	b.n	8004808 <USB_EPStartXfer+0x45c>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10f      	bne.n	8004808 <USB_EPStartXfer+0x45c>
 80047e8:	687c      	ldr	r4, [r7, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	441c      	add	r4, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	4423      	add	r3, r4
 80047fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004800:	461c      	mov	r4, r3
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	b29b      	uxth	r3, r3
 8004806:	8023      	strh	r3, [r4, #0]
 8004808:	687c      	ldr	r4, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d14e      	bne.n	80048b0 <USB_EPStartXfer+0x504>
 8004812:	687c      	ldr	r4, [r7, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481a:	b29b      	uxth	r3, r3
 800481c:	441c      	add	r4, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	4423      	add	r3, r4
 8004826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800482a:	461c      	mov	r4, r3
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10e      	bne.n	8004850 <USB_EPStartXfer+0x4a4>
 8004832:	8823      	ldrh	r3, [r4, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800483a:	b29b      	uxth	r3, r3
 800483c:	8023      	strh	r3, [r4, #0]
 800483e:	8823      	ldrh	r3, [r4, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484a:	b29b      	uxth	r3, r3
 800484c:	8023      	strh	r3, [r4, #0]
 800484e:	e043      	b.n	80048d8 <USB_EPStartXfer+0x52c>
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	2b3e      	cmp	r3, #62	; 0x3e
 8004854:	d816      	bhi.n	8004884 <USB_EPStartXfer+0x4d8>
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <USB_EPStartXfer+0x4c0>
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	3301      	adds	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	b29b      	uxth	r3, r3
 8004870:	029b      	lsls	r3, r3, #10
 8004872:	b29b      	uxth	r3, r3
 8004874:	8023      	strh	r3, [r4, #0]
 8004876:	e02f      	b.n	80048d8 <USB_EPStartXfer+0x52c>
 8004878:	ffff80c0 	.word	0xffff80c0
 800487c:	ffffc080 	.word	0xffffc080
 8004880:	ffff8080 	.word	0xffff8080
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <USB_EPStartXfer+0x4ee>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	3b01      	subs	r3, #1
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	b29b      	uxth	r3, r3
 800489e:	029b      	lsls	r3, r3, #10
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8023      	strh	r3, [r4, #0]
 80048ae:	e013      	b.n	80048d8 <USB_EPStartXfer+0x52c>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10f      	bne.n	80048d8 <USB_EPStartXfer+0x52c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	441c      	add	r4, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	4423      	add	r3, r4
 80048ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	b29c      	uxth	r4, r3
 80048f0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80048f4:	b29c      	uxth	r4, r3
 80048f6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80048fa:	b29c      	uxth	r4, r3
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	4b04      	ldr	r3, [pc, #16]	; (8004918 <USB_EPStartXfer+0x56c>)
 8004908:	4323      	orrs	r3, r4
 800490a:	b29b      	uxth	r3, r3
 800490c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3734      	adds	r7, #52	; 0x34
 8004914:	46bd      	mov	sp, r7
 8004916:	bd90      	pop	{r4, r7, pc}
 8004918:	ffff8080 	.word	0xffff8080

0800491c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800491c:	b490      	push	{r4, r7}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004944:	b29c      	uxth	r4, r3
 8004946:	f084 0310 	eor.w	r3, r4, #16
 800494a:	b29c      	uxth	r4, r3
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	4b11      	ldr	r3, [pc, #68]	; (800499c <USB_EPSetStall+0x80>)
 8004958:	4323      	orrs	r3, r4
 800495a:	b29b      	uxth	r3, r3
 800495c:	8013      	strh	r3, [r2, #0]
 800495e:	e017      	b.n	8004990 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	b29c      	uxth	r4, r3
 8004978:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800497c:	b29c      	uxth	r4, r3
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	4b04      	ldr	r3, [pc, #16]	; (800499c <USB_EPSetStall+0x80>)
 800498a:	4323      	orrs	r3, r4
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bc90      	pop	{r4, r7}
 800499a:	4770      	bx	lr
 800499c:	ffff8080 	.word	0xffff8080

080049a0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049a0:	b490      	push	{r4, r7}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	7b1b      	ldrb	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d17d      	bne.n	8004aae <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03d      	beq.n	8004a36 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29c      	uxth	r4, r3
 80049c8:	4623      	mov	r3, r4
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d014      	beq.n	80049fc <USB_EPClearStall+0x5c>
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e8:	b29c      	uxth	r4, r3
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	4b31      	ldr	r3, [pc, #196]	; (8004abc <USB_EPClearStall+0x11c>)
 80049f6:	4323      	orrs	r3, r4
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	78db      	ldrb	r3, [r3, #3]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d054      	beq.n	8004aae <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1a:	b29c      	uxth	r4, r3
 8004a1c:	f084 0320 	eor.w	r3, r4, #32
 8004a20:	b29c      	uxth	r4, r3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <USB_EPClearStall+0x120>)
 8004a2e:	4323      	orrs	r3, r4
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	8013      	strh	r3, [r2, #0]
 8004a34:	e03b      	b.n	8004aae <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29c      	uxth	r4, r3
 8004a44:	4623      	mov	r3, r4
 8004a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d014      	beq.n	8004a78 <USB_EPClearStall+0xd8>
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	b29c      	uxth	r4, r3
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	441a      	add	r2, r3
 8004a70:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <USB_EPClearStall+0x124>)
 8004a72:	4323      	orrs	r3, r4
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	b29c      	uxth	r4, r3
 8004a90:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004a94:	b29c      	uxth	r4, r3
 8004a96:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004a9a:	b29c      	uxth	r4, r3
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <USB_EPClearStall+0x120>)
 8004aa8:	4323      	orrs	r3, r4
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc90      	pop	{r4, r7}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	ffff80c0 	.word	0xffff80c0
 8004ac0:	ffff8080 	.word	0xffff8080
 8004ac4:	ffffc080 	.word	0xffffc080

08004ac8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2280      	movs	r2, #128	; 0x80
 8004ade:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b08d      	sub	sp, #52	; 0x34
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	4611      	mov	r1, r2
 8004b56:	461a      	mov	r2, r3
 8004b58:	460b      	mov	r3, r1
 8004b5a:	80fb      	strh	r3, [r7, #6]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004b60:	88bb      	ldrh	r3, [r7, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	005a      	lsls	r2, r3, #1
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b82:	e01e      	b.n	8004bc2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	3302      	adds	r3, #2
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	3301      	adds	r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1dd      	bne.n	8004b84 <USB_WritePMA+0x3a>
  }
}
 8004bc8:	bf00      	nop
 8004bca:	3734      	adds	r7, #52	; 0x34
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b08b      	sub	sp, #44	; 0x2c
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	461a      	mov	r2, r3
 8004be0:	460b      	mov	r3, r1
 8004be2:	80fb      	strh	r3, [r7, #6]
 8004be4:	4613      	mov	r3, r2
 8004be6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004be8:	88bb      	ldrh	r3, [r7, #4]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	005a      	lsls	r2, r3, #1
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c04:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	e01b      	b.n	8004c44 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	3302      	adds	r3, #2
 8004c18:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3301      	adds	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	3b01      	subs	r3, #1
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e0      	bne.n	8004c0c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004c4a:	88bb      	ldrh	r3, [r7, #4]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	701a      	strb	r2, [r3, #0]
  }
}
 8004c66:	bf00      	nop
 8004c68:	372c      	adds	r7, #44	; 0x2c
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7c1b      	ldrb	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d115      	bne.n	8004cb4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	2181      	movs	r1, #129	; 0x81
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f001 fe16 	bl	80068c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 fe0c 	bl	80068c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004cb2:	e012      	b.n	8004cda <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	2181      	movs	r1, #129	; 0x81
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 fe01 	bl	80068c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cc6:	2340      	movs	r3, #64	; 0x40
 8004cc8:	2202      	movs	r2, #2
 8004cca:	2101      	movs	r1, #1
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 fdf8 	bl	80068c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cda:	2308      	movs	r3, #8
 8004cdc:	2203      	movs	r2, #3
 8004cde:	2182      	movs	r1, #130	; 0x82
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 fdee 	bl	80068c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004cf0:	f001 ff08 	bl	8006b04 <USBD_static_malloc>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	e026      	b.n	8004d5a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d12:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7c1b      	ldrb	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d40:	2101      	movs	r1, #1
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 fea7 	bl	8006a96 <USBD_LL_PrepareReceive>
 8004d48:	e007      	b.n	8004d5a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	2101      	movs	r1, #1
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 fe9e 	bl	8006a96 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004d74:	2181      	movs	r1, #129	; 0x81
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 fdc9 	bl	800690e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004d82:	2101      	movs	r1, #1
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 fdc2 	bl	800690e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004d92:	2182      	movs	r1, #130	; 0x82
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f001 fdba 	bl	800690e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00e      	beq.n	8004dc8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f001 feae 	bl	8006b1c <USBD_static_free>
    pdev->pClassData = NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d039      	beq.n	8004e70 <USBD_CDC_Setup+0x9e>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d17c      	bne.n	8004efa <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	88db      	ldrh	r3, [r3, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d029      	beq.n	8004e5c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da11      	bge.n	8004e36 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004e1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	88d2      	ldrh	r2, [r2, #6]
 8004e24:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e26:	6939      	ldr	r1, [r7, #16]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	88db      	ldrh	r3, [r3, #6]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 f9c6 	bl	80061c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004e34:	e068      	b.n	8004f08 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	785a      	ldrb	r2, [r3, #1]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	88db      	ldrh	r3, [r3, #6]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e4c:	6939      	ldr	r1, [r7, #16]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	88db      	ldrh	r3, [r3, #6]
 8004e52:	461a      	mov	r2, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 f9e1 	bl	800621c <USBD_CtlPrepareRx>
      break;
 8004e5a:	e055      	b.n	8004f08 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	7850      	ldrb	r0, [r2, #1]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	4798      	blx	r3
      break;
 8004e6e:	e04b      	b.n	8004f08 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b0a      	cmp	r3, #10
 8004e76:	d017      	beq.n	8004ea8 <USBD_CDC_Setup+0xd6>
 8004e78:	2b0b      	cmp	r3, #11
 8004e7a:	d029      	beq.n	8004ed0 <USBD_CDC_Setup+0xfe>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d133      	bne.n	8004ee8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d107      	bne.n	8004e9a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004e8a:	f107 030c 	add.w	r3, r7, #12
 8004e8e:	2202      	movs	r2, #2
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f001 f994 	bl	80061c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e98:	e02e      	b.n	8004ef8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 f925 	bl	80060ec <USBD_CtlError>
            ret = USBD_FAIL;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ea6:	e027      	b.n	8004ef8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d107      	bne.n	8004ec2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004eb2:	f107 030f 	add.w	r3, r7, #15
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 f980 	bl	80061c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ec0:	e01a      	b.n	8004ef8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 f911 	bl	80060ec <USBD_CtlError>
            ret = USBD_FAIL;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ece:	e013      	b.n	8004ef8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d00d      	beq.n	8004ef6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 f905 	bl	80060ec <USBD_CtlError>
            ret = USBD_FAIL;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ee6:	e006      	b.n	8004ef6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f001 f8fe 	bl	80060ec <USBD_CtlError>
          ret = USBD_FAIL;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	75fb      	strb	r3, [r7, #23]
          break;
 8004ef4:	e000      	b.n	8004ef8 <USBD_CDC_Setup+0x126>
          break;
 8004ef6:	bf00      	nop
      }
      break;
 8004ef8:	e006      	b.n	8004f08 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f001 f8f5 	bl	80060ec <USBD_CtlError>
      ret = USBD_FAIL;
 8004f02:	2302      	movs	r3, #2
 8004f04:	75fb      	strb	r3, [r7, #23]
      break;
 8004f06:	bf00      	nop
  }

  return ret;
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f24:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f2c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d037      	beq.n	8004fa8 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	331c      	adds	r3, #28
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d026      	beq.n	8004f9c <USBD_CDC_DataIn+0x8a>
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	331c      	adds	r3, #28
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	0152      	lsls	r2, r2, #5
 8004f66:	440a      	add	r2, r1
 8004f68:	3238      	adds	r2, #56	; 0x38
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f70:	fb02 f201 	mul.w	r2, r2, r1
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d110      	bne.n	8004f9c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	331c      	adds	r3, #28
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f8e:	78f9      	ldrb	r1, [r7, #3]
 8004f90:	2300      	movs	r3, #0
 8004f92:	2200      	movs	r2, #0
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f001 fd5b 	bl	8006a50 <USBD_LL_Transmit>
 8004f9a:	e003      	b.n	8004fa4 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fd86 	bl	8006adc <USBD_LL_GetRxDataSize>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00d      	beq.n	8004ffe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4798      	blx	r3

    return USBD_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004ffe:	2302      	movs	r3, #2
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005016:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800501e:	2b00      	cmp	r3, #0
 8005020:	d015      	beq.n	800504e <USBD_CDC_EP0_RxReady+0x46>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005028:	2bff      	cmp	r3, #255	; 0xff
 800502a:	d010      	beq.n	800504e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800503a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005042:	b292      	uxth	r2, r2
 8005044:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	22ff      	movs	r2, #255	; 0xff
 800504a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2243      	movs	r2, #67	; 0x43
 8005064:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000094 	.word	0x20000094

08005078 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2243      	movs	r2, #67	; 0x43
 8005084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005086:	4b03      	ldr	r3, [pc, #12]	; (8005094 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000050 	.word	0x20000050

08005098 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2243      	movs	r2, #67	; 0x43
 80050a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80050a6:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	200000d8 	.word	0x200000d8

080050b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	220a      	movs	r2, #10
 80050c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80050c6:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c

080050d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80050e2:	2302      	movs	r3, #2
 80050e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005118:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005146:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d017      	beq.n	80051a6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	7c1b      	ldrb	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005188:	2101      	movs	r1, #1
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 fc83 	bl	8006a96 <USBD_LL_PrepareReceive>
 8005190:	e007      	b.n	80051a2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	2101      	movs	r1, #1
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f001 fc7a 	bl	8006a96 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80051a6:	2302      	movs	r3, #2
  }
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80051c4:	2302      	movs	r3, #2
 80051c6:	e01a      	b.n	80051fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	79fa      	ldrb	r2, [r7, #7]
 80051f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f001 faee 	bl	80067d8 <USBD_LL_Init>

  return USBD_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e001      	b.n	800522c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005228:	2302      	movs	r3, #2
 800522a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f001 fb23 	bl	800688c <USBD_LL_Start>

  return USBD_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005270:	2302      	movs	r3, #2
 8005272:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	4611      	mov	r1, r2
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	4611      	mov	r1, r2
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3

  return USBD_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 feca 	bl	8006074 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80052ee:	461a      	mov	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	2b01      	cmp	r3, #1
 8005302:	d00c      	beq.n	800531e <USBD_LL_SetupStage+0x56>
 8005304:	2b01      	cmp	r3, #1
 8005306:	d302      	bcc.n	800530e <USBD_LL_SetupStage+0x46>
 8005308:	2b02      	cmp	r3, #2
 800530a:	d010      	beq.n	800532e <USBD_LL_SetupStage+0x66>
 800530c:	e017      	b.n	800533e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f9ca 	bl	80056b0 <USBD_StdDevReq>
      break;
 800531c:	e01a      	b.n	8005354 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa2c 	bl	8005784 <USBD_StdItfReq>
      break;
 800532c:	e012      	b.n	8005354 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa6a 	bl	8005810 <USBD_StdEPReq>
      break;
 800533c:	e00a      	b.n	8005354 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005348:	b2db      	uxtb	r3, r3
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 fafd 	bl	800694c <USBD_LL_StallEP>
      break;
 8005352:	bf00      	nop
  }

  return USBD_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b086      	sub	sp, #24
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	460b      	mov	r3, r1
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800536c:	7afb      	ldrb	r3, [r7, #11]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d14b      	bne.n	800540a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005378:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005380:	2b03      	cmp	r3, #3
 8005382:	d134      	bne.n	80053ee <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	429a      	cmp	r2, r3
 800538e:	d919      	bls.n	80053c4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	1ad2      	subs	r2, r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d203      	bcs.n	80053b2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	e002      	b.n	80053b8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 ff4b 	bl	8006258 <USBD_CtlContinueRx>
 80053c2:	e038      	b.n	8005436 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d105      	bne.n	80053e6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 ff48 	bl	800627c <USBD_CtlSendStatus>
 80053ec:	e023      	b.n	8005436 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053f4:	2b05      	cmp	r3, #5
 80053f6:	d11e      	bne.n	8005436 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005400:	2100      	movs	r1, #0
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f001 faa2 	bl	800694c <USBD_LL_StallEP>
 8005408:	e015      	b.n	8005436 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800541c:	2b03      	cmp	r3, #3
 800541e:	d108      	bne.n	8005432 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	7afa      	ldrb	r2, [r7, #11]
 800542a:	4611      	mov	r1, r2
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	4798      	blx	r3
 8005430:	e001      	b.n	8005436 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005432:	2302      	movs	r3, #2
 8005434:	e000      	b.n	8005438 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	460b      	mov	r3, r1
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800544e:	7afb      	ldrb	r3, [r7, #11]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d17f      	bne.n	8005554 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3314      	adds	r3, #20
 8005458:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005460:	2b02      	cmp	r3, #2
 8005462:	d15c      	bne.n	800551e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	429a      	cmp	r2, r3
 800546e:	d915      	bls.n	800549c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 feb5 	bl	80061f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800548e:	2300      	movs	r3, #0
 8005490:	2200      	movs	r2, #0
 8005492:	2100      	movs	r1, #0
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f001 fafe 	bl	8006a96 <USBD_LL_PrepareReceive>
 800549a:	e04e      	b.n	800553a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	6912      	ldr	r2, [r2, #16]
 80054a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80054a8:	fb02 f201 	mul.w	r2, r2, r1
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d11c      	bne.n	80054ec <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d316      	bcc.n	80054ec <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d20f      	bcs.n	80054ec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80054cc:	2200      	movs	r2, #0
 80054ce:	2100      	movs	r1, #0
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fe91 	bl	80061f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054de:	2300      	movs	r3, #0
 80054e0:	2200      	movs	r2, #0
 80054e2:	2100      	movs	r1, #0
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f001 fad6 	bl	8006a96 <USBD_LL_PrepareReceive>
 80054ea:	e026      	b.n	800553a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d105      	bne.n	800550e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800550e:	2180      	movs	r1, #128	; 0x80
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f001 fa1b 	bl	800694c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 fec3 	bl	80062a2 <USBD_CtlReceiveStatus>
 800551c:	e00d      	b.n	800553a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005524:	2b04      	cmp	r3, #4
 8005526:	d004      	beq.n	8005532 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f001 fa09 	bl	800694c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005540:	2b01      	cmp	r3, #1
 8005542:	d11d      	bne.n	8005580 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff fe83 	bl	8005250 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005552:	e015      	b.n	8005580 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005566:	2b03      	cmp	r3, #3
 8005568:	d108      	bne.n	800557c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	7afa      	ldrb	r2, [r7, #11]
 8005574:	4611      	mov	r1, r2
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	4798      	blx	r3
 800557a:	e001      	b.n	8005580 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800557c:	2302      	movs	r3, #2
 800557e:	e000      	b.n	8005582 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005592:	2340      	movs	r3, #64	; 0x40
 8005594:	2200      	movs	r2, #0
 8005596:	2100      	movs	r1, #0
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 f992 	bl	80068c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2240      	movs	r2, #64	; 0x40
 80055aa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055ae:	2340      	movs	r3, #64	; 0x40
 80055b0:	2200      	movs	r2, #0
 80055b2:	2180      	movs	r1, #128	; 0x80
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 f984 	bl	80068c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2240      	movs	r2, #64	; 0x40
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6852      	ldr	r2, [r2, #4]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	4611      	mov	r1, r2
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4798      	blx	r3
  }

  return USBD_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2204      	movs	r2, #4
 8005642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005660:	2b04      	cmp	r3, #4
 8005662:	d105      	bne.n	8005670 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568a:	2b03      	cmp	r3, #3
 800568c:	d10b      	bne.n	80056a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d004      	beq.n	80056d4 <USBD_StdDevReq+0x24>
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d002      	beq.n	80056d4 <USBD_StdDevReq+0x24>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <USBD_StdDevReq+0x34>
 80056d2:	e04c      	b.n	800576e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
      break;
 80056e2:	e049      	b.n	8005778 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b09      	cmp	r3, #9
 80056ea:	d83a      	bhi.n	8005762 <USBD_StdDevReq+0xb2>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <USBD_StdDevReq+0x44>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005759 	.word	0x08005759
 80056fc:	08005763 	.word	0x08005763
 8005700:	0800574f 	.word	0x0800574f
 8005704:	08005763 	.word	0x08005763
 8005708:	08005727 	.word	0x08005727
 800570c:	0800571d 	.word	0x0800571d
 8005710:	08005763 	.word	0x08005763
 8005714:	0800573b 	.word	0x0800573b
 8005718:	08005731 	.word	0x08005731
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f9d4 	bl	8005acc <USBD_GetDescriptor>
          break;
 8005724:	e022      	b.n	800576c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fb37 	bl	8005d9c <USBD_SetAddress>
          break;
 800572e:	e01d      	b.n	800576c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fb74 	bl	8005e20 <USBD_SetConfig>
          break;
 8005738:	e018      	b.n	800576c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fbfd 	bl	8005f3c <USBD_GetConfig>
          break;
 8005742:	e013      	b.n	800576c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fc2c 	bl	8005fa4 <USBD_GetStatus>
          break;
 800574c:	e00e      	b.n	800576c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fc5a 	bl	800600a <USBD_SetFeature>
          break;
 8005756:	e009      	b.n	800576c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fc69 	bl	8006032 <USBD_ClrFeature>
          break;
 8005760:	e004      	b.n	800576c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fcc1 	bl	80060ec <USBD_CtlError>
          break;
 800576a:	bf00      	nop
      }
      break;
 800576c:	e004      	b.n	8005778 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fcbb 	bl	80060ec <USBD_CtlError>
      break;
 8005776:	bf00      	nop
  }

  return ret;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop

08005784 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800579a:	2b20      	cmp	r3, #32
 800579c:	d003      	beq.n	80057a6 <USBD_StdItfReq+0x22>
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d001      	beq.n	80057a6 <USBD_StdItfReq+0x22>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d12a      	bne.n	80057fc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ac:	3b01      	subs	r3, #1
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d81d      	bhi.n	80057ee <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	889b      	ldrh	r3, [r3, #4]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d813      	bhi.n	80057e4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	88db      	ldrh	r3, [r3, #6]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d110      	bne.n	80057f8 <USBD_StdItfReq+0x74>
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10d      	bne.n	80057f8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fd4d 	bl	800627c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80057e2:	e009      	b.n	80057f8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fc80 	bl	80060ec <USBD_CtlError>
          break;
 80057ec:	e004      	b.n	80057f8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fc7b 	bl	80060ec <USBD_CtlError>
          break;
 80057f6:	e000      	b.n	80057fa <USBD_StdItfReq+0x76>
          break;
 80057f8:	bf00      	nop
      }
      break;
 80057fa:	e004      	b.n	8005806 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fc74 	bl	80060ec <USBD_CtlError>
      break;
 8005804:	bf00      	nop
  }

  return USBD_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	889b      	ldrh	r3, [r3, #4]
 8005822:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800582c:	2b20      	cmp	r3, #32
 800582e:	d004      	beq.n	800583a <USBD_StdEPReq+0x2a>
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d002      	beq.n	800583a <USBD_StdEPReq+0x2a>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <USBD_StdEPReq+0x3a>
 8005838:	e13d      	b.n	8005ab6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
      break;
 8005848:	e13a      	b.n	8005ac0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005852:	2b20      	cmp	r3, #32
 8005854:	d10a      	bne.n	800586c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	e12a      	b.n	8005ac2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d03e      	beq.n	80058f2 <USBD_StdEPReq+0xe2>
 8005874:	2b03      	cmp	r3, #3
 8005876:	d002      	beq.n	800587e <USBD_StdEPReq+0x6e>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d070      	beq.n	800595e <USBD_StdEPReq+0x14e>
 800587c:	e115      	b.n	8005aaa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005884:	2b02      	cmp	r3, #2
 8005886:	d002      	beq.n	800588e <USBD_StdEPReq+0x7e>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d015      	beq.n	80058b8 <USBD_StdEPReq+0xa8>
 800588c:	e02b      	b.n	80058e6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00c      	beq.n	80058ae <USBD_StdEPReq+0x9e>
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	d009      	beq.n	80058ae <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 f854 	bl	800694c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 f850 	bl	800694c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058ac:	e020      	b.n	80058f0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fc1b 	bl	80060ec <USBD_CtlError>
              break;
 80058b6:	e01b      	b.n	80058f0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	885b      	ldrh	r3, [r3, #2]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10e      	bne.n	80058de <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <USBD_StdEPReq+0xce>
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	2b80      	cmp	r3, #128	; 0x80
 80058ca:	d008      	beq.n	80058de <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	88db      	ldrh	r3, [r3, #6]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 f837 	bl	800694c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fccc 	bl	800627c <USBD_CtlSendStatus>

              break;
 80058e4:	e004      	b.n	80058f0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fbff 	bl	80060ec <USBD_CtlError>
              break;
 80058ee:	bf00      	nop
          }
          break;
 80058f0:	e0e0      	b.n	8005ab4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d002      	beq.n	8005902 <USBD_StdEPReq+0xf2>
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d015      	beq.n	800592c <USBD_StdEPReq+0x11c>
 8005900:	e026      	b.n	8005950 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <USBD_StdEPReq+0x112>
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d009      	beq.n	8005922 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 f81a 	bl	800694c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 f816 	bl	800694c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005920:	e01c      	b.n	800595c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fbe1 	bl	80060ec <USBD_CtlError>
              break;
 800592a:	e017      	b.n	800595c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	885b      	ldrh	r3, [r3, #2]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d112      	bne.n	800595a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f821 	bl	800698a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fc97 	bl	800627c <USBD_CtlSendStatus>
              }
              break;
 800594e:	e004      	b.n	800595a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fbca 	bl	80060ec <USBD_CtlError>
              break;
 8005958:	e000      	b.n	800595c <USBD_StdEPReq+0x14c>
              break;
 800595a:	bf00      	nop
          }
          break;
 800595c:	e0aa      	b.n	8005ab4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005964:	2b02      	cmp	r3, #2
 8005966:	d002      	beq.n	800596e <USBD_StdEPReq+0x15e>
 8005968:	2b03      	cmp	r3, #3
 800596a:	d032      	beq.n	80059d2 <USBD_StdEPReq+0x1c2>
 800596c:	e097      	b.n	8005a9e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <USBD_StdEPReq+0x174>
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	2b80      	cmp	r3, #128	; 0x80
 8005978:	d004      	beq.n	8005984 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fbb5 	bl	80060ec <USBD_CtlError>
                break;
 8005982:	e091      	b.n	8005aa8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005988:	2b00      	cmp	r3, #0
 800598a:	da0b      	bge.n	80059a4 <USBD_StdEPReq+0x194>
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	3310      	adds	r3, #16
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	3304      	adds	r3, #4
 80059a2:	e00b      	b.n	80059bc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2202      	movs	r2, #2
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fbf8 	bl	80061c0 <USBD_CtlSendData>
              break;
 80059d0:	e06a      	b.n	8005aa8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da11      	bge.n	80059fe <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	3318      	adds	r3, #24
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d117      	bne.n	8005a24 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fb78 	bl	80060ec <USBD_CtlError>
                  break;
 80059fc:	e054      	b.n	8005aa8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb65 	bl	80060ec <USBD_CtlError>
                  break;
 8005a22:	e041      	b.n	8005aa8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da0b      	bge.n	8005a44 <USBD_StdEPReq+0x234>
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	3310      	adds	r3, #16
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	4413      	add	r3, r2
 8005a40:	3304      	adds	r3, #4
 8005a42:	e00b      	b.n	8005a5c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a5e:	7bbb      	ldrb	r3, [r7, #14]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <USBD_StdEPReq+0x25a>
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d103      	bne.n	8005a72 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	e00e      	b.n	8005a90 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 ffa6 	bl	80069c8 <USBD_LL_IsStallEP>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e002      	b.n	8005a90 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2202      	movs	r2, #2
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb92 	bl	80061c0 <USBD_CtlSendData>
              break;
 8005a9c:	e004      	b.n	8005aa8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fb23 	bl	80060ec <USBD_CtlError>
              break;
 8005aa6:	bf00      	nop
          }
          break;
 8005aa8:	e004      	b.n	8005ab4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fb1d 	bl	80060ec <USBD_CtlError>
          break;
 8005ab2:	bf00      	nop
      }
      break;
 8005ab4:	e004      	b.n	8005ac0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fb17 	bl	80060ec <USBD_CtlError>
      break;
 8005abe:	bf00      	nop
  }

  return ret;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	885b      	ldrh	r3, [r3, #2]
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	2b06      	cmp	r3, #6
 8005aee:	f200 8128 	bhi.w	8005d42 <USBD_GetDescriptor+0x276>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <USBD_GetDescriptor+0x2c>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b15 	.word	0x08005b15
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005b6d 	.word	0x08005b6d
 8005b04:	08005d43 	.word	0x08005d43
 8005b08:	08005d43 	.word	0x08005d43
 8005b0c:	08005ce3 	.word	0x08005ce3
 8005b10:	08005d0f 	.word	0x08005d0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	7c12      	ldrb	r2, [r2, #16]
 8005b20:	f107 0108 	add.w	r1, r7, #8
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
 8005b28:	60f8      	str	r0, [r7, #12]
      break;
 8005b2a:	e112      	b.n	8005d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	7c1b      	ldrb	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10d      	bne.n	8005b50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	f107 0208 	add.w	r2, r7, #8
 8005b40:	4610      	mov	r0, r2
 8005b42:	4798      	blx	r3
 8005b44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b4e:	e100      	b.n	8005d52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f107 0208 	add.w	r2, r7, #8
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4798      	blx	r3
 8005b60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3301      	adds	r3, #1
 8005b66:	2202      	movs	r2, #2
 8005b68:	701a      	strb	r2, [r3, #0]
      break;
 8005b6a:	e0f2      	b.n	8005d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	885b      	ldrh	r3, [r3, #2]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	f200 80ac 	bhi.w	8005cd0 <USBD_GetDescriptor+0x204>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <USBD_GetDescriptor+0xb4>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005bcd 	.word	0x08005bcd
 8005b88:	08005c01 	.word	0x08005c01
 8005b8c:	08005c35 	.word	0x08005c35
 8005b90:	08005c69 	.word	0x08005c69
 8005b94:	08005c9d 	.word	0x08005c9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	7c12      	ldrb	r2, [r2, #16]
 8005bb0:	f107 0108 	add.w	r1, r7, #8
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bba:	e091      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa94 	bl	80060ec <USBD_CtlError>
            err++;
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bca:	e089      	b.n	8005ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	7c12      	ldrb	r2, [r2, #16]
 8005be4:	f107 0108 	add.w	r1, r7, #8
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bee:	e077      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa7a 	bl	80060ec <USBD_CtlError>
            err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bfe:	e06f      	b.n	8005ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	7c12      	ldrb	r2, [r2, #16]
 8005c18:	f107 0108 	add.w	r1, r7, #8
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
 8005c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c22:	e05d      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa60 	bl	80060ec <USBD_CtlError>
            err++;
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	72fb      	strb	r3, [r7, #11]
          break;
 8005c32:	e055      	b.n	8005ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	7c12      	ldrb	r2, [r2, #16]
 8005c4c:	f107 0108 	add.w	r1, r7, #8
 8005c50:	4610      	mov	r0, r2
 8005c52:	4798      	blx	r3
 8005c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c56:	e043      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fa46 	bl	80060ec <USBD_CtlError>
            err++;
 8005c60:	7afb      	ldrb	r3, [r7, #11]
 8005c62:	3301      	adds	r3, #1
 8005c64:	72fb      	strb	r3, [r7, #11]
          break;
 8005c66:	e03b      	b.n	8005ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	7c12      	ldrb	r2, [r2, #16]
 8005c80:	f107 0108 	add.w	r1, r7, #8
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c8a:	e029      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa2c 	bl	80060ec <USBD_CtlError>
            err++;
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	3301      	adds	r3, #1
 8005c98:	72fb      	strb	r3, [r7, #11]
          break;
 8005c9a:	e021      	b.n	8005ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	7c12      	ldrb	r2, [r2, #16]
 8005cb4:	f107 0108 	add.w	r1, r7, #8
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cbe:	e00f      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa12 	bl	80060ec <USBD_CtlError>
            err++;
 8005cc8:	7afb      	ldrb	r3, [r7, #11]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cce:	e007      	b.n	8005ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa0a 	bl	80060ec <USBD_CtlError>
          err++;
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005cde:	e038      	b.n	8005d52 <USBD_GetDescriptor+0x286>
 8005ce0:	e037      	b.n	8005d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	7c1b      	ldrb	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	f107 0208 	add.w	r2, r7, #8
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4798      	blx	r3
 8005cfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cfc:	e029      	b.n	8005d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f9f3 	bl	80060ec <USBD_CtlError>
        err++;
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d0c:	e021      	b.n	8005d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7c1b      	ldrb	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10d      	bne.n	8005d32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f107 0208 	add.w	r2, r7, #8
 8005d22:	4610      	mov	r0, r2
 8005d24:	4798      	blx	r3
 8005d26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	2207      	movs	r2, #7
 8005d2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d30:	e00f      	b.n	8005d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f9d9 	bl	80060ec <USBD_CtlError>
        err++;
 8005d3a:	7afb      	ldrb	r3, [r7, #11]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d40:	e007      	b.n	8005d52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f9d1 	bl	80060ec <USBD_CtlError>
      err++;
 8005d4a:	7afb      	ldrb	r3, [r7, #11]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d50:	bf00      	nop
  }

  if (err != 0U)
 8005d52:	7afb      	ldrb	r3, [r7, #11]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11c      	bne.n	8005d92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005d58:	893b      	ldrh	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d011      	beq.n	8005d82 <USBD_GetDescriptor+0x2b6>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	88db      	ldrh	r3, [r3, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	88da      	ldrh	r2, [r3, #6]
 8005d6a:	893b      	ldrh	r3, [r7, #8]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bf28      	it	cs
 8005d70:	4613      	movcs	r3, r2
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d76:	893b      	ldrh	r3, [r7, #8]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fa1f 	bl	80061c0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa76 	bl	800627c <USBD_CtlSendStatus>
 8005d90:	e000      	b.n	8005d94 <USBD_GetDescriptor+0x2c8>
    return;
 8005d92:	bf00      	nop
    }
  }
}
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop

08005d9c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	889b      	ldrh	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d130      	bne.n	8005e10 <USBD_SetAddress+0x74>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	88db      	ldrh	r3, [r3, #6]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d12c      	bne.n	8005e10 <USBD_SetAddress+0x74>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	885b      	ldrh	r3, [r3, #2]
 8005dba:	2b7f      	cmp	r3, #127	; 0x7f
 8005dbc:	d828      	bhi.n	8005e10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	885b      	ldrh	r3, [r3, #2]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d104      	bne.n	8005dde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f988 	bl	80060ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ddc:	e01c      	b.n	8005e18 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	7bfa      	ldrb	r2, [r7, #15]
 8005de2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fe11 	bl	8006a12 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa43 	bl	800627c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e04:	e008      	b.n	8005e18 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0e:	e003      	b.n	8005e18 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f96a 	bl	80060ec <USBD_CtlError>
  }
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	885b      	ldrh	r3, [r3, #2]
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	4b41      	ldr	r3, [pc, #260]	; (8005f38 <USBD_SetConfig+0x118>)
 8005e32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e34:	4b40      	ldr	r3, [pc, #256]	; (8005f38 <USBD_SetConfig+0x118>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d904      	bls.n	8005e46 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f954 	bl	80060ec <USBD_CtlError>
 8005e44:	e075      	b.n	8005f32 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d002      	beq.n	8005e56 <USBD_SetConfig+0x36>
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d023      	beq.n	8005e9c <USBD_SetConfig+0x7c>
 8005e54:	e062      	b.n	8005f1c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005e56:	4b38      	ldr	r3, [pc, #224]	; (8005f38 <USBD_SetConfig+0x118>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01a      	beq.n	8005e94 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005e5e:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <USBD_SetConfig+0x118>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e70:	4b31      	ldr	r3, [pc, #196]	; (8005f38 <USBD_SetConfig+0x118>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff f9f4 	bl	8005264 <USBD_SetClassConfig>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d104      	bne.n	8005e8c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f931 	bl	80060ec <USBD_CtlError>
            return;
 8005e8a:	e052      	b.n	8005f32 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f9f5 	bl	800627c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005e92:	e04e      	b.n	8005f32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f9f1 	bl	800627c <USBD_CtlSendStatus>
        break;
 8005e9a:	e04a      	b.n	8005f32 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005e9c:	4b26      	ldr	r3, [pc, #152]	; (8005f38 <USBD_SetConfig+0x118>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d112      	bne.n	8005eca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005eac:	4b22      	ldr	r3, [pc, #136]	; (8005f38 <USBD_SetConfig+0x118>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005eb6:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <USBD_SetConfig+0x118>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff f9f0 	bl	80052a2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f9da 	bl	800627c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005ec8:	e033      	b.n	8005f32 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <USBD_SetConfig+0x118>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d01d      	beq.n	8005f14 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff f9de 	bl	80052a2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <USBD_SetConfig+0x118>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ef0:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <USBD_SetConfig+0x118>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff f9b4 	bl	8005264 <USBD_SetClassConfig>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d104      	bne.n	8005f0c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8f1 	bl	80060ec <USBD_CtlError>
            return;
 8005f0a:	e012      	b.n	8005f32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f9b5 	bl	800627c <USBD_CtlSendStatus>
        break;
 8005f12:	e00e      	b.n	8005f32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f9b1 	bl	800627c <USBD_CtlSendStatus>
        break;
 8005f1a:	e00a      	b.n	8005f32 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f8e4 	bl	80060ec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <USBD_SetConfig+0x118>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff f9b9 	bl	80052a2 <USBD_ClrClassConfig>
        break;
 8005f30:	bf00      	nop
    }
  }
}
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000198 	.word	0x20000198

08005f3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	88db      	ldrh	r3, [r3, #6]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d004      	beq.n	8005f58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f8cb 	bl	80060ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005f56:	e021      	b.n	8005f9c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	db17      	blt.n	8005f92 <USBD_GetConfig+0x56>
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	dd02      	ble.n	8005f6c <USBD_GetConfig+0x30>
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d00b      	beq.n	8005f82 <USBD_GetConfig+0x46>
 8005f6a:	e012      	b.n	8005f92 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3308      	adds	r3, #8
 8005f76:	2201      	movs	r2, #1
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f920 	bl	80061c0 <USBD_CtlSendData>
        break;
 8005f80:	e00c      	b.n	8005f9c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	2201      	movs	r2, #1
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f918 	bl	80061c0 <USBD_CtlSendData>
        break;
 8005f90:	e004      	b.n	8005f9c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f8a9 	bl	80060ec <USBD_CtlError>
        break;
 8005f9a:	bf00      	nop
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d81e      	bhi.n	8005ff8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	88db      	ldrh	r3, [r3, #6]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d004      	beq.n	8005fcc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f891 	bl	80060ec <USBD_CtlError>
        break;
 8005fca:	e01a      	b.n	8006002 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f043 0202 	orr.w	r2, r3, #2
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	330c      	adds	r3, #12
 8005fec:	2202      	movs	r2, #2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8e5 	bl	80061c0 <USBD_CtlSendData>
      break;
 8005ff6:	e004      	b.n	8006002 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f876 	bl	80060ec <USBD_CtlError>
      break;
 8006000:	bf00      	nop
  }
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	885b      	ldrh	r3, [r3, #2]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d106      	bne.n	800602a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f929 	bl	800627c <USBD_CtlSendStatus>
  }
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006042:	3b01      	subs	r3, #1
 8006044:	2b02      	cmp	r3, #2
 8006046:	d80b      	bhi.n	8006060 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	885b      	ldrh	r3, [r3, #2]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10c      	bne.n	800606a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f90f 	bl	800627c <USBD_CtlSendStatus>
      }
      break;
 800605e:	e004      	b.n	800606a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f842 	bl	80060ec <USBD_CtlError>
      break;
 8006068:	e000      	b.n	800606c <USBD_ClrFeature+0x3a>
      break;
 800606a:	bf00      	nop
  }
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	785a      	ldrb	r2, [r3, #1]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	3302      	adds	r3, #2
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b29a      	uxth	r2, r3
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	3303      	adds	r3, #3
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	3304      	adds	r3, #4
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	3305      	adds	r3, #5
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4413      	add	r3, r2
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	3306      	adds	r3, #6
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	3307      	adds	r3, #7
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	b29b      	uxth	r3, r3
 80060da:	4413      	add	r3, r2
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	80da      	strh	r2, [r3, #6]

}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80060f6:	2180      	movs	r1, #128	; 0x80
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fc27 	bl	800694c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80060fe:	2100      	movs	r1, #0
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fc23 	bl	800694c <USBD_LL_StallEP>
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d032      	beq.n	800618a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f834 	bl	8006192 <USBD_GetLen>
 800612a:	4603      	mov	r3, r0
 800612c:	3301      	adds	r3, #1
 800612e:	b29b      	uxth	r3, r3
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	75fa      	strb	r2, [r7, #23]
 800613e:	461a      	mov	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4413      	add	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	7812      	ldrb	r2, [r2, #0]
 8006148:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	75fa      	strb	r2, [r7, #23]
 8006150:	461a      	mov	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4413      	add	r3, r2
 8006156:	2203      	movs	r2, #3
 8006158:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800615a:	e012      	b.n	8006182 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	60fa      	str	r2, [r7, #12]
 8006162:	7dfa      	ldrb	r2, [r7, #23]
 8006164:	1c51      	adds	r1, r2, #1
 8006166:	75f9      	strb	r1, [r7, #23]
 8006168:	4611      	mov	r1, r2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	440a      	add	r2, r1
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	75fa      	strb	r2, [r7, #23]
 8006178:	461a      	mov	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4413      	add	r3, r2
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e8      	bne.n	800615c <USBD_GetString+0x4e>
    }
  }
}
 800618a:	bf00      	nop
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800619e:	e005      	b.n	80061ac <USBD_GetLen+0x1a>
  {
    len++;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	3301      	adds	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3301      	adds	r3, #1
 80061aa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f5      	bne.n	80061a0 <USBD_GetLen+0xe>
  }

  return len;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	2100      	movs	r1, #0
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fc31 	bl	8006a50 <USBD_LL_Transmit>

  return USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	2100      	movs	r1, #0
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fc1f 	bl	8006a50 <USBD_LL_Transmit>

  return USBD_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2203      	movs	r2, #3
 800622e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	2100      	movs	r1, #0
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fc24 	bl	8006a96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	2100      	movs	r1, #0
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 fc12 	bl	8006a96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2204      	movs	r2, #4
 8006288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800628c:	2300      	movs	r3, #0
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fbdc 	bl	8006a50 <USBD_LL_Transmit>

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2205      	movs	r2, #5
 80062ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062b2:	2300      	movs	r3, #0
 80062b4:	2200      	movs	r2, #0
 80062b6:	2100      	movs	r1, #0
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fbec 	bl	8006a96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062cc:	2200      	movs	r2, #0
 80062ce:	4912      	ldr	r1, [pc, #72]	; (8006318 <MX_USB_DEVICE_Init+0x50>)
 80062d0:	4812      	ldr	r0, [pc, #72]	; (800631c <MX_USB_DEVICE_Init+0x54>)
 80062d2:	f7fe ff6d 	bl	80051b0 <USBD_Init>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062dc:	f7fb f81e 	bl	800131c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062e0:	490f      	ldr	r1, [pc, #60]	; (8006320 <MX_USB_DEVICE_Init+0x58>)
 80062e2:	480e      	ldr	r0, [pc, #56]	; (800631c <MX_USB_DEVICE_Init+0x54>)
 80062e4:	f7fe ff8f 	bl	8005206 <USBD_RegisterClass>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80062ee:	f7fb f815 	bl	800131c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062f2:	490c      	ldr	r1, [pc, #48]	; (8006324 <MX_USB_DEVICE_Init+0x5c>)
 80062f4:	4809      	ldr	r0, [pc, #36]	; (800631c <MX_USB_DEVICE_Init+0x54>)
 80062f6:	f7fe feef 	bl	80050d8 <USBD_CDC_RegisterInterface>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006300:	f7fb f80c 	bl	800131c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006304:	4805      	ldr	r0, [pc, #20]	; (800631c <MX_USB_DEVICE_Init+0x54>)
 8006306:	f7fe ff97 	bl	8005238 <USBD_Start>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006310:	f7fb f804 	bl	800131c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006314:	bf00      	nop
 8006316:	bd80      	pop	{r7, pc}
 8006318:	2000012c 	.word	0x2000012c
 800631c:	20000504 	.word	0x20000504
 8006320:	20000018 	.word	0x20000018
 8006324:	2000011c 	.word	0x2000011c

08006328 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800632c:	2200      	movs	r2, #0
 800632e:	4905      	ldr	r1, [pc, #20]	; (8006344 <CDC_Init_FS+0x1c>)
 8006330:	4805      	ldr	r0, [pc, #20]	; (8006348 <CDC_Init_FS+0x20>)
 8006332:	f7fe fee7 	bl	8005104 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006336:	4905      	ldr	r1, [pc, #20]	; (800634c <CDC_Init_FS+0x24>)
 8006338:	4803      	ldr	r0, [pc, #12]	; (8006348 <CDC_Init_FS+0x20>)
 800633a:	f7fe fefc 	bl	8005136 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800633e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000bb0 	.word	0x20000bb0
 8006348:	20000504 	.word	0x20000504
 800634c:	200007c8 	.word	0x200007c8

08006350 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006354:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006356:	4618      	mov	r0, r3
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
	...

08006360 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	6039      	str	r1, [r7, #0]
 800636a:	71fb      	strb	r3, [r7, #7]
 800636c:	4613      	mov	r3, r2
 800636e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	2b23      	cmp	r3, #35	; 0x23
 8006374:	d84a      	bhi.n	800640c <CDC_Control_FS+0xac>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <CDC_Control_FS+0x1c>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	0800640d 	.word	0x0800640d
 8006380:	0800640d 	.word	0x0800640d
 8006384:	0800640d 	.word	0x0800640d
 8006388:	0800640d 	.word	0x0800640d
 800638c:	0800640d 	.word	0x0800640d
 8006390:	0800640d 	.word	0x0800640d
 8006394:	0800640d 	.word	0x0800640d
 8006398:	0800640d 	.word	0x0800640d
 800639c:	0800640d 	.word	0x0800640d
 80063a0:	0800640d 	.word	0x0800640d
 80063a4:	0800640d 	.word	0x0800640d
 80063a8:	0800640d 	.word	0x0800640d
 80063ac:	0800640d 	.word	0x0800640d
 80063b0:	0800640d 	.word	0x0800640d
 80063b4:	0800640d 	.word	0x0800640d
 80063b8:	0800640d 	.word	0x0800640d
 80063bc:	0800640d 	.word	0x0800640d
 80063c0:	0800640d 	.word	0x0800640d
 80063c4:	0800640d 	.word	0x0800640d
 80063c8:	0800640d 	.word	0x0800640d
 80063cc:	0800640d 	.word	0x0800640d
 80063d0:	0800640d 	.word	0x0800640d
 80063d4:	0800640d 	.word	0x0800640d
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	0800640d 	.word	0x0800640d
 80063e0:	0800640d 	.word	0x0800640d
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	0800640d 	.word	0x0800640d
 80063f4:	0800640d 	.word	0x0800640d
 80063f8:	0800640d 	.word	0x0800640d
 80063fc:	0800640d 	.word	0x0800640d
 8006400:	0800640d 	.word	0x0800640d
 8006404:	0800640d 	.word	0x0800640d
 8006408:	0800640d 	.word	0x0800640d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800640c:	bf00      	nop
  }

  return (USBD_OK);
 800640e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop

0800641c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	4805      	ldr	r0, [pc, #20]	; (8006440 <CDC_Receive_FS+0x24>)
 800642a:	f7fe fe84 	bl	8005136 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800642e:	4804      	ldr	r0, [pc, #16]	; (8006440 <CDC_Receive_FS+0x24>)
 8006430:	f7fe fe94 	bl	800515c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006434:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000504 	.word	0x20000504

08006444 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2212      	movs	r2, #18
 8006454:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006456:	4b03      	ldr	r3, [pc, #12]	; (8006464 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000148 	.word	0x20000148

08006468 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2204      	movs	r2, #4
 8006478:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800647a:	4b03      	ldr	r3, [pc, #12]	; (8006488 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	2000015c 	.word	0x2000015c

0800648c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4907      	ldr	r1, [pc, #28]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80064a2:	4808      	ldr	r0, [pc, #32]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80064a4:	f7ff fe33 	bl	800610e <USBD_GetString>
 80064a8:	e004      	b.n	80064b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	4904      	ldr	r1, [pc, #16]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80064b0:	f7ff fe2d 	bl	800610e <USBD_GetString>
  }
  return USBD_StrDesc;
 80064b4:	4b02      	ldr	r3, [pc, #8]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000f98 	.word	0x20000f98
 80064c4:	08006c20 	.word	0x08006c20

080064c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	4904      	ldr	r1, [pc, #16]	; (80064e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064d8:	4804      	ldr	r0, [pc, #16]	; (80064ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064da:	f7ff fe18 	bl	800610e <USBD_GetString>
  return USBD_StrDesc;
 80064de:	4b02      	ldr	r3, [pc, #8]	; (80064e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20000f98 	.word	0x20000f98
 80064ec:	08006c3c 	.word	0x08006c3c

080064f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	6039      	str	r1, [r7, #0]
 80064fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	221a      	movs	r2, #26
 8006500:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006502:	f000 f843 	bl	800658c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006506:	4b02      	ldr	r3, [pc, #8]	; (8006510 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000160 	.word	0x20000160

08006514 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d105      	bne.n	8006532 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	4907      	ldr	r1, [pc, #28]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
 800652a:	4808      	ldr	r0, [pc, #32]	; (800654c <USBD_FS_ConfigStrDescriptor+0x38>)
 800652c:	f7ff fdef 	bl	800610e <USBD_GetString>
 8006530:	e004      	b.n	800653c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	4904      	ldr	r1, [pc, #16]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006536:	4805      	ldr	r0, [pc, #20]	; (800654c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006538:	f7ff fde9 	bl	800610e <USBD_GetString>
  }
  return USBD_StrDesc;
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000f98 	.word	0x20000f98
 800654c:	08006c50 	.word	0x08006c50

08006550 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4907      	ldr	r1, [pc, #28]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006566:	4808      	ldr	r0, [pc, #32]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006568:	f7ff fdd1 	bl	800610e <USBD_GetString>
 800656c:	e004      	b.n	8006578 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4904      	ldr	r1, [pc, #16]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006572:	4805      	ldr	r0, [pc, #20]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006574:	f7ff fdcb 	bl	800610e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006578:	4b02      	ldr	r3, [pc, #8]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000f98 	.word	0x20000f98
 8006588:	08006c5c 	.word	0x08006c5c

0800658c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <Get_SerialNum+0x44>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <Get_SerialNum+0x48>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <Get_SerialNum+0x4c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80065b2:	2208      	movs	r2, #8
 80065b4:	4909      	ldr	r1, [pc, #36]	; (80065dc <Get_SerialNum+0x50>)
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f814 	bl	80065e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065bc:	2204      	movs	r2, #4
 80065be:	4908      	ldr	r1, [pc, #32]	; (80065e0 <Get_SerialNum+0x54>)
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	f000 f80f 	bl	80065e4 <IntToUnicode>
  }
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	1ffff7e8 	.word	0x1ffff7e8
 80065d4:	1ffff7ec 	.word	0x1ffff7ec
 80065d8:	1ffff7f0 	.word	0x1ffff7f0
 80065dc:	20000162 	.word	0x20000162
 80065e0:	20000172 	.word	0x20000172

080065e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]
 80065fa:	e027      	b.n	800664c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	0f1b      	lsrs	r3, r3, #28
 8006600:	2b09      	cmp	r3, #9
 8006602:	d80b      	bhi.n	800661c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	0f1b      	lsrs	r3, r3, #28
 8006608:	b2da      	uxtb	r2, r3
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4619      	mov	r1, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	440b      	add	r3, r1
 8006614:	3230      	adds	r2, #48	; 0x30
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e00a      	b.n	8006632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	0f1b      	lsrs	r3, r3, #28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4619      	mov	r1, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	440b      	add	r3, r1
 800662c:	3237      	adds	r2, #55	; 0x37
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	3301      	adds	r3, #1
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4413      	add	r3, r2
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	3301      	adds	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
 800664c:	7dfa      	ldrb	r2, [r7, #23]
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	429a      	cmp	r2, r3
 8006652:	d3d3      	bcc.n	80065fc <IntToUnicode+0x18>
  }
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
	...

08006660 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a0d      	ldr	r2, [pc, #52]	; (80066a4 <HAL_PCD_MspInit+0x44>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d113      	bne.n	800669a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <HAL_PCD_MspInit+0x48>)
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <HAL_PCD_MspInit+0x48>)
 8006678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800667c:	61d3      	str	r3, [r2, #28]
 800667e:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <HAL_PCD_MspInit+0x48>)
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	2014      	movs	r0, #20
 8006690:	f7fb f8c9 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006694:	2014      	movs	r0, #20
 8006696:	f7fb f8e2 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40005c00 	.word	0x40005c00
 80066a8:	40021000 	.word	0x40021000

080066ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f7fe fe00 	bl	80052c8 <USBD_LL_SetupStage>
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	015b      	lsls	r3, r3, #5
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	4619      	mov	r1, r3
 80066f4:	f7fe fe33 	bl	800535e <USBD_LL_DataOutStage>
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	015b      	lsls	r3, r3, #5
 8006718:	4413      	add	r3, r2
 800671a:	333c      	adds	r3, #60	; 0x3c
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	4619      	mov	r1, r3
 8006722:	f7fe fe8d 	bl	8005440 <USBD_LL_DataInStage>
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe ff9d 	bl	800567c <USBD_LL_SOF>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006752:	2301      	movs	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d001      	beq.n	8006762 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800675e:	f7fa fddd 	bl	800131c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006768:	7bfa      	ldrb	r2, [r7, #15]
 800676a:	4611      	mov	r1, r2
 800676c:	4618      	mov	r0, r3
 800676e:	f7fe ff4d 	bl	800560c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe ff06 	bl	800558a <USBD_LL_Reset>
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe ff47 	bl	800562a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <HAL_PCD_SuspendCallback+0x30>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	4a03      	ldr	r2, [pc, #12]	; (80067b8 <HAL_PCD_SuspendCallback+0x30>)
 80067aa:	f043 0306 	orr.w	r3, r3, #6
 80067ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	e000ed00 	.word	0xe000ed00

080067bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe ff41 	bl	8005652 <USBD_LL_Resume>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80067e0:	4a28      	ldr	r2, [pc, #160]	; (8006884 <USBD_LL_Init+0xac>)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a26      	ldr	r2, [pc, #152]	; (8006884 <USBD_LL_Init+0xac>)
 80067ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80067f0:	4b24      	ldr	r3, [pc, #144]	; (8006884 <USBD_LL_Init+0xac>)
 80067f2:	4a25      	ldr	r2, [pc, #148]	; (8006888 <USBD_LL_Init+0xb0>)
 80067f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80067f6:	4b23      	ldr	r3, [pc, #140]	; (8006884 <USBD_LL_Init+0xac>)
 80067f8:	2208      	movs	r2, #8
 80067fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80067fc:	4b21      	ldr	r3, [pc, #132]	; (8006884 <USBD_LL_Init+0xac>)
 80067fe:	2202      	movs	r2, #2
 8006800:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006802:	4b20      	ldr	r3, [pc, #128]	; (8006884 <USBD_LL_Init+0xac>)
 8006804:	2200      	movs	r2, #0
 8006806:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006808:	4b1e      	ldr	r3, [pc, #120]	; (8006884 <USBD_LL_Init+0xac>)
 800680a:	2200      	movs	r2, #0
 800680c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800680e:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <USBD_LL_Init+0xac>)
 8006810:	2200      	movs	r2, #0
 8006812:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006814:	481b      	ldr	r0, [pc, #108]	; (8006884 <USBD_LL_Init+0xac>)
 8006816:	f7fb f9c7 	bl	8001ba8 <HAL_PCD_Init>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006820:	f7fa fd7c 	bl	800131c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800682a:	2318      	movs	r3, #24
 800682c:	2200      	movs	r2, #0
 800682e:	2100      	movs	r1, #0
 8006830:	f7fc f860 	bl	80028f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800683a:	2358      	movs	r3, #88	; 0x58
 800683c:	2200      	movs	r2, #0
 800683e:	2180      	movs	r1, #128	; 0x80
 8006840:	f7fc f858 	bl	80028f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800684a:	23c0      	movs	r3, #192	; 0xc0
 800684c:	2200      	movs	r2, #0
 800684e:	2181      	movs	r1, #129	; 0x81
 8006850:	f7fc f850 	bl	80028f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800685a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800685e:	2200      	movs	r2, #0
 8006860:	2101      	movs	r1, #1
 8006862:	f7fc f847 	bl	80028f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800686c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006870:	2200      	movs	r2, #0
 8006872:	2182      	movs	r1, #130	; 0x82
 8006874:	f7fc f83e 	bl	80028f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20001198 	.word	0x20001198
 8006888:	40005c00 	.word	0x40005c00

0800688c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fb fa61 	bl	8001d6a <HAL_PCD_Start>
 80068a8:	4603      	mov	r3, r0
 80068aa:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 f948 	bl	8006b44 <USBD_Get_USB_Status>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	4608      	mov	r0, r1
 80068cc:	4611      	mov	r1, r2
 80068ce:	461a      	mov	r2, r3
 80068d0:	4603      	mov	r3, r0
 80068d2:	70fb      	strb	r3, [r7, #3]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70bb      	strb	r3, [r7, #2]
 80068d8:	4613      	mov	r3, r2
 80068da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068ea:	78bb      	ldrb	r3, [r7, #2]
 80068ec:	883a      	ldrh	r2, [r7, #0]
 80068ee:	78f9      	ldrb	r1, [r7, #3]
 80068f0:	f7fb fb94 	bl	800201c <HAL_PCD_EP_Open>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f922 	bl	8006b44 <USBD_Get_USB_Status>
 8006900:	4603      	mov	r3, r0
 8006902:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006904:	7bbb      	ldrb	r3, [r7, #14]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f7fb fbd5 	bl	80020dc <HAL_PCD_EP_Close>
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f903 	bl	8006b44 <USBD_Get_USB_Status>
 800693e:	4603      	mov	r3, r0
 8006940:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006942:	7bbb      	ldrb	r3, [r7, #14]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	4611      	mov	r1, r2
 800696a:	4618      	mov	r0, r3
 800696c:	f7fb fc7f 	bl	800226e <HAL_PCD_EP_SetStall>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f8e4 	bl	8006b44 <USBD_Get_USB_Status>
 800697c:	4603      	mov	r3, r0
 800697e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006980:	7bbb      	ldrb	r3, [r7, #14]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fb fcba 	bl	8002322 <HAL_PCD_EP_ClrStall>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 f8c5 	bl	8006b44 <USBD_Get_USB_Status>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80069be:	7bbb      	ldrb	r3, [r7, #14]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069da:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80069dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da08      	bge.n	80069f6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	015b      	lsls	r3, r3, #5
 80069ee:	4413      	add	r3, r2
 80069f0:	332a      	adds	r3, #42	; 0x2a
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	e008      	b.n	8006a08 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	015b      	lsls	r3, r3, #5
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006a06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	4611      	mov	r1, r2
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fb face 	bl	8001fd2 <HAL_PCD_SetAddress>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 f881 	bl	8006b44 <USBD_Get_USB_Status>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	72fb      	strb	r3, [r7, #11]
 8006a60:	4613      	mov	r3, r2
 8006a62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a72:	893b      	ldrh	r3, [r7, #8]
 8006a74:	7af9      	ldrb	r1, [r7, #11]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	f7fb fbc0 	bl	80021fc <HAL_PCD_EP_Transmit>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 f85e 	bl	8006b44 <USBD_Get_USB_Status>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006a8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b086      	sub	sp, #24
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	72fb      	strb	r3, [r7, #11]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	7af9      	ldrb	r1, [r7, #11]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	f7fb fb4f 	bl	8002160 <HAL_PCD_EP_Receive>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 f83b 	bl	8006b44 <USBD_Get_USB_Status>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fb fb6e 	bl	80021d4 <HAL_PCD_EP_GetRxCount>
 8006af8:	4603      	mov	r3, r0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006b0c:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <USBD_static_malloc+0x14>)
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr
 8006b18:	2000019c 	.word	0x2000019c

08006b1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]

}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr

08006b44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d817      	bhi.n	8006b88 <USBD_Get_USB_Status+0x44>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <USBD_Get_USB_Status+0x1c>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006b77 	.word	0x08006b77
 8006b68:	08006b7d 	.word	0x08006b7d
 8006b6c:	08006b83 	.word	0x08006b83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]
    break;
 8006b74:	e00b      	b.n	8006b8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b76:	2302      	movs	r3, #2
 8006b78:	73fb      	strb	r3, [r7, #15]
    break;
 8006b7a:	e008      	b.n	8006b8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b80:	e005      	b.n	8006b8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b82:	2302      	movs	r3, #2
 8006b84:	73fb      	strb	r3, [r7, #15]
    break;
 8006b86:	e002      	b.n	8006b8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b8c:	bf00      	nop
  }
  return usb_status;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop

08006b9c <__libc_init_array>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	4e0c      	ldr	r6, [pc, #48]	; (8006bd4 <__libc_init_array+0x38>)
 8006ba2:	4c0d      	ldr	r4, [pc, #52]	; (8006bd8 <__libc_init_array+0x3c>)
 8006ba4:	1ba4      	subs	r4, r4, r6
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	42a5      	cmp	r5, r4
 8006baa:	d109      	bne.n	8006bc0 <__libc_init_array+0x24>
 8006bac:	f000 f822 	bl	8006bf4 <_init>
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	4e0a      	ldr	r6, [pc, #40]	; (8006bdc <__libc_init_array+0x40>)
 8006bb4:	4c0a      	ldr	r4, [pc, #40]	; (8006be0 <__libc_init_array+0x44>)
 8006bb6:	1ba4      	subs	r4, r4, r6
 8006bb8:	10a4      	asrs	r4, r4, #2
 8006bba:	42a5      	cmp	r5, r4
 8006bbc:	d105      	bne.n	8006bca <__libc_init_array+0x2e>
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bc4:	4798      	blx	r3
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	e7ee      	b.n	8006ba8 <__libc_init_array+0xc>
 8006bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bce:	4798      	blx	r3
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	e7f2      	b.n	8006bba <__libc_init_array+0x1e>
 8006bd4:	08006cfc 	.word	0x08006cfc
 8006bd8:	08006cfc 	.word	0x08006cfc
 8006bdc:	08006cfc 	.word	0x08006cfc
 8006be0:	08006d00 	.word	0x08006d00

08006be4 <memset>:
 8006be4:	4603      	mov	r3, r0
 8006be6:	4402      	add	r2, r0
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d100      	bne.n	8006bee <memset+0xa>
 8006bec:	4770      	bx	lr
 8006bee:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf2:	e7f9      	b.n	8006be8 <memset+0x4>

08006bf4 <_init>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr

08006c00 <_fini>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr
